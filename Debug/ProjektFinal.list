
ProjektFinal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b50  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007e4  08002c10  08002c10  00012c10  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080033f4  080033f4  000133f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080033f8  080033f8  000133f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  080033fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000614  2000000c  08003408  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000620  08003408  00020620  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00018cfb  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002feb  00000000  00000000  00038d2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00009457  00000000  00000000  0003bd1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000b20  00000000  00000000  00045178  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001078  00000000  00000000  00045c98  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00006fa9  00000000  00000000  00046d10  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003a1f  00000000  00000000  0004dcb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000516d8  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000021bc  00000000  00000000  00051754  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002bf8 	.word	0x08002bf8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002bf8 	.word	0x08002bf8

08000108 <__gnu_thumb1_case_sqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5609      	ldrsb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__gnu_thumb1_case_uqi>:
 800011c:	b402      	push	{r1}
 800011e:	4671      	mov	r1, lr
 8000120:	0849      	lsrs	r1, r1, #1
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	5c09      	ldrb	r1, [r1, r0]
 8000126:	0049      	lsls	r1, r1, #1
 8000128:	448e      	add	lr, r1
 800012a:	bc02      	pop	{r1}
 800012c:	4770      	bx	lr
 800012e:	46c0      	nop			; (mov r8, r8)

08000130 <__udivsi3>:
 8000130:	2200      	movs	r2, #0
 8000132:	0843      	lsrs	r3, r0, #1
 8000134:	428b      	cmp	r3, r1
 8000136:	d374      	bcc.n	8000222 <__udivsi3+0xf2>
 8000138:	0903      	lsrs	r3, r0, #4
 800013a:	428b      	cmp	r3, r1
 800013c:	d35f      	bcc.n	80001fe <__udivsi3+0xce>
 800013e:	0a03      	lsrs	r3, r0, #8
 8000140:	428b      	cmp	r3, r1
 8000142:	d344      	bcc.n	80001ce <__udivsi3+0x9e>
 8000144:	0b03      	lsrs	r3, r0, #12
 8000146:	428b      	cmp	r3, r1
 8000148:	d328      	bcc.n	800019c <__udivsi3+0x6c>
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d30d      	bcc.n	800016c <__udivsi3+0x3c>
 8000150:	22ff      	movs	r2, #255	; 0xff
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	ba12      	rev	r2, r2
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d302      	bcc.n	8000162 <__udivsi3+0x32>
 800015c:	1212      	asrs	r2, r2, #8
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	d065      	beq.n	800022e <__udivsi3+0xfe>
 8000162:	0b03      	lsrs	r3, r0, #12
 8000164:	428b      	cmp	r3, r1
 8000166:	d319      	bcc.n	800019c <__udivsi3+0x6c>
 8000168:	e000      	b.n	800016c <__udivsi3+0x3c>
 800016a:	0a09      	lsrs	r1, r1, #8
 800016c:	0bc3      	lsrs	r3, r0, #15
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x46>
 8000172:	03cb      	lsls	r3, r1, #15
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b83      	lsrs	r3, r0, #14
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x52>
 800017e:	038b      	lsls	r3, r1, #14
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b43      	lsrs	r3, r0, #13
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x5e>
 800018a:	034b      	lsls	r3, r1, #13
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b03      	lsrs	r3, r0, #12
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x6a>
 8000196:	030b      	lsls	r3, r1, #12
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0ac3      	lsrs	r3, r0, #11
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x76>
 80001a2:	02cb      	lsls	r3, r1, #11
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a83      	lsrs	r3, r0, #10
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x82>
 80001ae:	028b      	lsls	r3, r1, #10
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a43      	lsrs	r3, r0, #9
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x8e>
 80001ba:	024b      	lsls	r3, r1, #9
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a03      	lsrs	r3, r0, #8
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x9a>
 80001c6:	020b      	lsls	r3, r1, #8
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	d2cd      	bcs.n	800016a <__udivsi3+0x3a>
 80001ce:	09c3      	lsrs	r3, r0, #7
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xa8>
 80001d4:	01cb      	lsls	r3, r1, #7
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0983      	lsrs	r3, r0, #6
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xb4>
 80001e0:	018b      	lsls	r3, r1, #6
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0943      	lsrs	r3, r0, #5
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xc0>
 80001ec:	014b      	lsls	r3, r1, #5
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0903      	lsrs	r3, r0, #4
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xcc>
 80001f8:	010b      	lsls	r3, r1, #4
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	08c3      	lsrs	r3, r0, #3
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xd8>
 8000204:	00cb      	lsls	r3, r1, #3
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0883      	lsrs	r3, r0, #2
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xe4>
 8000210:	008b      	lsls	r3, r1, #2
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0843      	lsrs	r3, r0, #1
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xf0>
 800021c:	004b      	lsls	r3, r1, #1
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	1a41      	subs	r1, r0, r1
 8000224:	d200      	bcs.n	8000228 <__udivsi3+0xf8>
 8000226:	4601      	mov	r1, r0
 8000228:	4152      	adcs	r2, r2
 800022a:	4610      	mov	r0, r2
 800022c:	4770      	bx	lr
 800022e:	e7ff      	b.n	8000230 <__udivsi3+0x100>
 8000230:	b501      	push	{r0, lr}
 8000232:	2000      	movs	r0, #0
 8000234:	f000 f806 	bl	8000244 <__aeabi_idiv0>
 8000238:	bd02      	pop	{r1, pc}
 800023a:	46c0      	nop			; (mov r8, r8)

0800023c <__aeabi_uidivmod>:
 800023c:	2900      	cmp	r1, #0
 800023e:	d0f7      	beq.n	8000230 <__udivsi3+0x100>
 8000240:	e776      	b.n	8000130 <__udivsi3>
 8000242:	4770      	bx	lr

08000244 <__aeabi_idiv0>:
 8000244:	4770      	bx	lr
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000248:	b510      	push	{r4, lr}
 800024a:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 800024c:	f000 ff3a 	bl	80010c4 <HAL_RCC_GetHCLKFreq>
 8000250:	21fa      	movs	r1, #250	; 0xfa
 8000252:	0089      	lsls	r1, r1, #2
 8000254:	f7ff ff6c 	bl	8000130 <__udivsi3>
 8000258:	f000 f860 	bl	800031c <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 800025c:	2001      	movs	r0, #1
 800025e:	2200      	movs	r2, #0
 8000260:	0021      	movs	r1, r4
 8000262:	4240      	negs	r0, r0
 8000264:	f000 f820 	bl	80002a8 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000268:	2000      	movs	r0, #0
 800026a:	bd10      	pop	{r4, pc}

0800026c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800026c:	2310      	movs	r3, #16
 800026e:	4a06      	ldr	r2, [pc, #24]	; (8000288 <HAL_Init+0x1c>)
{
 8000270:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000272:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000274:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000276:	430b      	orrs	r3, r1
 8000278:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800027a:	f7ff ffe5 	bl	8000248 <HAL_InitTick>
  HAL_MspInit();
 800027e:	f002 fb1d 	bl	80028bc <HAL_MspInit>
}
 8000282:	2000      	movs	r0, #0
 8000284:	bd10      	pop	{r4, pc}
 8000286:	46c0      	nop			; (mov r8, r8)
 8000288:	40022000 	.word	0x40022000

0800028c <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800028c:	4a02      	ldr	r2, [pc, #8]	; (8000298 <HAL_IncTick+0xc>)
 800028e:	6813      	ldr	r3, [r2, #0]
 8000290:	3301      	adds	r3, #1
 8000292:	6013      	str	r3, [r2, #0]
}
 8000294:	4770      	bx	lr
 8000296:	46c0      	nop			; (mov r8, r8)
 8000298:	20000484 	.word	0x20000484

0800029c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800029c:	4b01      	ldr	r3, [pc, #4]	; (80002a4 <HAL_GetTick+0x8>)
 800029e:	6818      	ldr	r0, [r3, #0]
}
 80002a0:	4770      	bx	lr
 80002a2:	46c0      	nop			; (mov r8, r8)
 80002a4:	20000484 	.word	0x20000484

080002a8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80002a8:	b570      	push	{r4, r5, r6, lr}
 80002aa:	0189      	lsls	r1, r1, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80002ac:	2800      	cmp	r0, #0
 80002ae:	da14      	bge.n	80002da <HAL_NVIC_SetPriority+0x32>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002b0:	230f      	movs	r3, #15
 80002b2:	b2c0      	uxtb	r0, r0
 80002b4:	4003      	ands	r3, r0
 80002b6:	3b08      	subs	r3, #8
 80002b8:	4a11      	ldr	r2, [pc, #68]	; (8000300 <HAL_NVIC_SetPriority+0x58>)
 80002ba:	089b      	lsrs	r3, r3, #2
 80002bc:	009b      	lsls	r3, r3, #2
 80002be:	189b      	adds	r3, r3, r2
 80002c0:	2203      	movs	r2, #3
 80002c2:	4010      	ands	r0, r2
 80002c4:	4090      	lsls	r0, r2
 80002c6:	32fc      	adds	r2, #252	; 0xfc
 80002c8:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002ca:	4011      	ands	r1, r2
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002cc:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002ce:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002d0:	69dc      	ldr	r4, [r3, #28]
 80002d2:	43ac      	bics	r4, r5
 80002d4:	4321      	orrs	r1, r4
 80002d6:	61d9      	str	r1, [r3, #28]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80002d8:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002da:	2503      	movs	r5, #3
 80002dc:	0883      	lsrs	r3, r0, #2
 80002de:	4028      	ands	r0, r5
 80002e0:	40a8      	lsls	r0, r5
 80002e2:	35fc      	adds	r5, #252	; 0xfc
 80002e4:	002e      	movs	r6, r5
 80002e6:	4a07      	ldr	r2, [pc, #28]	; (8000304 <HAL_NVIC_SetPriority+0x5c>)
 80002e8:	009b      	lsls	r3, r3, #2
 80002ea:	189b      	adds	r3, r3, r2
 80002ec:	22c0      	movs	r2, #192	; 0xc0
 80002ee:	4086      	lsls	r6, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002f0:	4029      	ands	r1, r5
 80002f2:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002f4:	0092      	lsls	r2, r2, #2
 80002f6:	589c      	ldr	r4, [r3, r2]
 80002f8:	43b4      	bics	r4, r6
 80002fa:	4321      	orrs	r1, r4
 80002fc:	5099      	str	r1, [r3, r2]
 80002fe:	e7eb      	b.n	80002d8 <HAL_NVIC_SetPriority+0x30>
 8000300:	e000ed00 	.word	0xe000ed00
 8000304:	e000e100 	.word	0xe000e100

08000308 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000308:	231f      	movs	r3, #31
 800030a:	4018      	ands	r0, r3
 800030c:	3b1e      	subs	r3, #30
 800030e:	4083      	lsls	r3, r0
 8000310:	4a01      	ldr	r2, [pc, #4]	; (8000318 <HAL_NVIC_EnableIRQ+0x10>)
 8000312:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000314:	4770      	bx	lr
 8000316:	46c0      	nop			; (mov r8, r8)
 8000318:	e000e100 	.word	0xe000e100

0800031c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800031c:	4a09      	ldr	r2, [pc, #36]	; (8000344 <HAL_SYSTICK_Config+0x28>)
 800031e:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8000320:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000322:	4293      	cmp	r3, r2
 8000324:	d80d      	bhi.n	8000342 <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000326:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000328:	4a07      	ldr	r2, [pc, #28]	; (8000348 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800032a:	4808      	ldr	r0, [pc, #32]	; (800034c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800032c:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800032e:	6a03      	ldr	r3, [r0, #32]
 8000330:	0609      	lsls	r1, r1, #24
 8000332:	021b      	lsls	r3, r3, #8
 8000334:	0a1b      	lsrs	r3, r3, #8
 8000336:	430b      	orrs	r3, r1
 8000338:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800033a:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800033c:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800033e:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000340:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000342:	4770      	bx	lr
 8000344:	00ffffff 	.word	0x00ffffff
 8000348:	e000e010 	.word	0xe000e010
 800034c:	e000ed00 	.word	0xe000ed00

08000350 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000350:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000352:	1c84      	adds	r4, r0, #2
 8000354:	7fe3      	ldrb	r3, [r4, #31]
 8000356:	2b02      	cmp	r3, #2
 8000358:	d004      	beq.n	8000364 <HAL_DMA_Abort_IT+0x14>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800035a:	2304      	movs	r3, #4
 800035c:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 800035e:	3b03      	subs	r3, #3
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 8000360:	0018      	movs	r0, r3
 8000362:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000364:	210e      	movs	r1, #14
 8000366:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000368:	6c05      	ldr	r5, [r0, #64]	; 0x40
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800036a:	681a      	ldr	r2, [r3, #0]
 800036c:	438a      	bics	r2, r1
 800036e:	601a      	str	r2, [r3, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000370:	2201      	movs	r2, #1
 8000372:	6819      	ldr	r1, [r3, #0]
 8000374:	4391      	bics	r1, r2
 8000376:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000378:	0011      	movs	r1, r2
 800037a:	40a9      	lsls	r1, r5
 800037c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800037e:	6059      	str	r1, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000380:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 8000382:	2400      	movs	r4, #0
 8000384:	1883      	adds	r3, r0, r2
    if(hdma->XferAbortCallback != NULL)
 8000386:	6b42      	ldr	r2, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 8000388:	77dc      	strb	r4, [r3, #31]
  HAL_StatusTypeDef status = HAL_OK;
 800038a:	0013      	movs	r3, r2
    if(hdma->XferAbortCallback != NULL)
 800038c:	42a2      	cmp	r2, r4
 800038e:	d0e7      	beq.n	8000360 <HAL_DMA_Abort_IT+0x10>
      hdma->XferAbortCallback(hdma);
 8000390:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 8000392:	0023      	movs	r3, r4
 8000394:	e7e4      	b.n	8000360 <HAL_DMA_Abort_IT+0x10>
	...

08000398 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000398:	b5f0      	push	{r4, r5, r6, r7, lr}
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
  
        temp = SYSCFG->EXTICR[position >> 2];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800039a:	4a56      	ldr	r2, [pc, #344]	; (80004f4 <HAL_GPIO_Init+0x15c>)
  while (((GPIO_Init->Pin) >> position) != RESET)
 800039c:	680b      	ldr	r3, [r1, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800039e:	1882      	adds	r2, r0, r2
 80003a0:	1e54      	subs	r4, r2, #1
 80003a2:	41a2      	sbcs	r2, r4
{ 
 80003a4:	b089      	sub	sp, #36	; 0x24
  while (((GPIO_Init->Pin) >> position) != RESET)
 80003a6:	9303      	str	r3, [sp, #12]
  uint32_t position = 0x00U;
 80003a8:	2300      	movs	r3, #0
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80003aa:	3204      	adds	r2, #4
 80003ac:	9205      	str	r2, [sp, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 80003ae:	9a03      	ldr	r2, [sp, #12]
 80003b0:	40da      	lsrs	r2, r3
 80003b2:	d101      	bne.n	80003b8 <HAL_GPIO_Init+0x20>
      }
    }
    
    position++;
  } 
}
 80003b4:	b009      	add	sp, #36	; 0x24
 80003b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80003b8:	2201      	movs	r2, #1
 80003ba:	409a      	lsls	r2, r3
 80003bc:	4694      	mov	ip, r2
 80003be:	4664      	mov	r4, ip
 80003c0:	9a03      	ldr	r2, [sp, #12]
 80003c2:	4022      	ands	r2, r4
 80003c4:	9202      	str	r2, [sp, #8]
    if(iocurrent)
 80003c6:	d100      	bne.n	80003ca <HAL_GPIO_Init+0x32>
 80003c8:	e092      	b.n	80004f0 <HAL_GPIO_Init+0x158>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80003ca:	684a      	ldr	r2, [r1, #4]
 80003cc:	9201      	str	r2, [sp, #4]
 80003ce:	2210      	movs	r2, #16
 80003d0:	9e01      	ldr	r6, [sp, #4]
 80003d2:	4396      	bics	r6, r2
 80003d4:	2e02      	cmp	r6, #2
 80003d6:	d10d      	bne.n	80003f4 <HAL_GPIO_Init+0x5c>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 80003d8:	2407      	movs	r4, #7
 80003da:	270f      	movs	r7, #15
 80003dc:	401c      	ands	r4, r3
 80003de:	00a4      	lsls	r4, r4, #2
 80003e0:	40a7      	lsls	r7, r4
        temp = GPIOx->AFR[position >> 3];
 80003e2:	08da      	lsrs	r2, r3, #3
 80003e4:	0092      	lsls	r2, r2, #2
 80003e6:	1882      	adds	r2, r0, r2
 80003e8:	6a15      	ldr	r5, [r2, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 80003ea:	43bd      	bics	r5, r7
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 80003ec:	690f      	ldr	r7, [r1, #16]
 80003ee:	40a7      	lsls	r7, r4
 80003f0:	433d      	orrs	r5, r7
        GPIOx->AFR[position >> 3U] = temp;
 80003f2:	6215      	str	r5, [r2, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 80003f4:	2203      	movs	r2, #3
 80003f6:	0014      	movs	r4, r2
 80003f8:	005d      	lsls	r5, r3, #1
 80003fa:	40ac      	lsls	r4, r5
 80003fc:	43e4      	mvns	r4, r4
      temp = GPIOx->MODER;
 80003fe:	6807      	ldr	r7, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000400:	3e01      	subs	r6, #1
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8000402:	4027      	ands	r7, r4
 8000404:	9704      	str	r7, [sp, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000406:	9f01      	ldr	r7, [sp, #4]
 8000408:	403a      	ands	r2, r7
 800040a:	40aa      	lsls	r2, r5
 800040c:	9f04      	ldr	r7, [sp, #16]
 800040e:	433a      	orrs	r2, r7
      GPIOx->MODER = temp;
 8000410:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000412:	2e01      	cmp	r6, #1
 8000414:	d80e      	bhi.n	8000434 <HAL_GPIO_Init+0x9c>
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000416:	68ca      	ldr	r2, [r1, #12]
        temp = GPIOx->OSPEEDR; 
 8000418:	6886      	ldr	r6, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 800041a:	40aa      	lsls	r2, r5
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800041c:	4026      	ands	r6, r4
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 800041e:	4332      	orrs	r2, r6
        GPIOx->OSPEEDR = temp;
 8000420:	6082      	str	r2, [r0, #8]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000422:	4662      	mov	r2, ip
        temp = GPIOx->OTYPER;
 8000424:	6846      	ldr	r6, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000426:	4396      	bics	r6, r2
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000428:	9a01      	ldr	r2, [sp, #4]
 800042a:	06d2      	lsls	r2, r2, #27
 800042c:	0fd2      	lsrs	r2, r2, #31
 800042e:	409a      	lsls	r2, r3
 8000430:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 8000432:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8000434:	68c2      	ldr	r2, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000436:	4014      	ands	r4, r2
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000438:	688a      	ldr	r2, [r1, #8]
 800043a:	40aa      	lsls	r2, r5
 800043c:	4314      	orrs	r4, r2
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800043e:	9a01      	ldr	r2, [sp, #4]
      GPIOx->PUPDR = temp;
 8000440:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000442:	00d2      	lsls	r2, r2, #3
 8000444:	d554      	bpl.n	80004f0 <HAL_GPIO_Init+0x158>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000446:	2601      	movs	r6, #1
 8000448:	4a2b      	ldr	r2, [pc, #172]	; (80004f8 <HAL_GPIO_Init+0x160>)
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800044a:	001d      	movs	r5, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800044c:	6994      	ldr	r4, [r2, #24]
 800044e:	4334      	orrs	r4, r6
 8000450:	6194      	str	r4, [r2, #24]
 8000452:	6992      	ldr	r2, [r2, #24]
        temp = SYSCFG->EXTICR[position >> 2];
 8000454:	089c      	lsrs	r4, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000456:	4032      	ands	r2, r6
 8000458:	9207      	str	r2, [sp, #28]
 800045a:	9a07      	ldr	r2, [sp, #28]
 800045c:	4a27      	ldr	r2, [pc, #156]	; (80004fc <HAL_GPIO_Init+0x164>)
 800045e:	00a4      	lsls	r4, r4, #2
 8000460:	18a4      	adds	r4, r4, r2
        temp = SYSCFG->EXTICR[position >> 2];
 8000462:	68a2      	ldr	r2, [r4, #8]
 8000464:	4694      	mov	ip, r2
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000466:	2203      	movs	r2, #3
 8000468:	4015      	ands	r5, r2
 800046a:	00ad      	lsls	r5, r5, #2
 800046c:	320c      	adds	r2, #12
 800046e:	40aa      	lsls	r2, r5
 8000470:	4667      	mov	r7, ip
 8000472:	4397      	bics	r7, r2
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000474:	2290      	movs	r2, #144	; 0x90
 8000476:	05d2      	lsls	r2, r2, #23
 8000478:	4694      	mov	ip, r2
 800047a:	2200      	movs	r2, #0
 800047c:	4560      	cmp	r0, ip
 800047e:	d00d      	beq.n	800049c <HAL_GPIO_Init+0x104>
 8000480:	4a1f      	ldr	r2, [pc, #124]	; (8000500 <HAL_GPIO_Init+0x168>)
 8000482:	4694      	mov	ip, r2
 8000484:	0032      	movs	r2, r6
 8000486:	4560      	cmp	r0, ip
 8000488:	d008      	beq.n	800049c <HAL_GPIO_Init+0x104>
 800048a:	4e1e      	ldr	r6, [pc, #120]	; (8000504 <HAL_GPIO_Init+0x16c>)
 800048c:	1892      	adds	r2, r2, r2
 800048e:	42b0      	cmp	r0, r6
 8000490:	d004      	beq.n	800049c <HAL_GPIO_Init+0x104>
 8000492:	4e1d      	ldr	r6, [pc, #116]	; (8000508 <HAL_GPIO_Init+0x170>)
 8000494:	3201      	adds	r2, #1
 8000496:	42b0      	cmp	r0, r6
 8000498:	d000      	beq.n	800049c <HAL_GPIO_Init+0x104>
 800049a:	9a05      	ldr	r2, [sp, #20]
 800049c:	40aa      	lsls	r2, r5
 800049e:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 80004a0:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 80004a2:	4a1a      	ldr	r2, [pc, #104]	; (800050c <HAL_GPIO_Init+0x174>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80004a4:	9c02      	ldr	r4, [sp, #8]
        temp = EXTI->IMR;
 80004a6:	6816      	ldr	r6, [r2, #0]
          SET_BIT(temp, iocurrent); 
 80004a8:	9d02      	ldr	r5, [sp, #8]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80004aa:	9f01      	ldr	r7, [sp, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80004ac:	43e4      	mvns	r4, r4
          SET_BIT(temp, iocurrent); 
 80004ae:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80004b0:	03ff      	lsls	r7, r7, #15
 80004b2:	d401      	bmi.n	80004b8 <HAL_GPIO_Init+0x120>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80004b4:	0035      	movs	r5, r6
 80004b6:	4025      	ands	r5, r4
        EXTI->IMR = temp;
 80004b8:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 80004ba:	6856      	ldr	r6, [r2, #4]
          SET_BIT(temp, iocurrent); 
 80004bc:	9d02      	ldr	r5, [sp, #8]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80004be:	9f01      	ldr	r7, [sp, #4]
          SET_BIT(temp, iocurrent); 
 80004c0:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80004c2:	03bf      	lsls	r7, r7, #14
 80004c4:	d401      	bmi.n	80004ca <HAL_GPIO_Init+0x132>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 80004c6:	0035      	movs	r5, r6
 80004c8:	4025      	ands	r5, r4
        EXTI->EMR = temp;
 80004ca:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 80004cc:	6896      	ldr	r6, [r2, #8]
          SET_BIT(temp, iocurrent); 
 80004ce:	9d02      	ldr	r5, [sp, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80004d0:	9f01      	ldr	r7, [sp, #4]
          SET_BIT(temp, iocurrent); 
 80004d2:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80004d4:	02ff      	lsls	r7, r7, #11
 80004d6:	d401      	bmi.n	80004dc <HAL_GPIO_Init+0x144>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80004d8:	0035      	movs	r5, r6
 80004da:	4025      	ands	r5, r4
        EXTI->RTSR = temp;
 80004dc:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 80004de:	68d5      	ldr	r5, [r2, #12]
          SET_BIT(temp, iocurrent); 
 80004e0:	9e02      	ldr	r6, [sp, #8]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80004e2:	9f01      	ldr	r7, [sp, #4]
          SET_BIT(temp, iocurrent); 
 80004e4:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80004e6:	02bf      	lsls	r7, r7, #10
 80004e8:	d401      	bmi.n	80004ee <HAL_GPIO_Init+0x156>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80004ea:	4025      	ands	r5, r4
 80004ec:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 80004ee:	60d6      	str	r6, [r2, #12]
    position++;
 80004f0:	3301      	adds	r3, #1
 80004f2:	e75c      	b.n	80003ae <HAL_GPIO_Init+0x16>
 80004f4:	b7fff000 	.word	0xb7fff000
 80004f8:	40021000 	.word	0x40021000
 80004fc:	40010000 	.word	0x40010000
 8000500:	48000400 	.word	0x48000400
 8000504:	48000800 	.word	0x48000800
 8000508:	48000c00 	.word	0x48000c00
 800050c:	40010400 	.word	0x40010400

08000510 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000510:	2a00      	cmp	r2, #0
 8000512:	d001      	beq.n	8000518 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000514:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000516:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000518:	6281      	str	r1, [r0, #40]	; 0x28
}
 800051a:	e7fc      	b.n	8000516 <HAL_GPIO_WritePin+0x6>

0800051c <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 800051c:	4b04      	ldr	r3, [pc, #16]	; (8000530 <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 800051e:	b510      	push	{r4, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8000520:	695a      	ldr	r2, [r3, #20]
 8000522:	4210      	tst	r0, r2
 8000524:	d002      	beq.n	800052c <HAL_GPIO_EXTI_IRQHandler+0x10>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000526:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000528:	f001 fc58 	bl	8001ddc <HAL_GPIO_EXTI_Callback>
  }
}
 800052c:	bd10      	pop	{r4, pc}
 800052e:	46c0      	nop			; (mov r8, r8)
 8000530:	40010400 	.word	0x40010400

08000534 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8000534:	6803      	ldr	r3, [r0, #0]
 8000536:	699a      	ldr	r2, [r3, #24]
 8000538:	0792      	lsls	r2, r2, #30
 800053a:	d501      	bpl.n	8000540 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 800053c:	2200      	movs	r2, #0
 800053e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000540:	2201      	movs	r2, #1
 8000542:	6999      	ldr	r1, [r3, #24]
 8000544:	4211      	tst	r1, r2
 8000546:	d102      	bne.n	800054e <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8000548:	6999      	ldr	r1, [r3, #24]
 800054a:	430a      	orrs	r2, r1
 800054c:	619a      	str	r2, [r3, #24]
  }
}
 800054e:	4770      	bx	lr

08000550 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8000550:	b530      	push	{r4, r5, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 8000552:	6804      	ldr	r4, [r0, #0]

  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8000554:	4806      	ldr	r0, [pc, #24]	; (8000570 <I2C_TransferConfig+0x20>)
  tmpreg = hi2c->Instance->CR2;
 8000556:	6865      	ldr	r5, [r4, #4]

  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 8000558:	0589      	lsls	r1, r1, #22
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 800055a:	4028      	ands	r0, r5
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 800055c:	9d03      	ldr	r5, [sp, #12]
 800055e:	0d89      	lsrs	r1, r1, #22
 8000560:	432b      	orrs	r3, r5
 8000562:	4319      	orrs	r1, r3
 8000564:	0412      	lsls	r2, r2, #16
 8000566:	430a      	orrs	r2, r1
 8000568:	4302      	orrs	r2, r0
                       (uint32_t)Mode | (uint32_t)Request);

  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;
 800056a:	6062      	str	r2, [r4, #4]
}
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	46c0      	nop			; (mov r8, r8)
 8000570:	fc009800 	.word	0xfc009800

08000574 <I2C_WaitOnFlagUntilTimeout>:
{
 8000574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000576:	0004      	movs	r4, r0
 8000578:	000e      	movs	r6, r1
 800057a:	0017      	movs	r7, r2
 800057c:	001d      	movs	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800057e:	6822      	ldr	r2, [r4, #0]
 8000580:	6993      	ldr	r3, [r2, #24]
 8000582:	4033      	ands	r3, r6
 8000584:	1b9b      	subs	r3, r3, r6
 8000586:	4259      	negs	r1, r3
 8000588:	414b      	adcs	r3, r1
 800058a:	42bb      	cmp	r3, r7
 800058c:	d001      	beq.n	8000592 <I2C_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 800058e:	2000      	movs	r0, #0
 8000590:	e00e      	b.n	80005b0 <I2C_WaitOnFlagUntilTimeout+0x3c>
    if (Timeout != HAL_MAX_DELAY)
 8000592:	1c6b      	adds	r3, r5, #1
 8000594:	d0f4      	beq.n	8000580 <I2C_WaitOnFlagUntilTimeout+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000596:	2d00      	cmp	r5, #0
 8000598:	d10b      	bne.n	80005b2 <I2C_WaitOnFlagUntilTimeout+0x3e>
        hi2c->State = HAL_I2C_STATE_READY;
 800059a:	0023      	movs	r3, r4
 800059c:	2220      	movs	r2, #32
 800059e:	3341      	adds	r3, #65	; 0x41
 80005a0:	701a      	strb	r2, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80005a2:	0022      	movs	r2, r4
 80005a4:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 80005a6:	2003      	movs	r0, #3
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80005a8:	3242      	adds	r2, #66	; 0x42
        __HAL_UNLOCK(hi2c);
 80005aa:	3440      	adds	r4, #64	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80005ac:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 80005ae:	7023      	strb	r3, [r4, #0]
}
 80005b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80005b2:	f7ff fe73 	bl	800029c <HAL_GetTick>
 80005b6:	9b06      	ldr	r3, [sp, #24]
 80005b8:	1ac0      	subs	r0, r0, r3
 80005ba:	4285      	cmp	r5, r0
 80005bc:	d2df      	bcs.n	800057e <I2C_WaitOnFlagUntilTimeout+0xa>
 80005be:	e7ec      	b.n	800059a <I2C_WaitOnFlagUntilTimeout+0x26>

080005c0 <I2C_IsAcknowledgeFailed>:
{
 80005c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80005c2:	6803      	ldr	r3, [r0, #0]
{
 80005c4:	0004      	movs	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80005c6:	6998      	ldr	r0, [r3, #24]
 80005c8:	2310      	movs	r3, #16
{
 80005ca:	000e      	movs	r6, r1
 80005cc:	0017      	movs	r7, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80005ce:	4018      	ands	r0, r3
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80005d0:	2520      	movs	r5, #32
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80005d2:	2800      	cmp	r0, #0
 80005d4:	d115      	bne.n	8000602 <I2C_IsAcknowledgeFailed+0x42>
}
 80005d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (Timeout != HAL_MAX_DELAY)
 80005d8:	1c72      	adds	r2, r6, #1
 80005da:	d013      	beq.n	8000604 <I2C_IsAcknowledgeFailed+0x44>
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80005dc:	2e00      	cmp	r6, #0
 80005de:	d10b      	bne.n	80005f8 <I2C_IsAcknowledgeFailed+0x38>
          hi2c->State = HAL_I2C_STATE_READY;
 80005e0:	0023      	movs	r3, r4
 80005e2:	2220      	movs	r2, #32
 80005e4:	3341      	adds	r3, #65	; 0x41
 80005e6:	701a      	strb	r2, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80005e8:	0022      	movs	r2, r4
 80005ea:	2300      	movs	r3, #0
 80005ec:	3242      	adds	r2, #66	; 0x42
          __HAL_UNLOCK(hi2c);
 80005ee:	3440      	adds	r4, #64	; 0x40
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80005f0:	7013      	strb	r3, [r2, #0]
          return HAL_TIMEOUT;
 80005f2:	2003      	movs	r0, #3
          __HAL_UNLOCK(hi2c);
 80005f4:	7023      	strb	r3, [r4, #0]
 80005f6:	e7ee      	b.n	80005d6 <I2C_IsAcknowledgeFailed+0x16>
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80005f8:	f7ff fe50 	bl	800029c <HAL_GetTick>
 80005fc:	1bc0      	subs	r0, r0, r7
 80005fe:	4286      	cmp	r6, r0
 8000600:	d3ee      	bcc.n	80005e0 <I2C_IsAcknowledgeFailed+0x20>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000602:	6823      	ldr	r3, [r4, #0]
 8000604:	699a      	ldr	r2, [r3, #24]
 8000606:	422a      	tst	r2, r5
 8000608:	d0e6      	beq.n	80005d8 <I2C_IsAcknowledgeFailed+0x18>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800060a:	2210      	movs	r2, #16
    I2C_Flush_TXDR(hi2c);
 800060c:	0020      	movs	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800060e:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000610:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8000612:	f7ff ff8f 	bl	8000534 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8000616:	6822      	ldr	r2, [r4, #0]
 8000618:	4908      	ldr	r1, [pc, #32]	; (800063c <I2C_IsAcknowledgeFailed+0x7c>)
 800061a:	6853      	ldr	r3, [r2, #4]
    return HAL_ERROR;
 800061c:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 800061e:	400b      	ands	r3, r1
 8000620:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8000622:	2304      	movs	r3, #4
 8000624:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8000626:	0023      	movs	r3, r4
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000628:	0022      	movs	r2, r4
    hi2c->State = HAL_I2C_STATE_READY;
 800062a:	3341      	adds	r3, #65	; 0x41
 800062c:	701d      	strb	r5, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800062e:	2300      	movs	r3, #0
 8000630:	3242      	adds	r2, #66	; 0x42
    __HAL_UNLOCK(hi2c);
 8000632:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000634:	7013      	strb	r3, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8000636:	7023      	strb	r3, [r4, #0]
 8000638:	e7cd      	b.n	80005d6 <I2C_IsAcknowledgeFailed+0x16>
 800063a:	46c0      	nop			; (mov r8, r8)
 800063c:	fe00e800 	.word	0xfe00e800

08000640 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8000640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000642:	0004      	movs	r4, r0
 8000644:	000d      	movs	r5, r1
 8000646:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8000648:	2702      	movs	r7, #2
 800064a:	6823      	ldr	r3, [r4, #0]
 800064c:	699b      	ldr	r3, [r3, #24]
 800064e:	423b      	tst	r3, r7
 8000650:	d001      	beq.n	8000656 <I2C_WaitOnTXISFlagUntilTimeout+0x16>
  return HAL_OK;
 8000652:	2000      	movs	r0, #0
 8000654:	e018      	b.n	8000688 <I2C_WaitOnTXISFlagUntilTimeout+0x48>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000656:	0032      	movs	r2, r6
 8000658:	0029      	movs	r1, r5
 800065a:	0020      	movs	r0, r4
 800065c:	f7ff ffb0 	bl	80005c0 <I2C_IsAcknowledgeFailed>
 8000660:	2800      	cmp	r0, #0
 8000662:	d118      	bne.n	8000696 <I2C_WaitOnTXISFlagUntilTimeout+0x56>
    if (Timeout != HAL_MAX_DELAY)
 8000664:	1c6b      	adds	r3, r5, #1
 8000666:	d0f0      	beq.n	800064a <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000668:	2d00      	cmp	r5, #0
 800066a:	d10e      	bne.n	800068a <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800066c:	2220      	movs	r2, #32
 800066e:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8000670:	2003      	movs	r0, #3
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000672:	4313      	orrs	r3, r2
 8000674:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000676:	0023      	movs	r3, r4
 8000678:	3341      	adds	r3, #65	; 0x41
 800067a:	701a      	strb	r2, [r3, #0]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800067c:	0022      	movs	r2, r4
 800067e:	2300      	movs	r3, #0
 8000680:	3242      	adds	r2, #66	; 0x42
      __HAL_UNLOCK(hi2c);
 8000682:	3440      	adds	r4, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000684:	7013      	strb	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 8000686:	7023      	strb	r3, [r4, #0]
}
 8000688:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800068a:	f7ff fe07 	bl	800029c <HAL_GetTick>
 800068e:	1b80      	subs	r0, r0, r6
 8000690:	4285      	cmp	r5, r0
 8000692:	d2da      	bcs.n	800064a <I2C_WaitOnTXISFlagUntilTimeout+0xa>
 8000694:	e7ea      	b.n	800066c <I2C_WaitOnTXISFlagUntilTimeout+0x2c>
      return HAL_ERROR;
 8000696:	2001      	movs	r0, #1
 8000698:	e7f6      	b.n	8000688 <I2C_WaitOnTXISFlagUntilTimeout+0x48>

0800069a <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800069a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800069c:	0004      	movs	r4, r0
 800069e:	000d      	movs	r5, r1
 80006a0:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80006a2:	2720      	movs	r7, #32
 80006a4:	6823      	ldr	r3, [r4, #0]
 80006a6:	699b      	ldr	r3, [r3, #24]
 80006a8:	423b      	tst	r3, r7
 80006aa:	d001      	beq.n	80006b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 80006ac:	2000      	movs	r0, #0
 80006ae:	e016      	b.n	80006de <I2C_WaitOnSTOPFlagUntilTimeout+0x44>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80006b0:	0032      	movs	r2, r6
 80006b2:	0029      	movs	r1, r5
 80006b4:	0020      	movs	r0, r4
 80006b6:	f7ff ff83 	bl	80005c0 <I2C_IsAcknowledgeFailed>
 80006ba:	2800      	cmp	r0, #0
 80006bc:	d116      	bne.n	80006ec <I2C_WaitOnSTOPFlagUntilTimeout+0x52>
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80006be:	2d00      	cmp	r5, #0
 80006c0:	d10e      	bne.n	80006e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80006c2:	2220      	movs	r2, #32
 80006c4:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80006c6:	2003      	movs	r0, #3
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80006c8:	4313      	orrs	r3, r2
 80006ca:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80006cc:	0023      	movs	r3, r4
 80006ce:	3341      	adds	r3, #65	; 0x41
 80006d0:	701a      	strb	r2, [r3, #0]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80006d2:	0022      	movs	r2, r4
 80006d4:	2300      	movs	r3, #0
 80006d6:	3242      	adds	r2, #66	; 0x42
      __HAL_UNLOCK(hi2c);
 80006d8:	3440      	adds	r4, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80006da:	7013      	strb	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 80006dc:	7023      	strb	r3, [r4, #0]
}
 80006de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80006e0:	f7ff fddc 	bl	800029c <HAL_GetTick>
 80006e4:	1b80      	subs	r0, r0, r6
 80006e6:	4285      	cmp	r5, r0
 80006e8:	d2dc      	bcs.n	80006a4 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
 80006ea:	e7ea      	b.n	80006c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x28>
      return HAL_ERROR;
 80006ec:	2001      	movs	r0, #1
 80006ee:	e7f6      	b.n	80006de <I2C_WaitOnSTOPFlagUntilTimeout+0x44>

080006f0 <HAL_I2C_Init>:
{
 80006f0:	b570      	push	{r4, r5, r6, lr}
 80006f2:	0004      	movs	r4, r0
    return HAL_ERROR;
 80006f4:	2001      	movs	r0, #1
  if (hi2c == NULL)
 80006f6:	2c00      	cmp	r4, #0
 80006f8:	d03f      	beq.n	800077a <HAL_I2C_Init+0x8a>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80006fa:	0025      	movs	r5, r4
 80006fc:	3541      	adds	r5, #65	; 0x41
 80006fe:	782b      	ldrb	r3, [r5, #0]
 8000700:	b2db      	uxtb	r3, r3
 8000702:	2b00      	cmp	r3, #0
 8000704:	d105      	bne.n	8000712 <HAL_I2C_Init+0x22>
    hi2c->Lock = HAL_UNLOCKED;
 8000706:	0022      	movs	r2, r4
 8000708:	3240      	adds	r2, #64	; 0x40
 800070a:	7013      	strb	r3, [r2, #0]
    HAL_I2C_MspInit(hi2c);
 800070c:	0020      	movs	r0, r4
 800070e:	f002 f8ed 	bl	80028ec <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000712:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8000714:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000716:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 8000718:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800071a:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 800071c:	681a      	ldr	r2, [r3, #0]
 800071e:	68a6      	ldr	r6, [r4, #8]
 8000720:	438a      	bics	r2, r1
 8000722:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000724:	6861      	ldr	r1, [r4, #4]
 8000726:	4a1a      	ldr	r2, [pc, #104]	; (8000790 <HAL_I2C_Init+0xa0>)
 8000728:	400a      	ands	r2, r1
 800072a:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800072c:	6899      	ldr	r1, [r3, #8]
 800072e:	4a19      	ldr	r2, [pc, #100]	; (8000794 <HAL_I2C_Init+0xa4>)
 8000730:	4011      	ands	r1, r2
 8000732:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000734:	2801      	cmp	r0, #1
 8000736:	d121      	bne.n	800077c <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000738:	2180      	movs	r1, #128	; 0x80
 800073a:	0209      	lsls	r1, r1, #8
 800073c:	4331      	orrs	r1, r6
 800073e:	6099      	str	r1, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000740:	6858      	ldr	r0, [r3, #4]
 8000742:	4915      	ldr	r1, [pc, #84]	; (8000798 <HAL_I2C_Init+0xa8>)
 8000744:	4301      	orrs	r1, r0
 8000746:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000748:	68d9      	ldr	r1, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800074a:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800074c:	400a      	ands	r2, r1
 800074e:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000750:	6961      	ldr	r1, [r4, #20]
 8000752:	6922      	ldr	r2, [r4, #16]
 8000754:	430a      	orrs	r2, r1
 8000756:	69a1      	ldr	r1, [r4, #24]
 8000758:	0209      	lsls	r1, r1, #8
 800075a:	430a      	orrs	r2, r1
 800075c:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800075e:	6a21      	ldr	r1, [r4, #32]
 8000760:	69e2      	ldr	r2, [r4, #28]
 8000762:	430a      	orrs	r2, r1
 8000764:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8000766:	2201      	movs	r2, #1
 8000768:	6819      	ldr	r1, [r3, #0]
 800076a:	430a      	orrs	r2, r1
 800076c:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 800076e:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000770:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000772:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 8000774:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000776:	3442      	adds	r4, #66	; 0x42
 8000778:	7020      	strb	r0, [r4, #0]
}
 800077a:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800077c:	2184      	movs	r1, #132	; 0x84
 800077e:	0209      	lsls	r1, r1, #8
 8000780:	4331      	orrs	r1, r6
 8000782:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000784:	2802      	cmp	r0, #2
 8000786:	d1db      	bne.n	8000740 <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000788:	2180      	movs	r1, #128	; 0x80
 800078a:	0109      	lsls	r1, r1, #4
 800078c:	6059      	str	r1, [r3, #4]
 800078e:	e7d7      	b.n	8000740 <HAL_I2C_Init+0x50>
 8000790:	f0ffffff 	.word	0xf0ffffff
 8000794:	ffff7fff 	.word	0xffff7fff
 8000798:	02008000 	.word	0x02008000

0800079c <HAL_I2C_Master_Transmit>:
{
 800079c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 800079e:	0005      	movs	r5, r0
{
 80007a0:	b087      	sub	sp, #28
 80007a2:	9103      	str	r1, [sp, #12]
 80007a4:	9204      	str	r2, [sp, #16]
 80007a6:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80007a8:	3541      	adds	r5, #65	; 0x41
 80007aa:	782b      	ldrb	r3, [r5, #0]
{
 80007ac:	0004      	movs	r4, r0
    return HAL_BUSY;
 80007ae:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80007b0:	2b20      	cmp	r3, #32
 80007b2:	d157      	bne.n	8000864 <HAL_I2C_Master_Transmit+0xc8>
    __HAL_LOCK(hi2c);
 80007b4:	0023      	movs	r3, r4
 80007b6:	3340      	adds	r3, #64	; 0x40
 80007b8:	781a      	ldrb	r2, [r3, #0]
 80007ba:	2a01      	cmp	r2, #1
 80007bc:	d052      	beq.n	8000864 <HAL_I2C_Master_Transmit+0xc8>
 80007be:	2601      	movs	r6, #1
 80007c0:	701e      	strb	r6, [r3, #0]
    tickstart = HAL_GetTick();
 80007c2:	f7ff fd6b 	bl	800029c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80007c6:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 80007c8:	0007      	movs	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80007ca:	9000      	str	r0, [sp, #0]
 80007cc:	2319      	movs	r3, #25
 80007ce:	0032      	movs	r2, r6
 80007d0:	0209      	lsls	r1, r1, #8
 80007d2:	0020      	movs	r0, r4
 80007d4:	f7ff fece 	bl	8000574 <I2C_WaitOnFlagUntilTimeout>
 80007d8:	2800      	cmp	r0, #0
 80007da:	d142      	bne.n	8000862 <HAL_I2C_Master_Transmit+0xc6>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80007dc:	2321      	movs	r3, #33	; 0x21
 80007de:	702b      	strb	r3, [r5, #0]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80007e0:	3b11      	subs	r3, #17
 80007e2:	19ad      	adds	r5, r5, r6
 80007e4:	702b      	strb	r3, [r5, #0]
    hi2c->pBuffPtr  = pData;
 80007e6:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80007e8:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 80007ea:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 80007ec:	466b      	mov	r3, sp
 80007ee:	8a9b      	ldrh	r3, [r3, #20]
    hi2c->XferISR   = NULL;
 80007f0:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 80007f2:	8563      	strh	r3, [r4, #42]	; 0x2a
 80007f4:	2380      	movs	r3, #128	; 0x80
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80007f6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80007f8:	019b      	lsls	r3, r3, #6
 80007fa:	2aff      	cmp	r2, #255	; 0xff
 80007fc:	d921      	bls.n	8000842 <HAL_I2C_Master_Transmit+0xa6>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80007fe:	22ff      	movs	r2, #255	; 0xff
 8000800:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8000802:	9300      	str	r3, [sp, #0]
 8000804:	2380      	movs	r3, #128	; 0x80
 8000806:	045b      	lsls	r3, r3, #17
 8000808:	9903      	ldr	r1, [sp, #12]
 800080a:	0020      	movs	r0, r4
 800080c:	f7ff fea0 	bl	8000550 <I2C_TransferConfig>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000810:	26ff      	movs	r6, #255	; 0xff
    while (hi2c->XferCount > 0U)
 8000812:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000814:	003a      	movs	r2, r7
 8000816:	990c      	ldr	r1, [sp, #48]	; 0x30
 8000818:	0020      	movs	r0, r4
    while (hi2c->XferCount > 0U)
 800081a:	2b00      	cmp	r3, #0
 800081c:	d119      	bne.n	8000852 <HAL_I2C_Master_Transmit+0xb6>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800081e:	f7ff ff3c 	bl	800069a <I2C_WaitOnSTOPFlagUntilTimeout>
 8000822:	2800      	cmp	r0, #0
 8000824:	d119      	bne.n	800085a <HAL_I2C_Master_Transmit+0xbe>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000826:	2120      	movs	r1, #32
 8000828:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 800082a:	4e27      	ldr	r6, [pc, #156]	; (80008c8 <HAL_I2C_Master_Transmit+0x12c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800082c:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800082e:	685a      	ldr	r2, [r3, #4]
 8000830:	4032      	ands	r2, r6
 8000832:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8000834:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 8000836:	3440      	adds	r4, #64	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8000838:	3341      	adds	r3, #65	; 0x41
 800083a:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800083c:	7028      	strb	r0, [r5, #0]
    __HAL_UNLOCK(hi2c);
 800083e:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8000840:	e010      	b.n	8000864 <HAL_I2C_Master_Transmit+0xc8>
      hi2c->XferSize = hi2c->XferCount;
 8000842:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8000844:	b292      	uxth	r2, r2
 8000846:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8000848:	9300      	str	r3, [sp, #0]
 800084a:	2380      	movs	r3, #128	; 0x80
 800084c:	b2d2      	uxtb	r2, r2
 800084e:	049b      	lsls	r3, r3, #18
 8000850:	e7da      	b.n	8000808 <HAL_I2C_Master_Transmit+0x6c>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000852:	f7ff fef5 	bl	8000640 <I2C_WaitOnTXISFlagUntilTimeout>
 8000856:	2800      	cmp	r0, #0
 8000858:	d006      	beq.n	8000868 <HAL_I2C_Master_Transmit+0xcc>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800085a:	6c63      	ldr	r3, [r4, #68]	; 0x44
          return HAL_ERROR;
 800085c:	2001      	movs	r0, #1
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800085e:	2b04      	cmp	r3, #4
 8000860:	d000      	beq.n	8000864 <HAL_I2C_Master_Transmit+0xc8>
          return HAL_TIMEOUT;
 8000862:	2003      	movs	r0, #3
}
 8000864:	b007      	add	sp, #28
 8000866:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8000868:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800086a:	6822      	ldr	r2, [r4, #0]
 800086c:	1c59      	adds	r1, r3, #1
 800086e:	6261      	str	r1, [r4, #36]	; 0x24
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferCount--;
 8000874:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000876:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8000878:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 800087a:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 800087c:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 800087e:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8000880:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000882:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8000884:	2a00      	cmp	r2, #0
 8000886:	d1c4      	bne.n	8000812 <HAL_I2C_Master_Transmit+0x76>
 8000888:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800088a:	2b00      	cmp	r3, #0
 800088c:	d0c1      	beq.n	8000812 <HAL_I2C_Master_Transmit+0x76>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800088e:	9700      	str	r7, [sp, #0]
 8000890:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000892:	2180      	movs	r1, #128	; 0x80
 8000894:	0020      	movs	r0, r4
 8000896:	f7ff fe6d 	bl	8000574 <I2C_WaitOnFlagUntilTimeout>
 800089a:	2800      	cmp	r0, #0
 800089c:	d1e1      	bne.n	8000862 <HAL_I2C_Master_Transmit+0xc6>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800089e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80008a0:	2bff      	cmp	r3, #255	; 0xff
 80008a2:	d909      	bls.n	80008b8 <HAL_I2C_Master_Transmit+0x11c>
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80008a4:	2380      	movs	r3, #128	; 0x80
 80008a6:	22ff      	movs	r2, #255	; 0xff
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80008a8:	8526      	strh	r6, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80008aa:	045b      	lsls	r3, r3, #17
 80008ac:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80008ae:	9903      	ldr	r1, [sp, #12]
 80008b0:	0020      	movs	r0, r4
 80008b2:	f7ff fe4d 	bl	8000550 <I2C_TransferConfig>
 80008b6:	e7ac      	b.n	8000812 <HAL_I2C_Master_Transmit+0x76>
 80008b8:	2380      	movs	r3, #128	; 0x80
          hi2c->XferSize = hi2c->XferCount;
 80008ba:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80008bc:	049b      	lsls	r3, r3, #18
          hi2c->XferSize = hi2c->XferCount;
 80008be:	b292      	uxth	r2, r2
 80008c0:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80008c2:	b2d2      	uxtb	r2, r2
 80008c4:	9000      	str	r0, [sp, #0]
 80008c6:	e7f2      	b.n	80008ae <HAL_I2C_Master_Transmit+0x112>
 80008c8:	fe00e800 	.word	0xfe00e800

080008cc <HAL_I2C_IsDeviceReady>:
{
 80008cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008ce:	b089      	sub	sp, #36	; 0x24
 80008d0:	9105      	str	r1, [sp, #20]
 80008d2:	001d      	movs	r5, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 80008d4:	0001      	movs	r1, r0
  __IO uint32_t I2C_Trials = 0U;
 80008d6:	2300      	movs	r3, #0
{
 80008d8:	9204      	str	r2, [sp, #16]
  __IO uint32_t I2C_Trials = 0U;
 80008da:	9307      	str	r3, [sp, #28]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80008dc:	3141      	adds	r1, #65	; 0x41
 80008de:	780b      	ldrb	r3, [r1, #0]
{
 80008e0:	0004      	movs	r4, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80008e2:	b2db      	uxtb	r3, r3
    return HAL_BUSY;
 80008e4:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80008e6:	2b20      	cmp	r3, #32
 80008e8:	d155      	bne.n	8000996 <HAL_I2C_IsDeviceReady+0xca>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80008ea:	6822      	ldr	r2, [r4, #0]
 80008ec:	6996      	ldr	r6, [r2, #24]
 80008ee:	2280      	movs	r2, #128	; 0x80
 80008f0:	0212      	lsls	r2, r2, #8
 80008f2:	4032      	ands	r2, r6
 80008f4:	d14f      	bne.n	8000996 <HAL_I2C_IsDeviceReady+0xca>
    __HAL_LOCK(hi2c);
 80008f6:	0026      	movs	r6, r4
 80008f8:	3640      	adds	r6, #64	; 0x40
 80008fa:	7837      	ldrb	r7, [r6, #0]
 80008fc:	2f01      	cmp	r7, #1
 80008fe:	d04a      	beq.n	8000996 <HAL_I2C_IsDeviceReady+0xca>
 8000900:	3801      	subs	r0, #1
 8000902:	7030      	strb	r0, [r6, #0]
      while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET) && (hi2c->State != HAL_I2C_STATE_TIMEOUT))
 8000904:	001e      	movs	r6, r3
    hi2c->State = HAL_I2C_STATE_BUSY;
 8000906:	3023      	adds	r0, #35	; 0x23
 8000908:	7008      	strb	r0, [r1, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800090a:	6462      	str	r2, [r4, #68]	; 0x44
 800090c:	9b05      	ldr	r3, [sp, #20]
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800090e:	68e1      	ldr	r1, [r4, #12]
 8000910:	059b      	lsls	r3, r3, #22
 8000912:	6822      	ldr	r2, [r4, #0]
 8000914:	0d9b      	lsrs	r3, r3, #22
 8000916:	2901      	cmp	r1, #1
 8000918:	d11a      	bne.n	8000950 <HAL_I2C_IsDeviceReady+0x84>
 800091a:	4936      	ldr	r1, [pc, #216]	; (80009f4 <HAL_I2C_IsDeviceReady+0x128>)
 800091c:	430b      	orrs	r3, r1
 800091e:	6053      	str	r3, [r2, #4]
      tickstart = HAL_GetTick();
 8000920:	f7ff fcbc 	bl	800029c <HAL_GetTick>
 8000924:	9003      	str	r0, [sp, #12]
      while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET) && (hi2c->State != HAL_I2C_STATE_TIMEOUT))
 8000926:	0027      	movs	r7, r4
 8000928:	6823      	ldr	r3, [r4, #0]
 800092a:	3741      	adds	r7, #65	; 0x41
 800092c:	699a      	ldr	r2, [r3, #24]
 800092e:	4232      	tst	r2, r6
 8000930:	d018      	beq.n	8000964 <HAL_I2C_IsDeviceReady+0x98>
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8000932:	2710      	movs	r7, #16
 8000934:	699a      	ldr	r2, [r3, #24]
 8000936:	403a      	ands	r2, r7
 8000938:	d12f      	bne.n	800099a <HAL_I2C_IsDeviceReady+0xce>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800093a:	9b03      	ldr	r3, [sp, #12]
 800093c:	2120      	movs	r1, #32
 800093e:	9300      	str	r3, [sp, #0]
 8000940:	0020      	movs	r0, r4
 8000942:	002b      	movs	r3, r5
 8000944:	f7ff fe16 	bl	8000574 <I2C_WaitOnFlagUntilTimeout>
 8000948:	2800      	cmp	r0, #0
 800094a:	d01c      	beq.n	8000986 <HAL_I2C_IsDeviceReady+0xba>
    return HAL_TIMEOUT;
 800094c:	2003      	movs	r0, #3
 800094e:	e022      	b.n	8000996 <HAL_I2C_IsDeviceReady+0xca>
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8000950:	21a0      	movs	r1, #160	; 0xa0
 8000952:	0189      	lsls	r1, r1, #6
 8000954:	e7e2      	b.n	800091c <HAL_I2C_IsDeviceReady+0x50>
          if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000956:	f7ff fca1 	bl	800029c <HAL_GetTick>
 800095a:	9b03      	ldr	r3, [sp, #12]
 800095c:	1ac0      	subs	r0, r0, r3
 800095e:	4285      	cmp	r5, r0
 8000960:	d2e1      	bcs.n	8000926 <HAL_I2C_IsDeviceReady+0x5a>
 8000962:	e00a      	b.n	800097a <HAL_I2C_IsDeviceReady+0xae>
      while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET) && (hi2c->State != HAL_I2C_STATE_TIMEOUT))
 8000964:	2110      	movs	r1, #16
 8000966:	699a      	ldr	r2, [r3, #24]
 8000968:	420a      	tst	r2, r1
 800096a:	d1e2      	bne.n	8000932 <HAL_I2C_IsDeviceReady+0x66>
 800096c:	783a      	ldrb	r2, [r7, #0]
 800096e:	2aa0      	cmp	r2, #160	; 0xa0
 8000970:	d0df      	beq.n	8000932 <HAL_I2C_IsDeviceReady+0x66>
        if (Timeout != HAL_MAX_DELAY)
 8000972:	1c6a      	adds	r2, r5, #1
 8000974:	d0da      	beq.n	800092c <HAL_I2C_IsDeviceReady+0x60>
          if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000976:	2d00      	cmp	r5, #0
 8000978:	d1ed      	bne.n	8000956 <HAL_I2C_IsDeviceReady+0x8a>
            hi2c->State = HAL_I2C_STATE_READY;
 800097a:	2320      	movs	r3, #32
 800097c:	703b      	strb	r3, [r7, #0]
    __HAL_UNLOCK(hi2c);
 800097e:	2300      	movs	r3, #0
 8000980:	3440      	adds	r4, #64	; 0x40
 8000982:	7023      	strb	r3, [r4, #0]
 8000984:	e7e2      	b.n	800094c <HAL_I2C_IsDeviceReady+0x80>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000986:	2320      	movs	r3, #32
 8000988:	6822      	ldr	r2, [r4, #0]
 800098a:	61d3      	str	r3, [r2, #28]
        hi2c->State = HAL_I2C_STATE_READY;
 800098c:	0022      	movs	r2, r4
        __HAL_UNLOCK(hi2c);
 800098e:	3440      	adds	r4, #64	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 8000990:	3241      	adds	r2, #65	; 0x41
 8000992:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 8000994:	7020      	strb	r0, [r4, #0]
}
 8000996:	b009      	add	sp, #36	; 0x24
 8000998:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800099a:	9b03      	ldr	r3, [sp, #12]
 800099c:	2200      	movs	r2, #0
 800099e:	9300      	str	r3, [sp, #0]
 80009a0:	0031      	movs	r1, r6
 80009a2:	002b      	movs	r3, r5
 80009a4:	0020      	movs	r0, r4
 80009a6:	f7ff fde5 	bl	8000574 <I2C_WaitOnFlagUntilTimeout>
 80009aa:	1e02      	subs	r2, r0, #0
 80009ac:	d1ce      	bne.n	800094c <HAL_I2C_IsDeviceReady+0x80>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80009ae:	6823      	ldr	r3, [r4, #0]
 80009b0:	61df      	str	r7, [r3, #28]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80009b2:	61de      	str	r6, [r3, #28]
      if (I2C_Trials++ == Trials)
 80009b4:	9907      	ldr	r1, [sp, #28]
 80009b6:	1c48      	adds	r0, r1, #1
 80009b8:	9007      	str	r0, [sp, #28]
 80009ba:	9804      	ldr	r0, [sp, #16]
 80009bc:	4281      	cmp	r1, r0
 80009be:	d10f      	bne.n	80009e0 <HAL_I2C_IsDeviceReady+0x114>
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80009c0:	2180      	movs	r1, #128	; 0x80
 80009c2:	6858      	ldr	r0, [r3, #4]
 80009c4:	01c9      	lsls	r1, r1, #7
 80009c6:	4301      	orrs	r1, r0
 80009c8:	6059      	str	r1, [r3, #4]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80009ca:	9b03      	ldr	r3, [sp, #12]
 80009cc:	0031      	movs	r1, r6
 80009ce:	9300      	str	r3, [sp, #0]
 80009d0:	0020      	movs	r0, r4
 80009d2:	002b      	movs	r3, r5
 80009d4:	f7ff fdce 	bl	8000574 <I2C_WaitOnFlagUntilTimeout>
 80009d8:	2800      	cmp	r0, #0
 80009da:	d1b7      	bne.n	800094c <HAL_I2C_IsDeviceReady+0x80>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80009dc:	6823      	ldr	r3, [r4, #0]
 80009de:	61de      	str	r6, [r3, #28]
    while (I2C_Trials < Trials);
 80009e0:	9b07      	ldr	r3, [sp, #28]
 80009e2:	9a04      	ldr	r2, [sp, #16]
 80009e4:	429a      	cmp	r2, r3
 80009e6:	d900      	bls.n	80009ea <HAL_I2C_IsDeviceReady+0x11e>
 80009e8:	e790      	b.n	800090c <HAL_I2C_IsDeviceReady+0x40>
    hi2c->State = HAL_I2C_STATE_READY;
 80009ea:	0023      	movs	r3, r4
 80009ec:	2220      	movs	r2, #32
 80009ee:	3341      	adds	r3, #65	; 0x41
 80009f0:	701a      	strb	r2, [r3, #0]
 80009f2:	e7c4      	b.n	800097e <HAL_I2C_IsDeviceReady+0xb2>
 80009f4:	02002000 	.word	0x02002000

080009f8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80009f8:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80009fa:	0004      	movs	r4, r0
 80009fc:	3441      	adds	r4, #65	; 0x41
 80009fe:	7822      	ldrb	r2, [r4, #0]
{
 8000a00:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000a02:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8000a04:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000a06:	2a20      	cmp	r2, #32
 8000a08:	d118      	bne.n	8000a3c <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_LOCK(hi2c);
 8000a0a:	001d      	movs	r5, r3
 8000a0c:	3540      	adds	r5, #64	; 0x40
 8000a0e:	782e      	ldrb	r6, [r5, #0]
 8000a10:	2e01      	cmp	r6, #1
 8000a12:	d013      	beq.n	8000a3c <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_I2C_DISABLE(hi2c);
 8000a14:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8000a16:	3022      	adds	r0, #34	; 0x22
 8000a18:	7020      	strb	r0, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 8000a1a:	681e      	ldr	r6, [r3, #0]
 8000a1c:	3823      	subs	r0, #35	; 0x23
 8000a1e:	4386      	bics	r6, r0
 8000a20:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000a22:	681e      	ldr	r6, [r3, #0]
 8000a24:	4f06      	ldr	r7, [pc, #24]	; (8000a40 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
 8000a26:	403e      	ands	r6, r7
 8000a28:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8000a2a:	681e      	ldr	r6, [r3, #0]
 8000a2c:	4331      	orrs	r1, r6
 8000a2e:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8000a30:	6819      	ldr	r1, [r3, #0]
 8000a32:	4308      	orrs	r0, r1
 8000a34:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8000a36:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000a38:	7022      	strb	r2, [r4, #0]
    __HAL_UNLOCK(hi2c);
 8000a3a:	7028      	strb	r0, [r5, #0]
  }
}
 8000a3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a3e:	46c0      	nop			; (mov r8, r8)
 8000a40:	ffffefff 	.word	0xffffefff

08000a44 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000a44:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000a46:	0005      	movs	r5, r0
 8000a48:	3541      	adds	r5, #65	; 0x41
 8000a4a:	782a      	ldrb	r2, [r5, #0]
{
 8000a4c:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000a4e:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8000a50:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000a52:	2a20      	cmp	r2, #32
 8000a54:	d117      	bne.n	8000a86 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 8000a56:	001c      	movs	r4, r3
 8000a58:	3440      	adds	r4, #64	; 0x40
 8000a5a:	7826      	ldrb	r6, [r4, #0]
 8000a5c:	2e01      	cmp	r6, #1
 8000a5e:	d012      	beq.n	8000a86 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_I2C_DISABLE(hi2c);
 8000a60:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8000a62:	3022      	adds	r0, #34	; 0x22
 8000a64:	7028      	strb	r0, [r5, #0]
    __HAL_I2C_DISABLE(hi2c);
 8000a66:	681e      	ldr	r6, [r3, #0]
 8000a68:	3823      	subs	r0, #35	; 0x23
 8000a6a:	4386      	bics	r6, r0
 8000a6c:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 8000a6e:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8000a70:	4f05      	ldr	r7, [pc, #20]	; (8000a88 <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    tmpreg |= DigitalFilter << 8U;
 8000a72:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 8000a74:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 8000a76:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 8000a78:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8000a7a:	6819      	ldr	r1, [r3, #0]
 8000a7c:	4308      	orrs	r0, r1
 8000a7e:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8000a80:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000a82:	702a      	strb	r2, [r5, #0]
    __HAL_UNLOCK(hi2c);
 8000a84:	7020      	strb	r0, [r4, #0]
  }
}
 8000a86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a88:	fffff0ff 	.word	0xfffff0ff

08000a8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a8e:	6803      	ldr	r3, [r0, #0]
{
 8000a90:	b085      	sub	sp, #20
 8000a92:	0005      	movs	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a94:	07db      	lsls	r3, r3, #31
 8000a96:	d433      	bmi.n	8000b00 <HAL_RCC_OscConfig+0x74>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000a98:	682b      	ldr	r3, [r5, #0]
 8000a9a:	079b      	lsls	r3, r3, #30
 8000a9c:	d500      	bpl.n	8000aa0 <HAL_RCC_OscConfig+0x14>
 8000a9e:	e08a      	b.n	8000bb6 <HAL_RCC_OscConfig+0x12a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000aa0:	682b      	ldr	r3, [r5, #0]
 8000aa2:	071b      	lsls	r3, r3, #28
 8000aa4:	d500      	bpl.n	8000aa8 <HAL_RCC_OscConfig+0x1c>
 8000aa6:	e0ca      	b.n	8000c3e <HAL_RCC_OscConfig+0x1b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000aa8:	682b      	ldr	r3, [r5, #0]
 8000aaa:	075b      	lsls	r3, r3, #29
 8000aac:	d500      	bpl.n	8000ab0 <HAL_RCC_OscConfig+0x24>
 8000aae:	e0ed      	b.n	8000c8c <HAL_RCC_OscConfig+0x200>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000ab0:	682b      	ldr	r3, [r5, #0]
 8000ab2:	06db      	lsls	r3, r3, #27
 8000ab4:	d51a      	bpl.n	8000aec <HAL_RCC_OscConfig+0x60>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000ab6:	696a      	ldr	r2, [r5, #20]
 8000ab8:	4cbc      	ldr	r4, [pc, #752]	; (8000dac <HAL_RCC_OscConfig+0x320>)
 8000aba:	2304      	movs	r3, #4
 8000abc:	2a01      	cmp	r2, #1
 8000abe:	d000      	beq.n	8000ac2 <HAL_RCC_OscConfig+0x36>
 8000ac0:	e159      	b.n	8000d76 <HAL_RCC_OscConfig+0x2ea>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000ac2:	6b61      	ldr	r1, [r4, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000ac4:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8000ac6:	430b      	orrs	r3, r1
 8000ac8:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8000aca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000acc:	431a      	orrs	r2, r3
 8000ace:	6362      	str	r2, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000ad0:	f7ff fbe4 	bl	800029c <HAL_GetTick>
 8000ad4:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000ad6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000ad8:	4233      	tst	r3, r6
 8000ada:	d100      	bne.n	8000ade <HAL_RCC_OscConfig+0x52>
 8000adc:	e144      	b.n	8000d68 <HAL_RCC_OscConfig+0x2dc>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000ade:	21f8      	movs	r1, #248	; 0xf8
 8000ae0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000ae2:	69ab      	ldr	r3, [r5, #24]
 8000ae4:	438a      	bics	r2, r1
 8000ae6:	00db      	lsls	r3, r3, #3
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	6363      	str	r3, [r4, #52]	; 0x34
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000aec:	682b      	ldr	r3, [r5, #0]
 8000aee:	069b      	lsls	r3, r3, #26
 8000af0:	d500      	bpl.n	8000af4 <HAL_RCC_OscConfig+0x68>
 8000af2:	e167      	b.n	8000dc4 <HAL_RCC_OscConfig+0x338>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000af4:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000af6:	2900      	cmp	r1, #0
 8000af8:	d000      	beq.n	8000afc <HAL_RCC_OscConfig+0x70>
 8000afa:	e1a4      	b.n	8000e46 <HAL_RCC_OscConfig+0x3ba>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000afc:	2000      	movs	r0, #0
 8000afe:	e018      	b.n	8000b32 <HAL_RCC_OscConfig+0xa6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000b00:	210c      	movs	r1, #12
 8000b02:	4caa      	ldr	r4, [pc, #680]	; (8000dac <HAL_RCC_OscConfig+0x320>)
 8000b04:	6862      	ldr	r2, [r4, #4]
 8000b06:	400a      	ands	r2, r1
 8000b08:	2a04      	cmp	r2, #4
 8000b0a:	d00b      	beq.n	8000b24 <HAL_RCC_OscConfig+0x98>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b0c:	6863      	ldr	r3, [r4, #4]
 8000b0e:	400b      	ands	r3, r1
 8000b10:	2b08      	cmp	r3, #8
 8000b12:	d110      	bne.n	8000b36 <HAL_RCC_OscConfig+0xaa>
 8000b14:	22c0      	movs	r2, #192	; 0xc0
 8000b16:	6863      	ldr	r3, [r4, #4]
 8000b18:	0252      	lsls	r2, r2, #9
 8000b1a:	4013      	ands	r3, r2
 8000b1c:	2280      	movs	r2, #128	; 0x80
 8000b1e:	0252      	lsls	r2, r2, #9
 8000b20:	4293      	cmp	r3, r2
 8000b22:	d108      	bne.n	8000b36 <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b24:	6823      	ldr	r3, [r4, #0]
 8000b26:	039b      	lsls	r3, r3, #14
 8000b28:	d5b6      	bpl.n	8000a98 <HAL_RCC_OscConfig+0xc>
 8000b2a:	686b      	ldr	r3, [r5, #4]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d1b3      	bne.n	8000a98 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000b30:	2001      	movs	r0, #1
}
 8000b32:	b005      	add	sp, #20
 8000b34:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b36:	686b      	ldr	r3, [r5, #4]
 8000b38:	2b01      	cmp	r3, #1
 8000b3a:	d113      	bne.n	8000b64 <HAL_RCC_OscConfig+0xd8>
 8000b3c:	2380      	movs	r3, #128	; 0x80
 8000b3e:	6822      	ldr	r2, [r4, #0]
 8000b40:	025b      	lsls	r3, r3, #9
 8000b42:	4313      	orrs	r3, r2
 8000b44:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000b46:	f7ff fba9 	bl	800029c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b4a:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8000b4c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b4e:	02b6      	lsls	r6, r6, #10
 8000b50:	6823      	ldr	r3, [r4, #0]
 8000b52:	4233      	tst	r3, r6
 8000b54:	d1a0      	bne.n	8000a98 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b56:	f7ff fba1 	bl	800029c <HAL_GetTick>
 8000b5a:	1bc0      	subs	r0, r0, r7
 8000b5c:	2864      	cmp	r0, #100	; 0x64
 8000b5e:	d9f7      	bls.n	8000b50 <HAL_RCC_OscConfig+0xc4>
            return HAL_TIMEOUT;
 8000b60:	2003      	movs	r0, #3
 8000b62:	e7e6      	b.n	8000b32 <HAL_RCC_OscConfig+0xa6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d116      	bne.n	8000b96 <HAL_RCC_OscConfig+0x10a>
 8000b68:	6823      	ldr	r3, [r4, #0]
 8000b6a:	4a91      	ldr	r2, [pc, #580]	; (8000db0 <HAL_RCC_OscConfig+0x324>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b6c:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b6e:	4013      	ands	r3, r2
 8000b70:	6023      	str	r3, [r4, #0]
 8000b72:	6823      	ldr	r3, [r4, #0]
 8000b74:	4a8f      	ldr	r2, [pc, #572]	; (8000db4 <HAL_RCC_OscConfig+0x328>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b76:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b78:	4013      	ands	r3, r2
 8000b7a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000b7c:	f7ff fb8e 	bl	800029c <HAL_GetTick>
 8000b80:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b82:	6823      	ldr	r3, [r4, #0]
 8000b84:	4233      	tst	r3, r6
 8000b86:	d100      	bne.n	8000b8a <HAL_RCC_OscConfig+0xfe>
 8000b88:	e786      	b.n	8000a98 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b8a:	f7ff fb87 	bl	800029c <HAL_GetTick>
 8000b8e:	1bc0      	subs	r0, r0, r7
 8000b90:	2864      	cmp	r0, #100	; 0x64
 8000b92:	d9f6      	bls.n	8000b82 <HAL_RCC_OscConfig+0xf6>
 8000b94:	e7e4      	b.n	8000b60 <HAL_RCC_OscConfig+0xd4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b96:	2b05      	cmp	r3, #5
 8000b98:	d105      	bne.n	8000ba6 <HAL_RCC_OscConfig+0x11a>
 8000b9a:	2380      	movs	r3, #128	; 0x80
 8000b9c:	6822      	ldr	r2, [r4, #0]
 8000b9e:	02db      	lsls	r3, r3, #11
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	6023      	str	r3, [r4, #0]
 8000ba4:	e7ca      	b.n	8000b3c <HAL_RCC_OscConfig+0xb0>
 8000ba6:	6823      	ldr	r3, [r4, #0]
 8000ba8:	4a81      	ldr	r2, [pc, #516]	; (8000db0 <HAL_RCC_OscConfig+0x324>)
 8000baa:	4013      	ands	r3, r2
 8000bac:	6023      	str	r3, [r4, #0]
 8000bae:	6823      	ldr	r3, [r4, #0]
 8000bb0:	4a80      	ldr	r2, [pc, #512]	; (8000db4 <HAL_RCC_OscConfig+0x328>)
 8000bb2:	4013      	ands	r3, r2
 8000bb4:	e7c6      	b.n	8000b44 <HAL_RCC_OscConfig+0xb8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000bb6:	220c      	movs	r2, #12
 8000bb8:	4c7c      	ldr	r4, [pc, #496]	; (8000dac <HAL_RCC_OscConfig+0x320>)
 8000bba:	6863      	ldr	r3, [r4, #4]
 8000bbc:	4213      	tst	r3, r2
 8000bbe:	d00b      	beq.n	8000bd8 <HAL_RCC_OscConfig+0x14c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000bc0:	6863      	ldr	r3, [r4, #4]
 8000bc2:	4013      	ands	r3, r2
 8000bc4:	2b08      	cmp	r3, #8
 8000bc6:	d115      	bne.n	8000bf4 <HAL_RCC_OscConfig+0x168>
 8000bc8:	22c0      	movs	r2, #192	; 0xc0
 8000bca:	6863      	ldr	r3, [r4, #4]
 8000bcc:	0252      	lsls	r2, r2, #9
 8000bce:	4013      	ands	r3, r2
 8000bd0:	2280      	movs	r2, #128	; 0x80
 8000bd2:	0212      	lsls	r2, r2, #8
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	d10d      	bne.n	8000bf4 <HAL_RCC_OscConfig+0x168>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000bd8:	6823      	ldr	r3, [r4, #0]
 8000bda:	079b      	lsls	r3, r3, #30
 8000bdc:	d502      	bpl.n	8000be4 <HAL_RCC_OscConfig+0x158>
 8000bde:	68eb      	ldr	r3, [r5, #12]
 8000be0:	2b01      	cmp	r3, #1
 8000be2:	d1a5      	bne.n	8000b30 <HAL_RCC_OscConfig+0xa4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000be4:	21f8      	movs	r1, #248	; 0xf8
 8000be6:	6822      	ldr	r2, [r4, #0]
 8000be8:	692b      	ldr	r3, [r5, #16]
 8000bea:	438a      	bics	r2, r1
 8000bec:	00db      	lsls	r3, r3, #3
 8000bee:	4313      	orrs	r3, r2
 8000bf0:	6023      	str	r3, [r4, #0]
 8000bf2:	e755      	b.n	8000aa0 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000bf4:	68ea      	ldr	r2, [r5, #12]
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	2a00      	cmp	r2, #0
 8000bfa:	d00f      	beq.n	8000c1c <HAL_RCC_OscConfig+0x190>
        __HAL_RCC_HSI_ENABLE();
 8000bfc:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bfe:	2602      	movs	r6, #2
        __HAL_RCC_HSI_ENABLE();
 8000c00:	4313      	orrs	r3, r2
 8000c02:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000c04:	f7ff fb4a 	bl	800029c <HAL_GetTick>
 8000c08:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c0a:	6823      	ldr	r3, [r4, #0]
 8000c0c:	4233      	tst	r3, r6
 8000c0e:	d1e9      	bne.n	8000be4 <HAL_RCC_OscConfig+0x158>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c10:	f7ff fb44 	bl	800029c <HAL_GetTick>
 8000c14:	1bc0      	subs	r0, r0, r7
 8000c16:	2802      	cmp	r0, #2
 8000c18:	d9f7      	bls.n	8000c0a <HAL_RCC_OscConfig+0x17e>
 8000c1a:	e7a1      	b.n	8000b60 <HAL_RCC_OscConfig+0xd4>
        __HAL_RCC_HSI_DISABLE();
 8000c1c:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c1e:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 8000c20:	439a      	bics	r2, r3
 8000c22:	6022      	str	r2, [r4, #0]
        tickstart = HAL_GetTick();
 8000c24:	f7ff fb3a 	bl	800029c <HAL_GetTick>
 8000c28:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c2a:	6823      	ldr	r3, [r4, #0]
 8000c2c:	4233      	tst	r3, r6
 8000c2e:	d100      	bne.n	8000c32 <HAL_RCC_OscConfig+0x1a6>
 8000c30:	e736      	b.n	8000aa0 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c32:	f7ff fb33 	bl	800029c <HAL_GetTick>
 8000c36:	1bc0      	subs	r0, r0, r7
 8000c38:	2802      	cmp	r0, #2
 8000c3a:	d9f6      	bls.n	8000c2a <HAL_RCC_OscConfig+0x19e>
 8000c3c:	e790      	b.n	8000b60 <HAL_RCC_OscConfig+0xd4>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000c3e:	69ea      	ldr	r2, [r5, #28]
 8000c40:	2301      	movs	r3, #1
 8000c42:	4c5a      	ldr	r4, [pc, #360]	; (8000dac <HAL_RCC_OscConfig+0x320>)
 8000c44:	2a00      	cmp	r2, #0
 8000c46:	d010      	beq.n	8000c6a <HAL_RCC_OscConfig+0x1de>
      __HAL_RCC_LSI_ENABLE();
 8000c48:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c4a:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	6263      	str	r3, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000c50:	f7ff fb24 	bl	800029c <HAL_GetTick>
 8000c54:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000c58:	4233      	tst	r3, r6
 8000c5a:	d000      	beq.n	8000c5e <HAL_RCC_OscConfig+0x1d2>
 8000c5c:	e724      	b.n	8000aa8 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c5e:	f7ff fb1d 	bl	800029c <HAL_GetTick>
 8000c62:	1bc0      	subs	r0, r0, r7
 8000c64:	2802      	cmp	r0, #2
 8000c66:	d9f6      	bls.n	8000c56 <HAL_RCC_OscConfig+0x1ca>
 8000c68:	e77a      	b.n	8000b60 <HAL_RCC_OscConfig+0xd4>
      __HAL_RCC_LSI_DISABLE();
 8000c6a:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c6c:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 8000c6e:	439a      	bics	r2, r3
 8000c70:	6262      	str	r2, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000c72:	f7ff fb13 	bl	800029c <HAL_GetTick>
 8000c76:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000c7a:	4233      	tst	r3, r6
 8000c7c:	d100      	bne.n	8000c80 <HAL_RCC_OscConfig+0x1f4>
 8000c7e:	e713      	b.n	8000aa8 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c80:	f7ff fb0c 	bl	800029c <HAL_GetTick>
 8000c84:	1bc0      	subs	r0, r0, r7
 8000c86:	2802      	cmp	r0, #2
 8000c88:	d9f6      	bls.n	8000c78 <HAL_RCC_OscConfig+0x1ec>
 8000c8a:	e769      	b.n	8000b60 <HAL_RCC_OscConfig+0xd4>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c8c:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000c8e:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c90:	4c46      	ldr	r4, [pc, #280]	; (8000dac <HAL_RCC_OscConfig+0x320>)
 8000c92:	0552      	lsls	r2, r2, #21
 8000c94:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 8000c96:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c98:	4213      	tst	r3, r2
 8000c9a:	d108      	bne.n	8000cae <HAL_RCC_OscConfig+0x222>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c9c:	69e3      	ldr	r3, [r4, #28]
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	61e3      	str	r3, [r4, #28]
 8000ca2:	69e3      	ldr	r3, [r4, #28]
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	9303      	str	r3, [sp, #12]
 8000ca8:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8000caa:	2301      	movs	r3, #1
 8000cac:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cae:	2780      	movs	r7, #128	; 0x80
 8000cb0:	4e41      	ldr	r6, [pc, #260]	; (8000db8 <HAL_RCC_OscConfig+0x32c>)
 8000cb2:	007f      	lsls	r7, r7, #1
 8000cb4:	6833      	ldr	r3, [r6, #0]
 8000cb6:	423b      	tst	r3, r7
 8000cb8:	d006      	beq.n	8000cc8 <HAL_RCC_OscConfig+0x23c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000cba:	68ab      	ldr	r3, [r5, #8]
 8000cbc:	2b01      	cmp	r3, #1
 8000cbe:	d113      	bne.n	8000ce8 <HAL_RCC_OscConfig+0x25c>
 8000cc0:	6a22      	ldr	r2, [r4, #32]
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	6223      	str	r3, [r4, #32]
 8000cc6:	e030      	b.n	8000d2a <HAL_RCC_OscConfig+0x29e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000cc8:	6833      	ldr	r3, [r6, #0]
 8000cca:	433b      	orrs	r3, r7
 8000ccc:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000cce:	f7ff fae5 	bl	800029c <HAL_GetTick>
 8000cd2:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cd4:	6833      	ldr	r3, [r6, #0]
 8000cd6:	423b      	tst	r3, r7
 8000cd8:	d1ef      	bne.n	8000cba <HAL_RCC_OscConfig+0x22e>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000cda:	f7ff fadf 	bl	800029c <HAL_GetTick>
 8000cde:	9b01      	ldr	r3, [sp, #4]
 8000ce0:	1ac0      	subs	r0, r0, r3
 8000ce2:	2864      	cmp	r0, #100	; 0x64
 8000ce4:	d9f6      	bls.n	8000cd4 <HAL_RCC_OscConfig+0x248>
 8000ce6:	e73b      	b.n	8000b60 <HAL_RCC_OscConfig+0xd4>
 8000ce8:	2201      	movs	r2, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d114      	bne.n	8000d18 <HAL_RCC_OscConfig+0x28c>
 8000cee:	6a23      	ldr	r3, [r4, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000cf0:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000cf2:	4393      	bics	r3, r2
 8000cf4:	6223      	str	r3, [r4, #32]
 8000cf6:	6a23      	ldr	r3, [r4, #32]
 8000cf8:	3203      	adds	r2, #3
 8000cfa:	4393      	bics	r3, r2
 8000cfc:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000cfe:	f7ff facd 	bl	800029c <HAL_GetTick>
 8000d02:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d04:	6a23      	ldr	r3, [r4, #32]
 8000d06:	423b      	tst	r3, r7
 8000d08:	d025      	beq.n	8000d56 <HAL_RCC_OscConfig+0x2ca>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d0a:	f7ff fac7 	bl	800029c <HAL_GetTick>
 8000d0e:	4b2b      	ldr	r3, [pc, #172]	; (8000dbc <HAL_RCC_OscConfig+0x330>)
 8000d10:	1b80      	subs	r0, r0, r6
 8000d12:	4298      	cmp	r0, r3
 8000d14:	d9f6      	bls.n	8000d04 <HAL_RCC_OscConfig+0x278>
 8000d16:	e723      	b.n	8000b60 <HAL_RCC_OscConfig+0xd4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d18:	2b05      	cmp	r3, #5
 8000d1a:	d10b      	bne.n	8000d34 <HAL_RCC_OscConfig+0x2a8>
 8000d1c:	6a21      	ldr	r1, [r4, #32]
 8000d1e:	3b01      	subs	r3, #1
 8000d20:	430b      	orrs	r3, r1
 8000d22:	6223      	str	r3, [r4, #32]
 8000d24:	6a23      	ldr	r3, [r4, #32]
 8000d26:	431a      	orrs	r2, r3
 8000d28:	6222      	str	r2, [r4, #32]
      tickstart = HAL_GetTick();
 8000d2a:	f7ff fab7 	bl	800029c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d2e:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 8000d30:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d32:	e00d      	b.n	8000d50 <HAL_RCC_OscConfig+0x2c4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d34:	6a23      	ldr	r3, [r4, #32]
 8000d36:	4393      	bics	r3, r2
 8000d38:	2204      	movs	r2, #4
 8000d3a:	6223      	str	r3, [r4, #32]
 8000d3c:	6a23      	ldr	r3, [r4, #32]
 8000d3e:	4393      	bics	r3, r2
 8000d40:	e7c0      	b.n	8000cc4 <HAL_RCC_OscConfig+0x238>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d42:	f7ff faab 	bl	800029c <HAL_GetTick>
 8000d46:	4b1d      	ldr	r3, [pc, #116]	; (8000dbc <HAL_RCC_OscConfig+0x330>)
 8000d48:	1b80      	subs	r0, r0, r6
 8000d4a:	4298      	cmp	r0, r3
 8000d4c:	d900      	bls.n	8000d50 <HAL_RCC_OscConfig+0x2c4>
 8000d4e:	e707      	b.n	8000b60 <HAL_RCC_OscConfig+0xd4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d50:	6a23      	ldr	r3, [r4, #32]
 8000d52:	423b      	tst	r3, r7
 8000d54:	d0f5      	beq.n	8000d42 <HAL_RCC_OscConfig+0x2b6>
    if(pwrclkchanged == SET)
 8000d56:	9b00      	ldr	r3, [sp, #0]
 8000d58:	2b01      	cmp	r3, #1
 8000d5a:	d000      	beq.n	8000d5e <HAL_RCC_OscConfig+0x2d2>
 8000d5c:	e6a8      	b.n	8000ab0 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000d5e:	69e3      	ldr	r3, [r4, #28]
 8000d60:	4a17      	ldr	r2, [pc, #92]	; (8000dc0 <HAL_RCC_OscConfig+0x334>)
 8000d62:	4013      	ands	r3, r2
 8000d64:	61e3      	str	r3, [r4, #28]
 8000d66:	e6a3      	b.n	8000ab0 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000d68:	f7ff fa98 	bl	800029c <HAL_GetTick>
 8000d6c:	1bc0      	subs	r0, r0, r7
 8000d6e:	2802      	cmp	r0, #2
 8000d70:	d800      	bhi.n	8000d74 <HAL_RCC_OscConfig+0x2e8>
 8000d72:	e6b0      	b.n	8000ad6 <HAL_RCC_OscConfig+0x4a>
 8000d74:	e6f4      	b.n	8000b60 <HAL_RCC_OscConfig+0xd4>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000d76:	3205      	adds	r2, #5
 8000d78:	d103      	bne.n	8000d82 <HAL_RCC_OscConfig+0x2f6>
      __HAL_RCC_HSI14ADC_ENABLE();
 8000d7a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000d7c:	439a      	bics	r2, r3
 8000d7e:	6362      	str	r2, [r4, #52]	; 0x34
 8000d80:	e6ad      	b.n	8000ade <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSI14ADC_DISABLE();
 8000d82:	6b62      	ldr	r2, [r4, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000d84:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8000d86:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 8000d88:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 8000d8a:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8000d8c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000d8e:	4393      	bics	r3, r2
 8000d90:	6363      	str	r3, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000d92:	f7ff fa83 	bl	800029c <HAL_GetTick>
 8000d96:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000d98:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000d9a:	4233      	tst	r3, r6
 8000d9c:	d100      	bne.n	8000da0 <HAL_RCC_OscConfig+0x314>
 8000d9e:	e6a5      	b.n	8000aec <HAL_RCC_OscConfig+0x60>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000da0:	f7ff fa7c 	bl	800029c <HAL_GetTick>
 8000da4:	1bc0      	subs	r0, r0, r7
 8000da6:	2802      	cmp	r0, #2
 8000da8:	d9f6      	bls.n	8000d98 <HAL_RCC_OscConfig+0x30c>
 8000daa:	e6d9      	b.n	8000b60 <HAL_RCC_OscConfig+0xd4>
 8000dac:	40021000 	.word	0x40021000
 8000db0:	fffeffff 	.word	0xfffeffff
 8000db4:	fffbffff 	.word	0xfffbffff
 8000db8:	40007000 	.word	0x40007000
 8000dbc:	00001388 	.word	0x00001388
 8000dc0:	efffffff 	.word	0xefffffff
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8000dc4:	210c      	movs	r1, #12
 8000dc6:	4c46      	ldr	r4, [pc, #280]	; (8000ee0 <HAL_RCC_OscConfig+0x454>)
 8000dc8:	6862      	ldr	r2, [r4, #4]
 8000dca:	400a      	ands	r2, r1
 8000dcc:	428a      	cmp	r2, r1
 8000dce:	d009      	beq.n	8000de4 <HAL_RCC_OscConfig+0x358>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8000dd0:	6863      	ldr	r3, [r4, #4]
 8000dd2:	400b      	ands	r3, r1
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8000dd4:	2b08      	cmp	r3, #8
 8000dd6:	d10e      	bne.n	8000df6 <HAL_RCC_OscConfig+0x36a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8000dd8:	22c0      	movs	r2, #192	; 0xc0
 8000dda:	6863      	ldr	r3, [r4, #4]
 8000ddc:	0252      	lsls	r2, r2, #9
 8000dde:	4013      	ands	r3, r2
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d108      	bne.n	8000df6 <HAL_RCC_OscConfig+0x36a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8000de4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000de6:	03db      	lsls	r3, r3, #15
 8000de8:	d400      	bmi.n	8000dec <HAL_RCC_OscConfig+0x360>
 8000dea:	e683      	b.n	8000af4 <HAL_RCC_OscConfig+0x68>
 8000dec:	6a2b      	ldr	r3, [r5, #32]
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	d000      	beq.n	8000df4 <HAL_RCC_OscConfig+0x368>
 8000df2:	e69d      	b.n	8000b30 <HAL_RCC_OscConfig+0xa4>
 8000df4:	e67e      	b.n	8000af4 <HAL_RCC_OscConfig+0x68>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000df6:	6a2b      	ldr	r3, [r5, #32]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d011      	beq.n	8000e20 <HAL_RCC_OscConfig+0x394>
        __HAL_RCC_HSI48_ENABLE();
 8000dfc:	2680      	movs	r6, #128	; 0x80
 8000dfe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000e00:	0276      	lsls	r6, r6, #9
 8000e02:	4333      	orrs	r3, r6
 8000e04:	6363      	str	r3, [r4, #52]	; 0x34
        tickstart = HAL_GetTick();
 8000e06:	f7ff fa49 	bl	800029c <HAL_GetTick>
 8000e0a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8000e0c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000e0e:	4233      	tst	r3, r6
 8000e10:	d000      	beq.n	8000e14 <HAL_RCC_OscConfig+0x388>
 8000e12:	e66f      	b.n	8000af4 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000e14:	f7ff fa42 	bl	800029c <HAL_GetTick>
 8000e18:	1bc0      	subs	r0, r0, r7
 8000e1a:	2802      	cmp	r0, #2
 8000e1c:	d9f6      	bls.n	8000e0c <HAL_RCC_OscConfig+0x380>
 8000e1e:	e69f      	b.n	8000b60 <HAL_RCC_OscConfig+0xd4>
        __HAL_RCC_HSI48_DISABLE();
 8000e20:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000e22:	4a30      	ldr	r2, [pc, #192]	; (8000ee4 <HAL_RCC_OscConfig+0x458>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8000e24:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_HSI48_DISABLE();
 8000e26:	4013      	ands	r3, r2
 8000e28:	6363      	str	r3, [r4, #52]	; 0x34
        tickstart = HAL_GetTick();
 8000e2a:	f7ff fa37 	bl	800029c <HAL_GetTick>
 8000e2e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8000e30:	0276      	lsls	r6, r6, #9
 8000e32:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000e34:	4233      	tst	r3, r6
 8000e36:	d100      	bne.n	8000e3a <HAL_RCC_OscConfig+0x3ae>
 8000e38:	e65c      	b.n	8000af4 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000e3a:	f7ff fa2f 	bl	800029c <HAL_GetTick>
 8000e3e:	1bc0      	subs	r0, r0, r7
 8000e40:	2802      	cmp	r0, #2
 8000e42:	d9f6      	bls.n	8000e32 <HAL_RCC_OscConfig+0x3a6>
 8000e44:	e68c      	b.n	8000b60 <HAL_RCC_OscConfig+0xd4>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e46:	220c      	movs	r2, #12
 8000e48:	4c25      	ldr	r4, [pc, #148]	; (8000ee0 <HAL_RCC_OscConfig+0x454>)
 8000e4a:	6863      	ldr	r3, [r4, #4]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	2b08      	cmp	r3, #8
 8000e50:	d100      	bne.n	8000e54 <HAL_RCC_OscConfig+0x3c8>
 8000e52:	e66d      	b.n	8000b30 <HAL_RCC_OscConfig+0xa4>
        __HAL_RCC_PLL_DISABLE();
 8000e54:	6823      	ldr	r3, [r4, #0]
 8000e56:	4a24      	ldr	r2, [pc, #144]	; (8000ee8 <HAL_RCC_OscConfig+0x45c>)
 8000e58:	4013      	ands	r3, r2
 8000e5a:	6023      	str	r3, [r4, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e5c:	2902      	cmp	r1, #2
 8000e5e:	d12f      	bne.n	8000ec0 <HAL_RCC_OscConfig+0x434>
        tickstart = HAL_GetTick();
 8000e60:	f7ff fa1c 	bl	800029c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e64:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8000e66:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e68:	04b6      	lsls	r6, r6, #18
 8000e6a:	6823      	ldr	r3, [r4, #0]
 8000e6c:	4233      	tst	r3, r6
 8000e6e:	d121      	bne.n	8000eb4 <HAL_RCC_OscConfig+0x428>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000e70:	220f      	movs	r2, #15
 8000e72:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000e74:	4393      	bics	r3, r2
 8000e76:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000e7c:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8000e7e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000e80:	6862      	ldr	r2, [r4, #4]
 8000e82:	430b      	orrs	r3, r1
 8000e84:	4919      	ldr	r1, [pc, #100]	; (8000eec <HAL_RCC_OscConfig+0x460>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000e86:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000e88:	400a      	ands	r2, r1
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000e8e:	2380      	movs	r3, #128	; 0x80
 8000e90:	6822      	ldr	r2, [r4, #0]
 8000e92:	045b      	lsls	r3, r3, #17
 8000e94:	4313      	orrs	r3, r2
 8000e96:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000e98:	f7ff fa00 	bl	800029c <HAL_GetTick>
 8000e9c:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000e9e:	04ad      	lsls	r5, r5, #18
 8000ea0:	6823      	ldr	r3, [r4, #0]
 8000ea2:	422b      	tst	r3, r5
 8000ea4:	d000      	beq.n	8000ea8 <HAL_RCC_OscConfig+0x41c>
 8000ea6:	e629      	b.n	8000afc <HAL_RCC_OscConfig+0x70>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ea8:	f7ff f9f8 	bl	800029c <HAL_GetTick>
 8000eac:	1b80      	subs	r0, r0, r6
 8000eae:	2802      	cmp	r0, #2
 8000eb0:	d9f6      	bls.n	8000ea0 <HAL_RCC_OscConfig+0x414>
 8000eb2:	e655      	b.n	8000b60 <HAL_RCC_OscConfig+0xd4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000eb4:	f7ff f9f2 	bl	800029c <HAL_GetTick>
 8000eb8:	1bc0      	subs	r0, r0, r7
 8000eba:	2802      	cmp	r0, #2
 8000ebc:	d9d5      	bls.n	8000e6a <HAL_RCC_OscConfig+0x3de>
 8000ebe:	e64f      	b.n	8000b60 <HAL_RCC_OscConfig+0xd4>
        tickstart = HAL_GetTick();
 8000ec0:	f7ff f9ec 	bl	800029c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ec4:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 8000ec6:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ec8:	04ad      	lsls	r5, r5, #18
 8000eca:	6823      	ldr	r3, [r4, #0]
 8000ecc:	422b      	tst	r3, r5
 8000ece:	d100      	bne.n	8000ed2 <HAL_RCC_OscConfig+0x446>
 8000ed0:	e614      	b.n	8000afc <HAL_RCC_OscConfig+0x70>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ed2:	f7ff f9e3 	bl	800029c <HAL_GetTick>
 8000ed6:	1b80      	subs	r0, r0, r6
 8000ed8:	2802      	cmp	r0, #2
 8000eda:	d9f6      	bls.n	8000eca <HAL_RCC_OscConfig+0x43e>
 8000edc:	e640      	b.n	8000b60 <HAL_RCC_OscConfig+0xd4>
 8000ede:	46c0      	nop			; (mov r8, r8)
 8000ee0:	40021000 	.word	0x40021000
 8000ee4:	fffeffff 	.word	0xfffeffff
 8000ee8:	feffffff 	.word	0xfeffffff
 8000eec:	ffc27fff 	.word	0xffc27fff

08000ef0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000ef0:	b570      	push	{r4, r5, r6, lr}
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8000ef2:	4c19      	ldr	r4, [pc, #100]	; (8000f58 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8000ef4:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8000ef6:	2210      	movs	r2, #16
 8000ef8:	0021      	movs	r1, r4
 8000efa:	4668      	mov	r0, sp
 8000efc:	f001 fe6a 	bl	8002bd4 <memcpy>
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8000f00:	0021      	movs	r1, r4
 8000f02:	ad04      	add	r5, sp, #16
 8000f04:	2210      	movs	r2, #16
 8000f06:	3110      	adds	r1, #16
 8000f08:	0028      	movs	r0, r5
 8000f0a:	f001 fe63 	bl	8002bd4 <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000f0e:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8000f10:	4e12      	ldr	r6, [pc, #72]	; (8000f5c <HAL_RCC_GetSysClockFreq+0x6c>)
 8000f12:	6873      	ldr	r3, [r6, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000f14:	401a      	ands	r2, r3
 8000f16:	2a08      	cmp	r2, #8
 8000f18:	d004      	beq.n	8000f24 <HAL_RCC_GetSysClockFreq+0x34>
 8000f1a:	2a0c      	cmp	r2, #12
 8000f1c:	d11a      	bne.n	8000f54 <HAL_RCC_GetSysClockFreq+0x64>
      break;
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8000f1e:	4810      	ldr	r0, [pc, #64]	; (8000f60 <HAL_RCC_GetSysClockFreq+0x70>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000f20:	b008      	add	sp, #32
 8000f22:	bd70      	pop	{r4, r5, r6, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8000f24:	200f      	movs	r0, #15
 8000f26:	466a      	mov	r2, sp
 8000f28:	0c99      	lsrs	r1, r3, #18
 8000f2a:	4001      	ands	r1, r0
 8000f2c:	5c54      	ldrb	r4, [r2, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8000f2e:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8000f30:	4002      	ands	r2, r0
 8000f32:	5ca9      	ldrb	r1, [r5, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8000f34:	22c0      	movs	r2, #192	; 0xc0
 8000f36:	2080      	movs	r0, #128	; 0x80
 8000f38:	0252      	lsls	r2, r2, #9
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	0240      	lsls	r0, r0, #9
 8000f3e:	4283      	cmp	r3, r0
 8000f40:	d101      	bne.n	8000f46 <HAL_RCC_GetSysClockFreq+0x56>
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8000f42:	4808      	ldr	r0, [pc, #32]	; (8000f64 <HAL_RCC_GetSysClockFreq+0x74>)
 8000f44:	e002      	b.n	8000f4c <HAL_RCC_GetSysClockFreq+0x5c>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d1fb      	bne.n	8000f42 <HAL_RCC_GetSysClockFreq+0x52>
        pllclk = (HSI48_VALUE / prediv) * pllmul;
 8000f4a:	4805      	ldr	r0, [pc, #20]	; (8000f60 <HAL_RCC_GetSysClockFreq+0x70>)
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8000f4c:	f7ff f8f0 	bl	8000130 <__udivsi3>
 8000f50:	4360      	muls	r0, r4
 8000f52:	e7e5      	b.n	8000f20 <HAL_RCC_GetSysClockFreq+0x30>
      sysclockfreq = HSE_VALUE;
 8000f54:	4803      	ldr	r0, [pc, #12]	; (8000f64 <HAL_RCC_GetSysClockFreq+0x74>)
  return sysclockfreq;
 8000f56:	e7e3      	b.n	8000f20 <HAL_RCC_GetSysClockFreq+0x30>
 8000f58:	08002c10 	.word	0x08002c10
 8000f5c:	40021000 	.word	0x40021000
 8000f60:	02dc6c00 	.word	0x02dc6c00
 8000f64:	007a1200 	.word	0x007a1200

08000f68 <HAL_RCC_ClockConfig>:
{
 8000f68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	4c4f      	ldr	r4, [pc, #316]	; (80010ac <HAL_RCC_ClockConfig+0x144>)
{
 8000f6e:	0006      	movs	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000f70:	6823      	ldr	r3, [r4, #0]
{
 8000f72:	9101      	str	r1, [sp, #4]
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000f74:	4013      	ands	r3, r2
 8000f76:	428b      	cmp	r3, r1
 8000f78:	d31f      	bcc.n	8000fba <HAL_RCC_ClockConfig+0x52>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f7a:	6832      	ldr	r2, [r6, #0]
 8000f7c:	0793      	lsls	r3, r2, #30
 8000f7e:	d428      	bmi.n	8000fd2 <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000f80:	07d3      	lsls	r3, r2, #31
 8000f82:	d42e      	bmi.n	8000fe2 <HAL_RCC_ClockConfig+0x7a>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000f84:	2301      	movs	r3, #1
 8000f86:	6822      	ldr	r2, [r4, #0]
 8000f88:	9901      	ldr	r1, [sp, #4]
 8000f8a:	401a      	ands	r2, r3
 8000f8c:	4291      	cmp	r1, r2
 8000f8e:	d200      	bcs.n	8000f92 <HAL_RCC_ClockConfig+0x2a>
 8000f90:	e07e      	b.n	8001090 <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f92:	6833      	ldr	r3, [r6, #0]
 8000f94:	4c46      	ldr	r4, [pc, #280]	; (80010b0 <HAL_RCC_ClockConfig+0x148>)
 8000f96:	075b      	lsls	r3, r3, #29
 8000f98:	d500      	bpl.n	8000f9c <HAL_RCC_ClockConfig+0x34>
 8000f9a:	e080      	b.n	800109e <HAL_RCC_ClockConfig+0x136>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000f9c:	f7ff ffa8 	bl	8000ef0 <HAL_RCC_GetSysClockFreq>
 8000fa0:	6863      	ldr	r3, [r4, #4]
 8000fa2:	4a44      	ldr	r2, [pc, #272]	; (80010b4 <HAL_RCC_ClockConfig+0x14c>)
 8000fa4:	061b      	lsls	r3, r3, #24
 8000fa6:	0f1b      	lsrs	r3, r3, #28
 8000fa8:	5cd3      	ldrb	r3, [r2, r3]
 8000faa:	40d8      	lsrs	r0, r3
 8000fac:	4b42      	ldr	r3, [pc, #264]	; (80010b8 <HAL_RCC_ClockConfig+0x150>)
 8000fae:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000fb0:	2000      	movs	r0, #0
 8000fb2:	f7ff f949 	bl	8000248 <HAL_InitTick>
  return HAL_OK;
 8000fb6:	2000      	movs	r0, #0
 8000fb8:	e00a      	b.n	8000fd0 <HAL_RCC_ClockConfig+0x68>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fba:	6823      	ldr	r3, [r4, #0]
 8000fbc:	9901      	ldr	r1, [sp, #4]
 8000fbe:	4393      	bics	r3, r2
 8000fc0:	430b      	orrs	r3, r1
 8000fc2:	6023      	str	r3, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000fc4:	6823      	ldr	r3, [r4, #0]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	9a01      	ldr	r2, [sp, #4]
 8000fca:	429a      	cmp	r2, r3
 8000fcc:	d0d5      	beq.n	8000f7a <HAL_RCC_ClockConfig+0x12>
      return HAL_ERROR;
 8000fce:	2001      	movs	r0, #1
}
 8000fd0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000fd2:	20f0      	movs	r0, #240	; 0xf0
 8000fd4:	4936      	ldr	r1, [pc, #216]	; (80010b0 <HAL_RCC_ClockConfig+0x148>)
 8000fd6:	684b      	ldr	r3, [r1, #4]
 8000fd8:	4383      	bics	r3, r0
 8000fda:	68b0      	ldr	r0, [r6, #8]
 8000fdc:	4303      	orrs	r3, r0
 8000fde:	604b      	str	r3, [r1, #4]
 8000fe0:	e7ce      	b.n	8000f80 <HAL_RCC_ClockConfig+0x18>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fe2:	6872      	ldr	r2, [r6, #4]
 8000fe4:	4d32      	ldr	r5, [pc, #200]	; (80010b0 <HAL_RCC_ClockConfig+0x148>)
 8000fe6:	2a01      	cmp	r2, #1
 8000fe8:	d11a      	bne.n	8001020 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fea:	682b      	ldr	r3, [r5, #0]
 8000fec:	039b      	lsls	r3, r3, #14
 8000fee:	d5ee      	bpl.n	8000fce <HAL_RCC_ClockConfig+0x66>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000ff0:	2103      	movs	r1, #3
 8000ff2:	686b      	ldr	r3, [r5, #4]
 8000ff4:	438b      	bics	r3, r1
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	606b      	str	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8000ffa:	f7ff f94f 	bl	800029c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ffe:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001000:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001002:	2b01      	cmp	r3, #1
 8001004:	d11c      	bne.n	8001040 <HAL_RCC_ClockConfig+0xd8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001006:	220c      	movs	r2, #12
 8001008:	686b      	ldr	r3, [r5, #4]
 800100a:	4013      	ands	r3, r2
 800100c:	2b04      	cmp	r3, #4
 800100e:	d0b9      	beq.n	8000f84 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001010:	f7ff f944 	bl	800029c <HAL_GetTick>
 8001014:	4b29      	ldr	r3, [pc, #164]	; (80010bc <HAL_RCC_ClockConfig+0x154>)
 8001016:	1bc0      	subs	r0, r0, r7
 8001018:	4298      	cmp	r0, r3
 800101a:	d9f4      	bls.n	8001006 <HAL_RCC_ClockConfig+0x9e>
          return HAL_TIMEOUT;
 800101c:	2003      	movs	r0, #3
 800101e:	e7d7      	b.n	8000fd0 <HAL_RCC_ClockConfig+0x68>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001020:	2a02      	cmp	r2, #2
 8001022:	d103      	bne.n	800102c <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001024:	682b      	ldr	r3, [r5, #0]
 8001026:	019b      	lsls	r3, r3, #6
 8001028:	d4e2      	bmi.n	8000ff0 <HAL_RCC_ClockConfig+0x88>
 800102a:	e7d0      	b.n	8000fce <HAL_RCC_ClockConfig+0x66>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800102c:	2a03      	cmp	r2, #3
 800102e:	d103      	bne.n	8001038 <HAL_RCC_ClockConfig+0xd0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001030:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001032:	03db      	lsls	r3, r3, #15
 8001034:	d4dc      	bmi.n	8000ff0 <HAL_RCC_ClockConfig+0x88>
 8001036:	e7ca      	b.n	8000fce <HAL_RCC_ClockConfig+0x66>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001038:	682b      	ldr	r3, [r5, #0]
 800103a:	079b      	lsls	r3, r3, #30
 800103c:	d4d8      	bmi.n	8000ff0 <HAL_RCC_ClockConfig+0x88>
 800103e:	e7c6      	b.n	8000fce <HAL_RCC_ClockConfig+0x66>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001040:	2b02      	cmp	r3, #2
 8001042:	d10b      	bne.n	800105c <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001044:	220c      	movs	r2, #12
 8001046:	686b      	ldr	r3, [r5, #4]
 8001048:	4013      	ands	r3, r2
 800104a:	2b08      	cmp	r3, #8
 800104c:	d09a      	beq.n	8000f84 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800104e:	f7ff f925 	bl	800029c <HAL_GetTick>
 8001052:	4b1a      	ldr	r3, [pc, #104]	; (80010bc <HAL_RCC_ClockConfig+0x154>)
 8001054:	1bc0      	subs	r0, r0, r7
 8001056:	4298      	cmp	r0, r3
 8001058:	d9f4      	bls.n	8001044 <HAL_RCC_ClockConfig+0xdc>
 800105a:	e7df      	b.n	800101c <HAL_RCC_ClockConfig+0xb4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800105c:	2b03      	cmp	r3, #3
 800105e:	d011      	beq.n	8001084 <HAL_RCC_ClockConfig+0x11c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001060:	220c      	movs	r2, #12
 8001062:	686b      	ldr	r3, [r5, #4]
 8001064:	4213      	tst	r3, r2
 8001066:	d100      	bne.n	800106a <HAL_RCC_ClockConfig+0x102>
 8001068:	e78c      	b.n	8000f84 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800106a:	f7ff f917 	bl	800029c <HAL_GetTick>
 800106e:	4b13      	ldr	r3, [pc, #76]	; (80010bc <HAL_RCC_ClockConfig+0x154>)
 8001070:	1bc0      	subs	r0, r0, r7
 8001072:	4298      	cmp	r0, r3
 8001074:	d9f4      	bls.n	8001060 <HAL_RCC_ClockConfig+0xf8>
 8001076:	e7d1      	b.n	800101c <HAL_RCC_ClockConfig+0xb4>
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001078:	f7ff f910 	bl	800029c <HAL_GetTick>
 800107c:	4b0f      	ldr	r3, [pc, #60]	; (80010bc <HAL_RCC_ClockConfig+0x154>)
 800107e:	1bc0      	subs	r0, r0, r7
 8001080:	4298      	cmp	r0, r3
 8001082:	d8cb      	bhi.n	800101c <HAL_RCC_ClockConfig+0xb4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8001084:	220c      	movs	r2, #12
 8001086:	686b      	ldr	r3, [r5, #4]
 8001088:	4013      	ands	r3, r2
 800108a:	4293      	cmp	r3, r2
 800108c:	d1f4      	bne.n	8001078 <HAL_RCC_ClockConfig+0x110>
 800108e:	e779      	b.n	8000f84 <HAL_RCC_ClockConfig+0x1c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001090:	6822      	ldr	r2, [r4, #0]
 8001092:	439a      	bics	r2, r3
 8001094:	6022      	str	r2, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001096:	6822      	ldr	r2, [r4, #0]
 8001098:	421a      	tst	r2, r3
 800109a:	d198      	bne.n	8000fce <HAL_RCC_ClockConfig+0x66>
 800109c:	e779      	b.n	8000f92 <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800109e:	6863      	ldr	r3, [r4, #4]
 80010a0:	4a07      	ldr	r2, [pc, #28]	; (80010c0 <HAL_RCC_ClockConfig+0x158>)
 80010a2:	4013      	ands	r3, r2
 80010a4:	68f2      	ldr	r2, [r6, #12]
 80010a6:	4313      	orrs	r3, r2
 80010a8:	6063      	str	r3, [r4, #4]
 80010aa:	e777      	b.n	8000f9c <HAL_RCC_ClockConfig+0x34>
 80010ac:	40022000 	.word	0x40022000
 80010b0:	40021000 	.word	0x40021000
 80010b4:	080033da 	.word	0x080033da
 80010b8:	20000008 	.word	0x20000008
 80010bc:	00001388 	.word	0x00001388
 80010c0:	fffff8ff 	.word	0xfffff8ff

080010c4 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 80010c4:	4b01      	ldr	r3, [pc, #4]	; (80010cc <HAL_RCC_GetHCLKFreq+0x8>)
 80010c6:	6818      	ldr	r0, [r3, #0]
}
 80010c8:	4770      	bx	lr
 80010ca:	46c0      	nop			; (mov r8, r8)
 80010cc:	20000008 	.word	0x20000008

080010d0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80010d0:	4b04      	ldr	r3, [pc, #16]	; (80010e4 <HAL_RCC_GetPCLK1Freq+0x14>)
 80010d2:	4a05      	ldr	r2, [pc, #20]	; (80010e8 <HAL_RCC_GetPCLK1Freq+0x18>)
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	055b      	lsls	r3, r3, #21
 80010d8:	0f5b      	lsrs	r3, r3, #29
 80010da:	5cd3      	ldrb	r3, [r2, r3]
 80010dc:	4a03      	ldr	r2, [pc, #12]	; (80010ec <HAL_RCC_GetPCLK1Freq+0x1c>)
 80010de:	6810      	ldr	r0, [r2, #0]
 80010e0:	40d8      	lsrs	r0, r3
}    
 80010e2:	4770      	bx	lr
 80010e4:	40021000 	.word	0x40021000
 80010e8:	080033ea 	.word	0x080033ea
 80010ec:	20000008 	.word	0x20000008

080010f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80010f0:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80010f2:	6803      	ldr	r3, [r0, #0]
{
 80010f4:	b085      	sub	sp, #20
 80010f6:	0005      	movs	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80010f8:	03db      	lsls	r3, r3, #15
 80010fa:	d528      	bpl.n	800114e <HAL_RCCEx_PeriphCLKConfig+0x5e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010fc:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80010fe:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001100:	4c44      	ldr	r4, [pc, #272]	; (8001214 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8001102:	0552      	lsls	r2, r2, #21
 8001104:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 8001106:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001108:	4213      	tst	r3, r2
 800110a:	d108      	bne.n	800111e <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800110c:	69e3      	ldr	r3, [r4, #28]
 800110e:	4313      	orrs	r3, r2
 8001110:	61e3      	str	r3, [r4, #28]
 8001112:	69e3      	ldr	r3, [r4, #28]
 8001114:	4013      	ands	r3, r2
 8001116:	9303      	str	r3, [sp, #12]
 8001118:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 800111a:	2301      	movs	r3, #1
 800111c:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800111e:	2780      	movs	r7, #128	; 0x80
 8001120:	4e3d      	ldr	r6, [pc, #244]	; (8001218 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8001122:	007f      	lsls	r7, r7, #1
 8001124:	6833      	ldr	r3, [r6, #0]
 8001126:	423b      	tst	r3, r7
 8001128:	d041      	beq.n	80011ae <HAL_RCCEx_PeriphCLKConfig+0xbe>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800112a:	22c0      	movs	r2, #192	; 0xc0
 800112c:	6a23      	ldr	r3, [r4, #32]
 800112e:	0092      	lsls	r2, r2, #2
 8001130:	4013      	ands	r3, r2
 8001132:	4e3a      	ldr	r6, [pc, #232]	; (800121c <HAL_RCCEx_PeriphCLKConfig+0x12c>)
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001134:	d14d      	bne.n	80011d2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001136:	6a23      	ldr	r3, [r4, #32]
 8001138:	401e      	ands	r6, r3
 800113a:	686b      	ldr	r3, [r5, #4]
 800113c:	431e      	orrs	r6, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800113e:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001140:	6226      	str	r6, [r4, #32]
    if(pwrclkchanged == SET)
 8001142:	2b01      	cmp	r3, #1
 8001144:	d103      	bne.n	800114e <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001146:	69e3      	ldr	r3, [r4, #28]
 8001148:	4a35      	ldr	r2, [pc, #212]	; (8001220 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800114a:	4013      	ands	r3, r2
 800114c:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800114e:	682b      	ldr	r3, [r5, #0]
 8001150:	07da      	lsls	r2, r3, #31
 8001152:	d506      	bpl.n	8001162 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001154:	2003      	movs	r0, #3
 8001156:	492f      	ldr	r1, [pc, #188]	; (8001214 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8001158:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800115a:	4382      	bics	r2, r0
 800115c:	68a8      	ldr	r0, [r5, #8]
 800115e:	4302      	orrs	r2, r0
 8001160:	630a      	str	r2, [r1, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001162:	079a      	lsls	r2, r3, #30
 8001164:	d506      	bpl.n	8001174 <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001166:	492b      	ldr	r1, [pc, #172]	; (8001214 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8001168:	482e      	ldr	r0, [pc, #184]	; (8001224 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800116a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800116c:	4002      	ands	r2, r0
 800116e:	68e8      	ldr	r0, [r5, #12]
 8001170:	4302      	orrs	r2, r0
 8001172:	630a      	str	r2, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001174:	069a      	lsls	r2, r3, #26
 8001176:	d506      	bpl.n	8001186 <HAL_RCCEx_PeriphCLKConfig+0x96>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001178:	2010      	movs	r0, #16
 800117a:	4926      	ldr	r1, [pc, #152]	; (8001214 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 800117c:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800117e:	4382      	bics	r2, r0
 8001180:	6928      	ldr	r0, [r5, #16]
 8001182:	4302      	orrs	r2, r0
 8001184:	630a      	str	r2, [r1, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001186:	039a      	lsls	r2, r3, #14
 8001188:	d506      	bpl.n	8001198 <HAL_RCCEx_PeriphCLKConfig+0xa8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800118a:	2080      	movs	r0, #128	; 0x80
 800118c:	4921      	ldr	r1, [pc, #132]	; (8001214 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 800118e:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8001190:	4382      	bics	r2, r0
 8001192:	69a8      	ldr	r0, [r5, #24]
 8001194:	4302      	orrs	r2, r0
 8001196:	630a      	str	r2, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001198:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800119a:	055b      	lsls	r3, r3, #21
 800119c:	d517      	bpl.n	80011ce <HAL_RCCEx_PeriphCLKConfig+0xde>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800119e:	2140      	movs	r1, #64	; 0x40
 80011a0:	4a1c      	ldr	r2, [pc, #112]	; (8001214 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 80011a2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80011a4:	438b      	bics	r3, r1
 80011a6:	6969      	ldr	r1, [r5, #20]
 80011a8:	430b      	orrs	r3, r1
 80011aa:	6313      	str	r3, [r2, #48]	; 0x30
 80011ac:	e00f      	b.n	80011ce <HAL_RCCEx_PeriphCLKConfig+0xde>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011ae:	6833      	ldr	r3, [r6, #0]
 80011b0:	433b      	orrs	r3, r7
 80011b2:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80011b4:	f7ff f872 	bl	800029c <HAL_GetTick>
 80011b8:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011ba:	6833      	ldr	r3, [r6, #0]
 80011bc:	423b      	tst	r3, r7
 80011be:	d1b4      	bne.n	800112a <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011c0:	f7ff f86c 	bl	800029c <HAL_GetTick>
 80011c4:	9b01      	ldr	r3, [sp, #4]
 80011c6:	1ac0      	subs	r0, r0, r3
 80011c8:	2864      	cmp	r0, #100	; 0x64
 80011ca:	d9f6      	bls.n	80011ba <HAL_RCCEx_PeriphCLKConfig+0xca>
          return HAL_TIMEOUT;
 80011cc:	2003      	movs	r0, #3
}
 80011ce:	b005      	add	sp, #20
 80011d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80011d2:	6869      	ldr	r1, [r5, #4]
 80011d4:	400a      	ands	r2, r1
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d0ad      	beq.n	8001136 <HAL_RCCEx_PeriphCLKConfig+0x46>
      __HAL_RCC_BACKUPRESET_FORCE();
 80011da:	2380      	movs	r3, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80011dc:	6a22      	ldr	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80011de:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80011e0:	0011      	movs	r1, r2
      __HAL_RCC_BACKUPRESET_FORCE();
 80011e2:	025b      	lsls	r3, r3, #9
 80011e4:	4303      	orrs	r3, r0
 80011e6:	6223      	str	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80011e8:	6a23      	ldr	r3, [r4, #32]
 80011ea:	480f      	ldr	r0, [pc, #60]	; (8001228 <HAL_RCCEx_PeriphCLKConfig+0x138>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80011ec:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 80011ee:	4003      	ands	r3, r0
 80011f0:	6223      	str	r3, [r4, #32]
      RCC->BDCR = temp_reg;
 80011f2:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80011f4:	07d3      	lsls	r3, r2, #31
 80011f6:	d59e      	bpl.n	8001136 <HAL_RCCEx_PeriphCLKConfig+0x46>
        tickstart = HAL_GetTick();
 80011f8:	f7ff f850 	bl	800029c <HAL_GetTick>
 80011fc:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011fe:	2202      	movs	r2, #2
 8001200:	6a23      	ldr	r3, [r4, #32]
 8001202:	4213      	tst	r3, r2
 8001204:	d197      	bne.n	8001136 <HAL_RCCEx_PeriphCLKConfig+0x46>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001206:	f7ff f849 	bl	800029c <HAL_GetTick>
 800120a:	4b08      	ldr	r3, [pc, #32]	; (800122c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800120c:	1bc0      	subs	r0, r0, r7
 800120e:	4298      	cmp	r0, r3
 8001210:	d9f5      	bls.n	80011fe <HAL_RCCEx_PeriphCLKConfig+0x10e>
 8001212:	e7db      	b.n	80011cc <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8001214:	40021000 	.word	0x40021000
 8001218:	40007000 	.word	0x40007000
 800121c:	fffffcff 	.word	0xfffffcff
 8001220:	efffffff 	.word	0xefffffff
 8001224:	fffcffff 	.word	0xfffcffff
 8001228:	fffeffff 	.word	0xfffeffff
 800122c:	00001388 	.word	0x00001388

08001230 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001232:	0004      	movs	r4, r0
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
  {
    return HAL_ERROR;
 8001234:	2001      	movs	r0, #1
  if (hspi == NULL)
 8001236:	2c00      	cmp	r4, #0
 8001238:	d04b      	beq.n	80012d2 <HAL_SPI_Init+0xa2>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800123a:	2300      	movs	r3, #0
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800123c:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800123e:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001240:	355d      	adds	r5, #93	; 0x5d
 8001242:	782b      	ldrb	r3, [r5, #0]
 8001244:	b2db      	uxtb	r3, r3
 8001246:	2b00      	cmp	r3, #0
 8001248:	d105      	bne.n	8001256 <HAL_SPI_Init+0x26>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800124a:	0022      	movs	r2, r4
 800124c:	325c      	adds	r2, #92	; 0x5c
 800124e:	7013      	strb	r3, [r2, #0]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001250:	0020      	movs	r0, r4
 8001252:	f001 fb81 	bl	8002958 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001256:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001258:	2240      	movs	r2, #64	; 0x40
 800125a:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 800125c:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 800125e:	680b      	ldr	r3, [r1, #0]
 8001260:	2000      	movs	r0, #0
 8001262:	4393      	bics	r3, r2
 8001264:	600b      	str	r3, [r1, #0]
 8001266:	23e0      	movs	r3, #224	; 0xe0

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001268:	68e2      	ldr	r2, [r4, #12]
 800126a:	00db      	lsls	r3, r3, #3
 800126c:	429a      	cmp	r2, r3
 800126e:	d931      	bls.n	80012d4 <HAL_SPI_Init+0xa4>
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001270:	26f0      	movs	r6, #240	; 0xf0
 8001272:	0136      	lsls	r6, r6, #4
 8001274:	42b2      	cmp	r2, r6
 8001276:	d133      	bne.n	80012e0 <HAL_SPI_Init+0xb0>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001278:	0006      	movs	r6, r0
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800127a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800127c:	2800      	cmp	r0, #0
 800127e:	d103      	bne.n	8001288 <HAL_SPI_Init+0x58>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001280:	429a      	cmp	r2, r3
 8001282:	d92f      	bls.n	80012e4 <HAL_SPI_Init+0xb4>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8001284:	2302      	movs	r3, #2
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8001286:	6323      	str	r3, [r4, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8001288:	68a7      	ldr	r7, [r4, #8]
 800128a:	6863      	ldr	r3, [r4, #4]
 800128c:	69a0      	ldr	r0, [r4, #24]
 800128e:	433b      	orrs	r3, r7
 8001290:	6927      	ldr	r7, [r4, #16]
 8001292:	433b      	orrs	r3, r7
 8001294:	6967      	ldr	r7, [r4, #20]
 8001296:	433b      	orrs	r3, r7
 8001298:	69e7      	ldr	r7, [r4, #28]
 800129a:	433b      	orrs	r3, r7
 800129c:	6a27      	ldr	r7, [r4, #32]
 800129e:	433b      	orrs	r3, r7
 80012a0:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 80012a2:	433b      	orrs	r3, r7
 80012a4:	2780      	movs	r7, #128	; 0x80
 80012a6:	00bf      	lsls	r7, r7, #2
 80012a8:	4007      	ands	r7, r0
 80012aa:	433b      	orrs	r3, r7
 80012ac:	600b      	str	r3, [r1, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80012ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80012b0:	0c00      	lsrs	r0, r0, #16
 80012b2:	431a      	orrs	r2, r3
 80012b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80012b6:	431a      	orrs	r2, r3
 80012b8:	2304      	movs	r3, #4
 80012ba:	4018      	ands	r0, r3
 80012bc:	4310      	orrs	r0, r2
 80012be:	4306      	orrs	r6, r0
 80012c0:	604e      	str	r6, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80012c2:	69cb      	ldr	r3, [r1, #28]
 80012c4:	4a08      	ldr	r2, [pc, #32]	; (80012e8 <HAL_SPI_Init+0xb8>)
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80012c6:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80012c8:	4013      	ands	r3, r2
 80012ca:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 80012cc:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80012ce:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80012d0:	702b      	strb	r3, [r5, #0]

  return HAL_OK;
}
 80012d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80012d4:	2680      	movs	r6, #128	; 0x80
 80012d6:	0176      	lsls	r6, r6, #5
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80012d8:	429a      	cmp	r2, r3
 80012da:	d0ce      	beq.n	800127a <HAL_SPI_Init+0x4a>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012dc:	62a0      	str	r0, [r4, #40]	; 0x28
 80012de:	e7cc      	b.n	800127a <HAL_SPI_Init+0x4a>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80012e0:	0006      	movs	r6, r0
 80012e2:	e7fb      	b.n	80012dc <HAL_SPI_Init+0xac>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80012e4:	2301      	movs	r3, #1
 80012e6:	e7ce      	b.n	8001286 <HAL_SPI_Init+0x56>
 80012e8:	fffff7ff 	.word	0xfffff7ff

080012ec <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80012ec:	6803      	ldr	r3, [r0, #0]
 80012ee:	4906      	ldr	r1, [pc, #24]	; (8001308 <UART_EndRxTransfer+0x1c>)
 80012f0:	681a      	ldr	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80012f2:	306a      	adds	r0, #106	; 0x6a
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80012f4:	400a      	ands	r2, r1
 80012f6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80012f8:	689a      	ldr	r2, [r3, #8]
 80012fa:	3123      	adds	r1, #35	; 0x23
 80012fc:	31ff      	adds	r1, #255	; 0xff
 80012fe:	438a      	bics	r2, r1
 8001300:	609a      	str	r2, [r3, #8]
  huart->RxState = HAL_UART_STATE_READY;
 8001302:	2320      	movs	r3, #32
 8001304:	7003      	strb	r3, [r0, #0]
}
 8001306:	4770      	bx	lr
 8001308:	fffffedf 	.word	0xfffffedf

0800130c <HAL_UART_TxCpltCallback>:
 800130c:	4770      	bx	lr

0800130e <HAL_UART_RxCpltCallback>:
 800130e:	4770      	bx	lr

08001310 <HAL_UART_ErrorCallback>:
 8001310:	4770      	bx	lr

08001312 <UART_DMAAbortOnError>:
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8001312:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 8001314:	2300      	movs	r3, #0
 8001316:	0002      	movs	r2, r0
{
 8001318:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 800131a:	325a      	adds	r2, #90	; 0x5a
 800131c:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 800131e:	3a08      	subs	r2, #8
 8001320:	8013      	strh	r3, [r2, #0]

  HAL_UART_ErrorCallback(huart);
 8001322:	f7ff fff5 	bl	8001310 <HAL_UART_ErrorCallback>
}
 8001326:	bd10      	pop	{r4, pc}

08001328 <UART_SetConfig>:
{
 8001328:	b570      	push	{r4, r5, r6, lr}
 800132a:	0004      	movs	r4, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800132c:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800132e:	69c2      	ldr	r2, [r0, #28]
 8001330:	6883      	ldr	r3, [r0, #8]
 8001332:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001334:	6829      	ldr	r1, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001336:	4303      	orrs	r3, r0
 8001338:	6960      	ldr	r0, [r4, #20]
 800133a:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800133c:	484a      	ldr	r0, [pc, #296]	; (8001468 <UART_SetConfig+0x140>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800133e:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001340:	4001      	ands	r1, r0
 8001342:	430b      	orrs	r3, r1
 8001344:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001346:	686b      	ldr	r3, [r5, #4]
 8001348:	4948      	ldr	r1, [pc, #288]	; (800146c <UART_SetConfig+0x144>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800134a:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800134c:	400b      	ands	r3, r1
 800134e:	68e1      	ldr	r1, [r4, #12]
 8001350:	430b      	orrs	r3, r1
 8001352:	606b      	str	r3, [r5, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001354:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001356:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001358:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800135a:	4845      	ldr	r0, [pc, #276]	; (8001470 <UART_SetConfig+0x148>)
 800135c:	4001      	ands	r1, r0
 800135e:	430b      	orrs	r3, r1
 8001360:	2180      	movs	r1, #128	; 0x80
 8001362:	60ab      	str	r3, [r5, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001364:	4b43      	ldr	r3, [pc, #268]	; (8001474 <UART_SetConfig+0x14c>)
 8001366:	0209      	lsls	r1, r1, #8
 8001368:	429d      	cmp	r5, r3
 800136a:	d110      	bne.n	800138e <UART_SetConfig+0x66>
 800136c:	2003      	movs	r0, #3
 800136e:	4b42      	ldr	r3, [pc, #264]	; (8001478 <UART_SetConfig+0x150>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	4003      	ands	r3, r0
 8001374:	4841      	ldr	r0, [pc, #260]	; (800147c <UART_SetConfig+0x154>)
 8001376:	5cc0      	ldrb	r0, [r0, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001378:	428a      	cmp	r2, r1
 800137a:	d046      	beq.n	800140a <UART_SetConfig+0xe2>
    switch (clocksource)
 800137c:	2808      	cmp	r0, #8
 800137e:	d819      	bhi.n	80013b4 <UART_SetConfig+0x8c>
 8001380:	f7fe fecc 	bl	800011c <__gnu_thumb1_case_uqi>
 8001384:	1854184f 	.word	0x1854184f
 8001388:	1818185e 	.word	0x1818185e
 800138c:	61          	.byte	0x61
 800138d:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 800138e:	4b3c      	ldr	r3, [pc, #240]	; (8001480 <UART_SetConfig+0x158>)
 8001390:	429d      	cmp	r5, r3
 8001392:	d12c      	bne.n	80013ee <UART_SetConfig+0xc6>
 8001394:	20c0      	movs	r0, #192	; 0xc0
 8001396:	2680      	movs	r6, #128	; 0x80
 8001398:	4b37      	ldr	r3, [pc, #220]	; (8001478 <UART_SetConfig+0x150>)
 800139a:	0280      	lsls	r0, r0, #10
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	0276      	lsls	r6, r6, #9
 80013a0:	4003      	ands	r3, r0
 80013a2:	42b3      	cmp	r3, r6
 80013a4:	d054      	beq.n	8001450 <UART_SetConfig+0x128>
 80013a6:	d807      	bhi.n	80013b8 <UART_SetConfig+0x90>
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d026      	beq.n	80013fa <UART_SetConfig+0xd2>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80013ac:	2380      	movs	r3, #128	; 0x80
 80013ae:	021b      	lsls	r3, r3, #8
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d033      	beq.n	800141c <UART_SetConfig+0xf4>
        ret = HAL_ERROR;
 80013b4:	2001      	movs	r0, #1
  return ret;
 80013b6:	e019      	b.n	80013ec <UART_SetConfig+0xc4>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80013b8:	2680      	movs	r6, #128	; 0x80
 80013ba:	02b6      	lsls	r6, r6, #10
 80013bc:	42b3      	cmp	r3, r6
 80013be:	d04c      	beq.n	800145a <UART_SetConfig+0x132>
 80013c0:	4283      	cmp	r3, r0
 80013c2:	d1f3      	bne.n	80013ac <UART_SetConfig+0x84>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80013c4:	428a      	cmp	r2, r1
 80013c6:	d131      	bne.n	800142c <UART_SetConfig+0x104>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80013c8:	6863      	ldr	r3, [r4, #4]
 80013ca:	0858      	lsrs	r0, r3, #1
 80013cc:	4b2d      	ldr	r3, [pc, #180]	; (8001484 <UART_SetConfig+0x15c>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80013ce:	18c0      	adds	r0, r0, r3
 80013d0:	6861      	ldr	r1, [r4, #4]
 80013d2:	f7fe fead 	bl	8000130 <__udivsi3>
 80013d6:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 80013d8:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 80013da:	220f      	movs	r2, #15
 80013dc:	0019      	movs	r1, r3
 80013de:	4391      	bics	r1, r2
 80013e0:	000a      	movs	r2, r1
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80013e2:	071b      	lsls	r3, r3, #28
    huart->Instance->BRR = brrtemp;
 80013e4:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80013e6:	0f5b      	lsrs	r3, r3, #29
    huart->Instance->BRR = brrtemp;
 80013e8:	4313      	orrs	r3, r2
 80013ea:	60cb      	str	r3, [r1, #12]
}
 80013ec:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80013ee:	4b26      	ldr	r3, [pc, #152]	; (8001488 <UART_SetConfig+0x160>)
 80013f0:	429d      	cmp	r5, r3
 80013f2:	d002      	beq.n	80013fa <UART_SetConfig+0xd2>
 80013f4:	4b25      	ldr	r3, [pc, #148]	; (800148c <UART_SetConfig+0x164>)
 80013f6:	429d      	cmp	r5, r3
 80013f8:	d1d8      	bne.n	80013ac <UART_SetConfig+0x84>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80013fa:	428a      	cmp	r2, r1
 80013fc:	d111      	bne.n	8001422 <UART_SetConfig+0xfa>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80013fe:	f7ff fe67 	bl	80010d0 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001402:	6863      	ldr	r3, [r4, #4]
 8001404:	0040      	lsls	r0, r0, #1
 8001406:	085b      	lsrs	r3, r3, #1
 8001408:	e7e1      	b.n	80013ce <UART_SetConfig+0xa6>
    switch (clocksource)
 800140a:	2808      	cmp	r0, #8
 800140c:	d806      	bhi.n	800141c <UART_SetConfig+0xf4>
 800140e:	f7fe fe7b 	bl	8000108 <__gnu_thumb1_case_sqi>
 8001412:	05f6      	.short	0x05f6
 8001414:	052105db 	.word	0x052105db
 8001418:	0505      	.short	0x0505
 800141a:	26          	.byte	0x26
 800141b:	00          	.byte	0x00
        ret = HAL_ERROR;
 800141c:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 800141e:	2300      	movs	r3, #0
 8001420:	e7db      	b.n	80013da <UART_SetConfig+0xb2>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001422:	f7ff fe55 	bl	80010d0 <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001426:	6861      	ldr	r1, [r4, #4]
 8001428:	084b      	lsrs	r3, r1, #1
 800142a:	e002      	b.n	8001432 <UART_SetConfig+0x10a>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800142c:	6861      	ldr	r1, [r4, #4]
 800142e:	4b18      	ldr	r3, [pc, #96]	; (8001490 <UART_SetConfig+0x168>)
 8001430:	0848      	lsrs	r0, r1, #1
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001432:	18c0      	adds	r0, r0, r3
 8001434:	f7fe fe7c 	bl	8000130 <__udivsi3>
 8001438:	b280      	uxth	r0, r0
 800143a:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 800143c:	2000      	movs	r0, #0
        break;
 800143e:	e7d5      	b.n	80013ec <UART_SetConfig+0xc4>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001440:	f7ff fd56 	bl	8000ef0 <HAL_RCC_GetSysClockFreq>
 8001444:	e7ef      	b.n	8001426 <UART_SetConfig+0xfe>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001446:	2380      	movs	r3, #128	; 0x80
 8001448:	6861      	ldr	r1, [r4, #4]
 800144a:	021b      	lsls	r3, r3, #8
 800144c:	0848      	lsrs	r0, r1, #1
 800144e:	e7f0      	b.n	8001432 <UART_SetConfig+0x10a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001450:	428a      	cmp	r2, r1
 8001452:	d1f5      	bne.n	8001440 <UART_SetConfig+0x118>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001454:	f7ff fd4c 	bl	8000ef0 <HAL_RCC_GetSysClockFreq>
 8001458:	e7d3      	b.n	8001402 <UART_SetConfig+0xda>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800145a:	428a      	cmp	r2, r1
 800145c:	d1f3      	bne.n	8001446 <UART_SetConfig+0x11e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800145e:	6863      	ldr	r3, [r4, #4]
 8001460:	0858      	lsrs	r0, r3, #1
 8001462:	2380      	movs	r3, #128	; 0x80
 8001464:	025b      	lsls	r3, r3, #9
 8001466:	e7b2      	b.n	80013ce <UART_SetConfig+0xa6>
 8001468:	efff69f3 	.word	0xefff69f3
 800146c:	ffffcfff 	.word	0xffffcfff
 8001470:	fffff4ff 	.word	0xfffff4ff
 8001474:	40013800 	.word	0x40013800
 8001478:	40021000 	.word	0x40021000
 800147c:	08002c30 	.word	0x08002c30
 8001480:	40004400 	.word	0x40004400
 8001484:	00f42400 	.word	0x00f42400
 8001488:	40004800 	.word	0x40004800
 800148c:	40004c00 	.word	0x40004c00
 8001490:	007a1200 	.word	0x007a1200

08001494 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001494:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8001496:	b530      	push	{r4, r5, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001498:	07da      	lsls	r2, r3, #31
 800149a:	d506      	bpl.n	80014aa <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800149c:	6801      	ldr	r1, [r0, #0]
 800149e:	4c28      	ldr	r4, [pc, #160]	; (8001540 <UART_AdvFeatureConfig+0xac>)
 80014a0:	684a      	ldr	r2, [r1, #4]
 80014a2:	4022      	ands	r2, r4
 80014a4:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80014a6:	4322      	orrs	r2, r4
 80014a8:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80014aa:	079a      	lsls	r2, r3, #30
 80014ac:	d506      	bpl.n	80014bc <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80014ae:	6801      	ldr	r1, [r0, #0]
 80014b0:	4c24      	ldr	r4, [pc, #144]	; (8001544 <UART_AdvFeatureConfig+0xb0>)
 80014b2:	684a      	ldr	r2, [r1, #4]
 80014b4:	4022      	ands	r2, r4
 80014b6:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80014b8:	4322      	orrs	r2, r4
 80014ba:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80014bc:	075a      	lsls	r2, r3, #29
 80014be:	d506      	bpl.n	80014ce <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80014c0:	6801      	ldr	r1, [r0, #0]
 80014c2:	4c21      	ldr	r4, [pc, #132]	; (8001548 <UART_AdvFeatureConfig+0xb4>)
 80014c4:	684a      	ldr	r2, [r1, #4]
 80014c6:	4022      	ands	r2, r4
 80014c8:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80014ca:	4322      	orrs	r2, r4
 80014cc:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80014ce:	071a      	lsls	r2, r3, #28
 80014d0:	d506      	bpl.n	80014e0 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80014d2:	6801      	ldr	r1, [r0, #0]
 80014d4:	4c1d      	ldr	r4, [pc, #116]	; (800154c <UART_AdvFeatureConfig+0xb8>)
 80014d6:	684a      	ldr	r2, [r1, #4]
 80014d8:	4022      	ands	r2, r4
 80014da:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80014dc:	4322      	orrs	r2, r4
 80014de:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80014e0:	06da      	lsls	r2, r3, #27
 80014e2:	d506      	bpl.n	80014f2 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80014e4:	6801      	ldr	r1, [r0, #0]
 80014e6:	4c1a      	ldr	r4, [pc, #104]	; (8001550 <UART_AdvFeatureConfig+0xbc>)
 80014e8:	688a      	ldr	r2, [r1, #8]
 80014ea:	4022      	ands	r2, r4
 80014ec:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80014ee:	4322      	orrs	r2, r4
 80014f0:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80014f2:	069a      	lsls	r2, r3, #26
 80014f4:	d506      	bpl.n	8001504 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80014f6:	6801      	ldr	r1, [r0, #0]
 80014f8:	4c16      	ldr	r4, [pc, #88]	; (8001554 <UART_AdvFeatureConfig+0xc0>)
 80014fa:	688a      	ldr	r2, [r1, #8]
 80014fc:	4022      	ands	r2, r4
 80014fe:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001500:	4322      	orrs	r2, r4
 8001502:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001504:	065a      	lsls	r2, r3, #25
 8001506:	d510      	bpl.n	800152a <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001508:	6801      	ldr	r1, [r0, #0]
 800150a:	4d13      	ldr	r5, [pc, #76]	; (8001558 <UART_AdvFeatureConfig+0xc4>)
 800150c:	684a      	ldr	r2, [r1, #4]
 800150e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001510:	402a      	ands	r2, r5
 8001512:	4322      	orrs	r2, r4
 8001514:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001516:	2280      	movs	r2, #128	; 0x80
 8001518:	0352      	lsls	r2, r2, #13
 800151a:	4294      	cmp	r4, r2
 800151c:	d105      	bne.n	800152a <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800151e:	684a      	ldr	r2, [r1, #4]
 8001520:	4c0e      	ldr	r4, [pc, #56]	; (800155c <UART_AdvFeatureConfig+0xc8>)
 8001522:	4022      	ands	r2, r4
 8001524:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001526:	4322      	orrs	r2, r4
 8001528:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800152a:	061b      	lsls	r3, r3, #24
 800152c:	d506      	bpl.n	800153c <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800152e:	6802      	ldr	r2, [r0, #0]
 8001530:	490b      	ldr	r1, [pc, #44]	; (8001560 <UART_AdvFeatureConfig+0xcc>)
 8001532:	6853      	ldr	r3, [r2, #4]
 8001534:	400b      	ands	r3, r1
 8001536:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001538:	430b      	orrs	r3, r1
 800153a:	6053      	str	r3, [r2, #4]
}
 800153c:	bd30      	pop	{r4, r5, pc}
 800153e:	46c0      	nop			; (mov r8, r8)
 8001540:	fffdffff 	.word	0xfffdffff
 8001544:	fffeffff 	.word	0xfffeffff
 8001548:	fffbffff 	.word	0xfffbffff
 800154c:	ffff7fff 	.word	0xffff7fff
 8001550:	ffffefff 	.word	0xffffefff
 8001554:	ffffdfff 	.word	0xffffdfff
 8001558:	ffefffff 	.word	0xffefffff
 800155c:	ff9fffff 	.word	0xff9fffff
 8001560:	fff7ffff 	.word	0xfff7ffff

08001564 <UART_WaitOnFlagUntilTimeout>:
{
 8001564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001566:	0004      	movs	r4, r0
 8001568:	000e      	movs	r6, r1
 800156a:	0015      	movs	r5, r2
 800156c:	001f      	movs	r7, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800156e:	6822      	ldr	r2, [r4, #0]
 8001570:	69d3      	ldr	r3, [r2, #28]
 8001572:	4033      	ands	r3, r6
 8001574:	1b9b      	subs	r3, r3, r6
 8001576:	4259      	negs	r1, r3
 8001578:	414b      	adcs	r3, r1
 800157a:	42ab      	cmp	r3, r5
 800157c:	d001      	beq.n	8001582 <UART_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 800157e:	2000      	movs	r0, #0
 8001580:	e018      	b.n	80015b4 <UART_WaitOnFlagUntilTimeout+0x50>
    if(Timeout != HAL_MAX_DELAY)
 8001582:	9b06      	ldr	r3, [sp, #24]
 8001584:	3301      	adds	r3, #1
 8001586:	d0f3      	beq.n	8001570 <UART_WaitOnFlagUntilTimeout+0xc>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001588:	9b06      	ldr	r3, [sp, #24]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d113      	bne.n	80015b6 <UART_WaitOnFlagUntilTimeout+0x52>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800158e:	6823      	ldr	r3, [r4, #0]
 8001590:	490c      	ldr	r1, [pc, #48]	; (80015c4 <UART_WaitOnFlagUntilTimeout+0x60>)
 8001592:	681a      	ldr	r2, [r3, #0]
        __HAL_UNLOCK(huart);
 8001594:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001596:	400a      	ands	r2, r1
 8001598:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800159a:	689a      	ldr	r2, [r3, #8]
 800159c:	31a3      	adds	r1, #163	; 0xa3
 800159e:	31ff      	adds	r1, #255	; 0xff
 80015a0:	438a      	bics	r2, r1
 80015a2:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 80015a4:	0022      	movs	r2, r4
 80015a6:	2320      	movs	r3, #32
 80015a8:	3269      	adds	r2, #105	; 0x69
 80015aa:	7013      	strb	r3, [r2, #0]
        huart->RxState = HAL_UART_STATE_READY;
 80015ac:	7053      	strb	r3, [r2, #1]
        __HAL_UNLOCK(huart);
 80015ae:	2300      	movs	r3, #0
 80015b0:	3468      	adds	r4, #104	; 0x68
 80015b2:	7023      	strb	r3, [r4, #0]
}
 80015b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80015b6:	f7fe fe71 	bl	800029c <HAL_GetTick>
 80015ba:	9b06      	ldr	r3, [sp, #24]
 80015bc:	1bc0      	subs	r0, r0, r7
 80015be:	4283      	cmp	r3, r0
 80015c0:	d2d5      	bcs.n	800156e <UART_WaitOnFlagUntilTimeout+0xa>
 80015c2:	e7e4      	b.n	800158e <UART_WaitOnFlagUntilTimeout+0x2a>
 80015c4:	fffffe5f 	.word	0xfffffe5f

080015c8 <HAL_UART_Transmit>:
{
 80015c8:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(huart->gState == HAL_UART_STATE_READY)
 80015ca:	0007      	movs	r7, r0
{
 80015cc:	b085      	sub	sp, #20
 80015ce:	9303      	str	r3, [sp, #12]
  if(huart->gState == HAL_UART_STATE_READY)
 80015d0:	3769      	adds	r7, #105	; 0x69
 80015d2:	783b      	ldrb	r3, [r7, #0]
{
 80015d4:	0004      	movs	r4, r0
 80015d6:	000d      	movs	r5, r1
 80015d8:	0016      	movs	r6, r2
    return HAL_BUSY;
 80015da:	2002      	movs	r0, #2
  if(huart->gState == HAL_UART_STATE_READY)
 80015dc:	2b20      	cmp	r3, #32
 80015de:	d146      	bne.n	800166e <HAL_UART_Transmit+0xa6>
      return  HAL_ERROR;
 80015e0:	3801      	subs	r0, #1
    if((pData == NULL ) || (Size == 0U))
 80015e2:	2900      	cmp	r1, #0
 80015e4:	d043      	beq.n	800166e <HAL_UART_Transmit+0xa6>
 80015e6:	2a00      	cmp	r2, #0
 80015e8:	d041      	beq.n	800166e <HAL_UART_Transmit+0xa6>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80015ea:	2380      	movs	r3, #128	; 0x80
 80015ec:	68a2      	ldr	r2, [r4, #8]
 80015ee:	015b      	lsls	r3, r3, #5
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d104      	bne.n	80015fe <HAL_UART_Transmit+0x36>
 80015f4:	6923      	ldr	r3, [r4, #16]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d101      	bne.n	80015fe <HAL_UART_Transmit+0x36>
      if((((uint32_t)pData)&1U) != 0U)
 80015fa:	4201      	tst	r1, r0
 80015fc:	d137      	bne.n	800166e <HAL_UART_Transmit+0xa6>
    __HAL_LOCK(huart);
 80015fe:	0023      	movs	r3, r4
 8001600:	3368      	adds	r3, #104	; 0x68
 8001602:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 8001604:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8001606:	2a01      	cmp	r2, #1
 8001608:	d031      	beq.n	800166e <HAL_UART_Transmit+0xa6>
 800160a:	2201      	movs	r2, #1
 800160c:	701a      	strb	r2, [r3, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800160e:	2300      	movs	r3, #0
 8001610:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001612:	3321      	adds	r3, #33	; 0x21
 8001614:	703b      	strb	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8001616:	f7fe fe41 	bl	800029c <HAL_GetTick>
    huart->TxXferSize = Size;
 800161a:	0023      	movs	r3, r4
 800161c:	3350      	adds	r3, #80	; 0x50
 800161e:	801e      	strh	r6, [r3, #0]
    huart->TxXferCount = Size;
 8001620:	805e      	strh	r6, [r3, #2]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001622:	2680      	movs	r6, #128	; 0x80
    tickstart = HAL_GetTick();
 8001624:	9002      	str	r0, [sp, #8]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001626:	0176      	lsls	r6, r6, #5
    while(huart->TxXferCount > 0)
 8001628:	0021      	movs	r1, r4
 800162a:	3152      	adds	r1, #82	; 0x52
 800162c:	880a      	ldrh	r2, [r1, #0]
 800162e:	b292      	uxth	r2, r2
 8001630:	2a00      	cmp	r2, #0
 8001632:	d10d      	bne.n	8001650 <HAL_UART_Transmit+0x88>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001634:	9b03      	ldr	r3, [sp, #12]
 8001636:	2140      	movs	r1, #64	; 0x40
 8001638:	9300      	str	r3, [sp, #0]
 800163a:	0020      	movs	r0, r4
 800163c:	9b02      	ldr	r3, [sp, #8]
 800163e:	f7ff ff91 	bl	8001564 <UART_WaitOnFlagUntilTimeout>
 8001642:	2800      	cmp	r0, #0
 8001644:	d112      	bne.n	800166c <HAL_UART_Transmit+0xa4>
    huart->gState = HAL_UART_STATE_READY;
 8001646:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8001648:	3468      	adds	r4, #104	; 0x68
    huart->gState = HAL_UART_STATE_READY;
 800164a:	703b      	strb	r3, [r7, #0]
    __HAL_UNLOCK(huart);
 800164c:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 800164e:	e00e      	b.n	800166e <HAL_UART_Transmit+0xa6>
      huart->TxXferCount--;
 8001650:	880b      	ldrh	r3, [r1, #0]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001652:	2200      	movs	r2, #0
      huart->TxXferCount--;
 8001654:	3b01      	subs	r3, #1
 8001656:	b29b      	uxth	r3, r3
 8001658:	800b      	strh	r3, [r1, #0]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800165a:	9b03      	ldr	r3, [sp, #12]
 800165c:	2180      	movs	r1, #128	; 0x80
 800165e:	9300      	str	r3, [sp, #0]
 8001660:	0020      	movs	r0, r4
 8001662:	9b02      	ldr	r3, [sp, #8]
 8001664:	f7ff ff7e 	bl	8001564 <UART_WaitOnFlagUntilTimeout>
 8001668:	2800      	cmp	r0, #0
 800166a:	d002      	beq.n	8001672 <HAL_UART_Transmit+0xaa>
        return HAL_TIMEOUT;
 800166c:	2003      	movs	r0, #3
}
 800166e:	b005      	add	sp, #20
 8001670:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001672:	68a3      	ldr	r3, [r4, #8]
 8001674:	6822      	ldr	r2, [r4, #0]
 8001676:	42b3      	cmp	r3, r6
 8001678:	d108      	bne.n	800168c <HAL_UART_Transmit+0xc4>
 800167a:	6923      	ldr	r3, [r4, #16]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d105      	bne.n	800168c <HAL_UART_Transmit+0xc4>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8001680:	882b      	ldrh	r3, [r5, #0]
        pData += 2;
 8001682:	3502      	adds	r5, #2
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8001684:	05db      	lsls	r3, r3, #23
 8001686:	0ddb      	lsrs	r3, r3, #23
 8001688:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2;
 800168a:	e7cd      	b.n	8001628 <HAL_UART_Transmit+0x60>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 800168c:	782b      	ldrb	r3, [r5, #0]
 800168e:	3501      	adds	r5, #1
 8001690:	8513      	strh	r3, [r2, #40]	; 0x28
 8001692:	e7c9      	b.n	8001628 <HAL_UART_Transmit+0x60>

08001694 <HAL_UART_Receive>:
{
 8001694:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001696:	001f      	movs	r7, r3
  if(huart->RxState == HAL_UART_STATE_READY)
 8001698:	0003      	movs	r3, r0
 800169a:	336a      	adds	r3, #106	; 0x6a
{
 800169c:	0016      	movs	r6, r2
  if(huart->RxState == HAL_UART_STATE_READY)
 800169e:	781a      	ldrb	r2, [r3, #0]
{
 80016a0:	0004      	movs	r4, r0
 80016a2:	b085      	sub	sp, #20
 80016a4:	000d      	movs	r5, r1
    return HAL_BUSY;
 80016a6:	2002      	movs	r0, #2
  if(huart->RxState == HAL_UART_STATE_READY)
 80016a8:	2a20      	cmp	r2, #32
 80016aa:	d139      	bne.n	8001720 <HAL_UART_Receive+0x8c>
      return  HAL_ERROR;
 80016ac:	3801      	subs	r0, #1
    if((pData == NULL ) || (Size == 0U))
 80016ae:	2900      	cmp	r1, #0
 80016b0:	d036      	beq.n	8001720 <HAL_UART_Receive+0x8c>
 80016b2:	2e00      	cmp	r6, #0
 80016b4:	d034      	beq.n	8001720 <HAL_UART_Receive+0x8c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80016b6:	2280      	movs	r2, #128	; 0x80
 80016b8:	68a1      	ldr	r1, [r4, #8]
 80016ba:	0152      	lsls	r2, r2, #5
 80016bc:	4291      	cmp	r1, r2
 80016be:	d104      	bne.n	80016ca <HAL_UART_Receive+0x36>
 80016c0:	6922      	ldr	r2, [r4, #16]
 80016c2:	2a00      	cmp	r2, #0
 80016c4:	d101      	bne.n	80016ca <HAL_UART_Receive+0x36>
      if((((uint32_t)pData)&1U) != 0U)
 80016c6:	4205      	tst	r5, r0
 80016c8:	d12a      	bne.n	8001720 <HAL_UART_Receive+0x8c>
    __HAL_LOCK(huart);
 80016ca:	0022      	movs	r2, r4
 80016cc:	3268      	adds	r2, #104	; 0x68
 80016ce:	7811      	ldrb	r1, [r2, #0]
    return HAL_BUSY;
 80016d0:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 80016d2:	2901      	cmp	r1, #1
 80016d4:	d024      	beq.n	8001720 <HAL_UART_Receive+0x8c>
 80016d6:	2101      	movs	r1, #1
 80016d8:	7011      	strb	r1, [r2, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80016da:	2200      	movs	r2, #0
 80016dc:	66e2      	str	r2, [r4, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80016de:	3222      	adds	r2, #34	; 0x22
 80016e0:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80016e2:	f7fe fddb 	bl	800029c <HAL_GetTick>
    huart->RxXferSize = Size;
 80016e6:	0023      	movs	r3, r4
    UART_MASK_COMPUTATION(huart);
 80016e8:	2180      	movs	r1, #128	; 0x80
 80016ea:	68a2      	ldr	r2, [r4, #8]
    huart->RxXferSize = Size;
 80016ec:	3358      	adds	r3, #88	; 0x58
 80016ee:	801e      	strh	r6, [r3, #0]
    huart->RxXferCount = Size;
 80016f0:	805e      	strh	r6, [r3, #2]
    tickstart = HAL_GetTick();
 80016f2:	9003      	str	r0, [sp, #12]
    UART_MASK_COMPUTATION(huart);
 80016f4:	0149      	lsls	r1, r1, #5
 80016f6:	3304      	adds	r3, #4
 80016f8:	428a      	cmp	r2, r1
 80016fa:	d115      	bne.n	8001728 <HAL_UART_Receive+0x94>
 80016fc:	6922      	ldr	r2, [r4, #16]
 80016fe:	2a00      	cmp	r2, #0
 8001700:	d110      	bne.n	8001724 <HAL_UART_Receive+0x90>
 8001702:	4a23      	ldr	r2, [pc, #140]	; (8001790 <HAL_UART_Receive+0xfc>)
 8001704:	801a      	strh	r2, [r3, #0]
    uhMask = huart->Mask;
 8001706:	881e      	ldrh	r6, [r3, #0]
    while(huart->RxXferCount > 0U)
 8001708:	0022      	movs	r2, r4
 800170a:	325a      	adds	r2, #90	; 0x5a
 800170c:	8810      	ldrh	r0, [r2, #0]
 800170e:	b280      	uxth	r0, r0
 8001710:	2800      	cmp	r0, #0
 8001712:	d119      	bne.n	8001748 <HAL_UART_Receive+0xb4>
    huart->RxState = HAL_UART_STATE_READY;
 8001714:	0023      	movs	r3, r4
 8001716:	2220      	movs	r2, #32
 8001718:	336a      	adds	r3, #106	; 0x6a
    __HAL_UNLOCK(huart);
 800171a:	3468      	adds	r4, #104	; 0x68
    huart->RxState = HAL_UART_STATE_READY;
 800171c:	701a      	strb	r2, [r3, #0]
    __HAL_UNLOCK(huart);
 800171e:	7020      	strb	r0, [r4, #0]
}
 8001720:	b005      	add	sp, #20
 8001722:	bdf0      	pop	{r4, r5, r6, r7, pc}
    UART_MASK_COMPUTATION(huart);
 8001724:	22ff      	movs	r2, #255	; 0xff
 8001726:	e7ed      	b.n	8001704 <HAL_UART_Receive+0x70>
 8001728:	2a00      	cmp	r2, #0
 800172a:	d104      	bne.n	8001736 <HAL_UART_Receive+0xa2>
 800172c:	6922      	ldr	r2, [r4, #16]
 800172e:	2a00      	cmp	r2, #0
 8001730:	d0f8      	beq.n	8001724 <HAL_UART_Receive+0x90>
 8001732:	227f      	movs	r2, #127	; 0x7f
 8001734:	e7e6      	b.n	8001704 <HAL_UART_Receive+0x70>
 8001736:	2180      	movs	r1, #128	; 0x80
 8001738:	0549      	lsls	r1, r1, #21
 800173a:	428a      	cmp	r2, r1
 800173c:	d1e3      	bne.n	8001706 <HAL_UART_Receive+0x72>
 800173e:	6922      	ldr	r2, [r4, #16]
 8001740:	2a00      	cmp	r2, #0
 8001742:	d0f6      	beq.n	8001732 <HAL_UART_Receive+0x9e>
 8001744:	223f      	movs	r2, #63	; 0x3f
 8001746:	e7dd      	b.n	8001704 <HAL_UART_Receive+0x70>
      huart->RxXferCount--;
 8001748:	8813      	ldrh	r3, [r2, #0]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800174a:	2120      	movs	r1, #32
      huart->RxXferCount--;
 800174c:	3b01      	subs	r3, #1
 800174e:	b29b      	uxth	r3, r3
 8001750:	8013      	strh	r3, [r2, #0]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001752:	0020      	movs	r0, r4
 8001754:	9700      	str	r7, [sp, #0]
 8001756:	9b03      	ldr	r3, [sp, #12]
 8001758:	2200      	movs	r2, #0
 800175a:	f7ff ff03 	bl	8001564 <UART_WaitOnFlagUntilTimeout>
 800175e:	2800      	cmp	r0, #0
 8001760:	d113      	bne.n	800178a <HAL_UART_Receive+0xf6>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001762:	68a2      	ldr	r2, [r4, #8]
 8001764:	6823      	ldr	r3, [r4, #0]
 8001766:	0011      	movs	r1, r2
 8001768:	2280      	movs	r2, #128	; 0x80
 800176a:	0152      	lsls	r2, r2, #5
 800176c:	4291      	cmp	r1, r2
 800176e:	d107      	bne.n	8001780 <HAL_UART_Receive+0xec>
 8001770:	6922      	ldr	r2, [r4, #16]
 8001772:	2a00      	cmp	r2, #0
 8001774:	d104      	bne.n	8001780 <HAL_UART_Receive+0xec>
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8001776:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001778:	4033      	ands	r3, r6
 800177a:	802b      	strh	r3, [r5, #0]
        pData +=2U;
 800177c:	3502      	adds	r5, #2
 800177e:	e7c3      	b.n	8001708 <HAL_UART_Receive+0x74>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8001780:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001782:	4033      	ands	r3, r6
 8001784:	702b      	strb	r3, [r5, #0]
 8001786:	3501      	adds	r5, #1
 8001788:	e7be      	b.n	8001708 <HAL_UART_Receive+0x74>
        return HAL_TIMEOUT;
 800178a:	2003      	movs	r0, #3
 800178c:	e7c8      	b.n	8001720 <HAL_UART_Receive+0x8c>
 800178e:	46c0      	nop			; (mov r8, r8)
 8001790:	000001ff 	.word	0x000001ff

08001794 <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001794:	2300      	movs	r3, #0
{
 8001796:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001798:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800179a:	66c3      	str	r3, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 800179c:	f7fe fd7e 	bl	800029c <HAL_GetTick>
  if (IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance))
 80017a0:	6823      	ldr	r3, [r4, #0]
 80017a2:	4a18      	ldr	r2, [pc, #96]	; (8001804 <UART_CheckIdleState+0x70>)
  tickstart = HAL_GetTick();
 80017a4:	0005      	movs	r5, r0
  if (IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance))
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d00b      	beq.n	80017c2 <UART_CheckIdleState+0x2e>
 80017aa:	4a17      	ldr	r2, [pc, #92]	; (8001808 <UART_CheckIdleState+0x74>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d008      	beq.n	80017c2 <UART_CheckIdleState+0x2e>
  huart->gState  = HAL_UART_STATE_READY;
 80017b0:	0022      	movs	r2, r4
 80017b2:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 80017b4:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 80017b6:	3269      	adds	r2, #105	; 0x69
  __HAL_UNLOCK(huart);
 80017b8:	3468      	adds	r4, #104	; 0x68
  huart->gState  = HAL_UART_STATE_READY;
 80017ba:	7013      	strb	r3, [r2, #0]
  huart->RxState = HAL_UART_STATE_READY;
 80017bc:	7053      	strb	r3, [r2, #1]
  __HAL_UNLOCK(huart);
 80017be:	7020      	strb	r0, [r4, #0]
}
 80017c0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	071b      	lsls	r3, r3, #28
 80017c6:	d40f      	bmi.n	80017e8 <UART_CheckIdleState+0x54>
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80017c8:	6823      	ldr	r3, [r4, #0]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	075b      	lsls	r3, r3, #29
 80017ce:	d5ef      	bpl.n	80017b0 <UART_CheckIdleState+0x1c>
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80017d0:	2180      	movs	r1, #128	; 0x80
 80017d2:	4b0e      	ldr	r3, [pc, #56]	; (800180c <UART_CheckIdleState+0x78>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	9300      	str	r3, [sp, #0]
 80017d8:	03c9      	lsls	r1, r1, #15
 80017da:	002b      	movs	r3, r5
 80017dc:	0020      	movs	r0, r4
 80017de:	f7ff fec1 	bl	8001564 <UART_WaitOnFlagUntilTimeout>
 80017e2:	2800      	cmp	r0, #0
 80017e4:	d10b      	bne.n	80017fe <UART_CheckIdleState+0x6a>
 80017e6:	e7e3      	b.n	80017b0 <UART_CheckIdleState+0x1c>
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80017e8:	2180      	movs	r1, #128	; 0x80
 80017ea:	4b08      	ldr	r3, [pc, #32]	; (800180c <UART_CheckIdleState+0x78>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	9300      	str	r3, [sp, #0]
 80017f0:	0389      	lsls	r1, r1, #14
 80017f2:	002b      	movs	r3, r5
 80017f4:	0020      	movs	r0, r4
 80017f6:	f7ff feb5 	bl	8001564 <UART_WaitOnFlagUntilTimeout>
 80017fa:	2800      	cmp	r0, #0
 80017fc:	d0e4      	beq.n	80017c8 <UART_CheckIdleState+0x34>
        return HAL_TIMEOUT;
 80017fe:	2003      	movs	r0, #3
 8001800:	e7de      	b.n	80017c0 <UART_CheckIdleState+0x2c>
 8001802:	46c0      	nop			; (mov r8, r8)
 8001804:	40013800 	.word	0x40013800
 8001808:	40004400 	.word	0x40004400
 800180c:	01ffffff 	.word	0x01ffffff

08001810 <HAL_UART_Init>:
{
 8001810:	b570      	push	{r4, r5, r6, lr}
 8001812:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 8001814:	d101      	bne.n	800181a <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8001816:	2001      	movs	r0, #1
}
 8001818:	bd70      	pop	{r4, r5, r6, pc}
  if(huart->gState == HAL_UART_STATE_RESET)
 800181a:	0005      	movs	r5, r0
 800181c:	3569      	adds	r5, #105	; 0x69
 800181e:	782b      	ldrb	r3, [r5, #0]
 8001820:	b2db      	uxtb	r3, r3
 8001822:	2b00      	cmp	r3, #0
 8001824:	d104      	bne.n	8001830 <HAL_UART_Init+0x20>
    huart->Lock = HAL_UNLOCKED;
 8001826:	0002      	movs	r2, r0
 8001828:	3268      	adds	r2, #104	; 0x68
 800182a:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 800182c:	f001 f8da 	bl	80029e4 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8001830:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8001832:	2101      	movs	r1, #1
 8001834:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001836:	702b      	strb	r3, [r5, #0]
  __HAL_UART_DISABLE(huart);
 8001838:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800183a:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 800183c:	438b      	bics	r3, r1
 800183e:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001840:	f7ff fd72 	bl	8001328 <UART_SetConfig>
 8001844:	2801      	cmp	r0, #1
 8001846:	d0e6      	beq.n	8001816 <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001848:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800184a:	2b00      	cmp	r3, #0
 800184c:	d002      	beq.n	8001854 <HAL_UART_Init+0x44>
    UART_AdvFeatureConfig(huart);
 800184e:	0020      	movs	r0, r4
 8001850:	f7ff fe20 	bl	8001494 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001854:	6823      	ldr	r3, [r4, #0]
 8001856:	4908      	ldr	r1, [pc, #32]	; (8001878 <HAL_UART_Init+0x68>)
 8001858:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 800185a:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800185c:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800185e:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001860:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001862:	689a      	ldr	r2, [r3, #8]
 8001864:	438a      	bics	r2, r1
 8001866:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001868:	2201      	movs	r2, #1
 800186a:	6819      	ldr	r1, [r3, #0]
 800186c:	430a      	orrs	r2, r1
 800186e:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8001870:	f7ff ff90 	bl	8001794 <UART_CheckIdleState>
 8001874:	e7d0      	b.n	8001818 <HAL_UART_Init+0x8>
 8001876:	46c0      	nop			; (mov r8, r8)
 8001878:	ffffb7ff 	.word	0xffffb7ff

0800187c <UART_Transmit_IT>:
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800187c:	0003      	movs	r3, r0
{
 800187e:	b530      	push	{r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001880:	3369      	adds	r3, #105	; 0x69
 8001882:	781b      	ldrb	r3, [r3, #0]
{
 8001884:	0002      	movs	r2, r0
      return HAL_OK;
    }
  }
  else
  {
    return HAL_BUSY;
 8001886:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001888:	2b21      	cmp	r3, #33	; 0x21
 800188a:	d10f      	bne.n	80018ac <UART_Transmit_IT+0x30>
    if(huart->TxXferCount == 0U)
 800188c:	0014      	movs	r4, r2
 800188e:	3452      	adds	r4, #82	; 0x52
 8001890:	8823      	ldrh	r3, [r4, #0]
 8001892:	6811      	ldr	r1, [r2, #0]
 8001894:	b29b      	uxth	r3, r3
 8001896:	2b00      	cmp	r3, #0
 8001898:	d109      	bne.n	80018ae <UART_Transmit_IT+0x32>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800189a:	680a      	ldr	r2, [r1, #0]
 800189c:	307e      	adds	r0, #126	; 0x7e
 800189e:	4382      	bics	r2, r0
 80018a0:	600a      	str	r2, [r1, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80018a2:	2240      	movs	r2, #64	; 0x40
 80018a4:	6808      	ldr	r0, [r1, #0]
 80018a6:	4302      	orrs	r2, r0
 80018a8:	600a      	str	r2, [r1, #0]
      return HAL_OK;
 80018aa:	2000      	movs	r0, #0
  }
}
 80018ac:	bd30      	pop	{r4, r5, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80018ae:	2080      	movs	r0, #128	; 0x80
 80018b0:	6895      	ldr	r5, [r2, #8]
 80018b2:	0140      	lsls	r0, r0, #5
 80018b4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80018b6:	4285      	cmp	r5, r0
 80018b8:	d10d      	bne.n	80018d6 <UART_Transmit_IT+0x5a>
 80018ba:	6910      	ldr	r0, [r2, #16]
 80018bc:	2800      	cmp	r0, #0
 80018be:	d10a      	bne.n	80018d6 <UART_Transmit_IT+0x5a>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80018c0:	8818      	ldrh	r0, [r3, #0]
        huart->pTxBuffPtr += 2U;
 80018c2:	3302      	adds	r3, #2
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80018c4:	05c0      	lsls	r0, r0, #23
 80018c6:	0dc0      	lsrs	r0, r0, #23
 80018c8:	8508      	strh	r0, [r1, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 80018ca:	64d3      	str	r3, [r2, #76]	; 0x4c
      huart->TxXferCount--;
 80018cc:	8823      	ldrh	r3, [r4, #0]
 80018ce:	3b01      	subs	r3, #1
 80018d0:	b29b      	uxth	r3, r3
 80018d2:	8023      	strh	r3, [r4, #0]
 80018d4:	e7e9      	b.n	80018aa <UART_Transmit_IT+0x2e>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 80018d6:	1c58      	adds	r0, r3, #1
 80018d8:	64d0      	str	r0, [r2, #76]	; 0x4c
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	850b      	strh	r3, [r1, #40]	; 0x28
 80018de:	e7f5      	b.n	80018cc <UART_Transmit_IT+0x50>

080018e0 <UART_EndTransmit_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80018e0:	2140      	movs	r1, #64	; 0x40
 80018e2:	6802      	ldr	r2, [r0, #0]
{
 80018e4:	b510      	push	{r4, lr}
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80018e6:	6813      	ldr	r3, [r2, #0]
 80018e8:	438b      	bics	r3, r1
 80018ea:	6013      	str	r3, [r2, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80018ec:	0003      	movs	r3, r0
 80018ee:	2220      	movs	r2, #32
 80018f0:	3369      	adds	r3, #105	; 0x69
 80018f2:	701a      	strb	r2, [r3, #0]

  HAL_UART_TxCpltCallback(huart);
 80018f4:	f7ff fd0a 	bl	800130c <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 80018f8:	2000      	movs	r0, #0
 80018fa:	bd10      	pop	{r4, pc}

080018fc <UART_Receive_IT>:
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 80018fc:	0002      	movs	r2, r0
{
 80018fe:	b570      	push	{r4, r5, r6, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001900:	326a      	adds	r2, #106	; 0x6a
 8001902:	7811      	ldrb	r1, [r2, #0]
 8001904:	6803      	ldr	r3, [r0, #0]
 8001906:	2922      	cmp	r1, #34	; 0x22
 8001908:	d12d      	bne.n	8001966 <UART_Receive_IT+0x6a>
  uint16_t  uhMask = huart->Mask;
 800190a:	0001      	movs	r1, r0
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800190c:	2480      	movs	r4, #128	; 0x80
  uint16_t  uhMask = huart->Mask;
 800190e:	315c      	adds	r1, #92	; 0x5c
 8001910:	880d      	ldrh	r5, [r1, #0]
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8001912:	8c99      	ldrh	r1, [r3, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001914:	0164      	lsls	r4, r4, #5
 8001916:	4029      	ands	r1, r5
 8001918:	6885      	ldr	r5, [r0, #8]
 800191a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800191c:	42a5      	cmp	r5, r4
 800191e:	d11e      	bne.n	800195e <UART_Receive_IT+0x62>
 8001920:	6904      	ldr	r4, [r0, #16]
 8001922:	2c00      	cmp	r4, #0
 8001924:	d11b      	bne.n	800195e <UART_Receive_IT+0x62>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr ;
      *tmp = (uint16_t)(uhdata & uhMask);
 8001926:	8019      	strh	r1, [r3, #0]
      huart->pRxBuffPtr +=2U;
 8001928:	3302      	adds	r3, #2
 800192a:	6543      	str	r3, [r0, #84]	; 0x54
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
    }

    if(--huart->RxXferCount == 0U)
 800192c:	0001      	movs	r1, r0
      HAL_UART_RxCpltCallback(huart);

      return HAL_OK;
    }

    return HAL_OK;
 800192e:	2400      	movs	r4, #0
    if(--huart->RxXferCount == 0U)
 8001930:	315a      	adds	r1, #90	; 0x5a
 8001932:	880b      	ldrh	r3, [r1, #0]
 8001934:	3b01      	subs	r3, #1
 8001936:	b29b      	uxth	r3, r3
 8001938:	800b      	strh	r3, [r1, #0]
 800193a:	42a3      	cmp	r3, r4
 800193c:	d10d      	bne.n	800195a <UART_Receive_IT+0x5e>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800193e:	6803      	ldr	r3, [r0, #0]
 8001940:	4d0c      	ldr	r5, [pc, #48]	; (8001974 <UART_Receive_IT+0x78>)
 8001942:	6819      	ldr	r1, [r3, #0]
 8001944:	4029      	ands	r1, r5
 8001946:	6019      	str	r1, [r3, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001948:	6899      	ldr	r1, [r3, #8]
 800194a:	3523      	adds	r5, #35	; 0x23
 800194c:	35ff      	adds	r5, #255	; 0xff
 800194e:	43a9      	bics	r1, r5
 8001950:	6099      	str	r1, [r3, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8001952:	2320      	movs	r3, #32
 8001954:	7013      	strb	r3, [r2, #0]
      HAL_UART_RxCpltCallback(huart);
 8001956:	f7ff fcda 	bl	800130e <HAL_UART_RxCpltCallback>
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);

    return HAL_BUSY;
  }
}
 800195a:	0020      	movs	r0, r4
 800195c:	bd70      	pop	{r4, r5, r6, pc}
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 800195e:	1c5c      	adds	r4, r3, #1
 8001960:	6544      	str	r4, [r0, #84]	; 0x54
 8001962:	7019      	strb	r1, [r3, #0]
 8001964:	e7e2      	b.n	800192c <UART_Receive_IT+0x30>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8001966:	2208      	movs	r2, #8
 8001968:	6999      	ldr	r1, [r3, #24]
    return HAL_BUSY;
 800196a:	2402      	movs	r4, #2
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800196c:	430a      	orrs	r2, r1
 800196e:	619a      	str	r2, [r3, #24]
    return HAL_BUSY;
 8001970:	e7f3      	b.n	800195a <UART_Receive_IT+0x5e>
 8001972:	46c0      	nop			; (mov r8, r8)
 8001974:	fffffedf 	.word	0xfffffedf

08001978 <HAL_UART_IRQHandler>:
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8001978:	210f      	movs	r1, #15
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800197a:	6802      	ldr	r2, [r0, #0]
{
 800197c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800197e:	69d3      	ldr	r3, [r2, #28]
{
 8001980:	0004      	movs	r4, r0
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8001982:	4019      	ands	r1, r3
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001984:	6810      	ldr	r0, [r2, #0]
  if (errorflags == RESET)
 8001986:	d108      	bne.n	800199a <HAL_UART_IRQHandler+0x22>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001988:	2520      	movs	r5, #32
 800198a:	422b      	tst	r3, r5
 800198c:	d005      	beq.n	800199a <HAL_UART_IRQHandler+0x22>
 800198e:	4228      	tst	r0, r5
 8001990:	d003      	beq.n	800199a <HAL_UART_IRQHandler+0x22>
      UART_Receive_IT(huart);
 8001992:	0020      	movs	r0, r4
 8001994:	f7ff ffb2 	bl	80018fc <UART_Receive_IT>
}
 8001998:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  cr3its = READ_REG(huart->Instance->CR3);
 800199a:	6896      	ldr	r6, [r2, #8]
  if(   (errorflags != RESET)
 800199c:	2900      	cmp	r1, #0
 800199e:	d061      	beq.n	8001a64 <HAL_UART_IRQHandler+0xec>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 80019a0:	2101      	movs	r1, #1
 80019a2:	0035      	movs	r5, r6
 80019a4:	400d      	ands	r5, r1
 80019a6:	d103      	bne.n	80019b0 <HAL_UART_IRQHandler+0x38>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 80019a8:	2790      	movs	r7, #144	; 0x90
 80019aa:	007f      	lsls	r7, r7, #1
 80019ac:	4238      	tst	r0, r7
 80019ae:	d059      	beq.n	8001a64 <HAL_UART_IRQHandler+0xec>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80019b0:	420b      	tst	r3, r1
 80019b2:	d005      	beq.n	80019c0 <HAL_UART_IRQHandler+0x48>
 80019b4:	05c6      	lsls	r6, r0, #23
 80019b6:	d503      	bpl.n	80019c0 <HAL_UART_IRQHandler+0x48>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 80019b8:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80019ba:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
 80019bc:	4331      	orrs	r1, r6
 80019be:	66e1      	str	r1, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80019c0:	2102      	movs	r1, #2
 80019c2:	420b      	tst	r3, r1
 80019c4:	d006      	beq.n	80019d4 <HAL_UART_IRQHandler+0x5c>
 80019c6:	2d00      	cmp	r5, #0
 80019c8:	d004      	beq.n	80019d4 <HAL_UART_IRQHandler+0x5c>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 80019ca:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80019cc:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
 80019ce:	1849      	adds	r1, r1, r1
 80019d0:	4331      	orrs	r1, r6
 80019d2:	66e1      	str	r1, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80019d4:	2104      	movs	r1, #4
 80019d6:	420b      	tst	r3, r1
 80019d8:	d006      	beq.n	80019e8 <HAL_UART_IRQHandler+0x70>
 80019da:	2d00      	cmp	r5, #0
 80019dc:	d004      	beq.n	80019e8 <HAL_UART_IRQHandler+0x70>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 80019de:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80019e0:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
 80019e2:	3902      	subs	r1, #2
 80019e4:	4331      	orrs	r1, r6
 80019e6:	66e1      	str	r1, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 80019e8:	0719      	lsls	r1, r3, #28
 80019ea:	d508      	bpl.n	80019fe <HAL_UART_IRQHandler+0x86>
 80019ec:	0681      	lsls	r1, r0, #26
 80019ee:	d401      	bmi.n	80019f4 <HAL_UART_IRQHandler+0x7c>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80019f0:	2d00      	cmp	r5, #0
 80019f2:	d004      	beq.n	80019fe <HAL_UART_IRQHandler+0x86>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 80019f4:	2108      	movs	r1, #8
 80019f6:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80019f8:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80019fa:	4311      	orrs	r1, r2
 80019fc:	66e1      	str	r1, [r4, #108]	; 0x6c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80019fe:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8001a00:	2a00      	cmp	r2, #0
 8001a02:	d0c9      	beq.n	8001998 <HAL_UART_IRQHandler+0x20>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001a04:	2220      	movs	r2, #32
 8001a06:	4213      	tst	r3, r2
 8001a08:	d004      	beq.n	8001a14 <HAL_UART_IRQHandler+0x9c>
 8001a0a:	4210      	tst	r0, r2
 8001a0c:	d002      	beq.n	8001a14 <HAL_UART_IRQHandler+0x9c>
        UART_Receive_IT(huart);
 8001a0e:	0020      	movs	r0, r4
 8001a10:	f7ff ff74 	bl	80018fc <UART_Receive_IT>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8001a14:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
        UART_EndRxTransfer(huart);
 8001a16:	0020      	movs	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8001a18:	071b      	lsls	r3, r3, #28
 8001a1a:	d404      	bmi.n	8001a26 <HAL_UART_IRQHandler+0xae>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8001a1c:	6823      	ldr	r3, [r4, #0]
 8001a1e:	689d      	ldr	r5, [r3, #8]
 8001a20:	2340      	movs	r3, #64	; 0x40
 8001a22:	401d      	ands	r5, r3
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8001a24:	d01a      	beq.n	8001a5c <HAL_UART_IRQHandler+0xe4>
        UART_EndRxTransfer(huart);
 8001a26:	f7ff fc61 	bl	80012ec <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001a2a:	2140      	movs	r1, #64	; 0x40
 8001a2c:	6823      	ldr	r3, [r4, #0]
 8001a2e:	689a      	ldr	r2, [r3, #8]
 8001a30:	420a      	tst	r2, r1
 8001a32:	d00f      	beq.n	8001a54 <HAL_UART_IRQHandler+0xdc>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001a34:	689a      	ldr	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8001a36:	6e60      	ldr	r0, [r4, #100]	; 0x64
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001a38:	438a      	bics	r2, r1
 8001a3a:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8001a3c:	2800      	cmp	r0, #0
 8001a3e:	d009      	beq.n	8001a54 <HAL_UART_IRQHandler+0xdc>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001a40:	4b1a      	ldr	r3, [pc, #104]	; (8001aac <HAL_UART_IRQHandler+0x134>)
 8001a42:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001a44:	f7fe fc84 	bl	8000350 <HAL_DMA_Abort_IT>
 8001a48:	2800      	cmp	r0, #0
 8001a4a:	d0a5      	beq.n	8001998 <HAL_UART_IRQHandler+0x20>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001a4c:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8001a4e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001a50:	4798      	blx	r3
 8001a52:	e7a1      	b.n	8001998 <HAL_UART_IRQHandler+0x20>
            HAL_UART_ErrorCallback(huart);
 8001a54:	0020      	movs	r0, r4
 8001a56:	f7ff fc5b 	bl	8001310 <HAL_UART_ErrorCallback>
 8001a5a:	e79d      	b.n	8001998 <HAL_UART_IRQHandler+0x20>
        HAL_UART_ErrorCallback(huart);
 8001a5c:	f7ff fc58 	bl	8001310 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a60:	66e5      	str	r5, [r4, #108]	; 0x6c
 8001a62:	e799      	b.n	8001998 <HAL_UART_IRQHandler+0x20>
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 8001a64:	2180      	movs	r1, #128	; 0x80
 8001a66:	0349      	lsls	r1, r1, #13
 8001a68:	420b      	tst	r3, r1
 8001a6a:	d00b      	beq.n	8001a84 <HAL_UART_IRQHandler+0x10c>
 8001a6c:	0275      	lsls	r5, r6, #9
 8001a6e:	d509      	bpl.n	8001a84 <HAL_UART_IRQHandler+0x10c>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 8001a70:	6211      	str	r1, [r2, #32]
    huart->gState  = HAL_UART_STATE_READY;
 8001a72:	0022      	movs	r2, r4
 8001a74:	2320      	movs	r3, #32
 8001a76:	3269      	adds	r2, #105	; 0x69
 8001a78:	7013      	strb	r3, [r2, #0]
    HAL_UARTEx_WakeupCallback(huart);
 8001a7a:	0020      	movs	r0, r4
    huart->RxState = HAL_UART_STATE_READY;
 8001a7c:	7053      	strb	r3, [r2, #1]
    HAL_UARTEx_WakeupCallback(huart);
 8001a7e:	f000 f817 	bl	8001ab0 <HAL_UARTEx_WakeupCallback>
    return;
 8001a82:	e789      	b.n	8001998 <HAL_UART_IRQHandler+0x20>
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001a84:	2280      	movs	r2, #128	; 0x80
 8001a86:	4213      	tst	r3, r2
 8001a88:	d005      	beq.n	8001a96 <HAL_UART_IRQHandler+0x11e>
 8001a8a:	4210      	tst	r0, r2
 8001a8c:	d003      	beq.n	8001a96 <HAL_UART_IRQHandler+0x11e>
    UART_Transmit_IT(huart);
 8001a8e:	0020      	movs	r0, r4
 8001a90:	f7ff fef4 	bl	800187c <UART_Transmit_IT>
    return;
 8001a94:	e780      	b.n	8001998 <HAL_UART_IRQHandler+0x20>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001a96:	2240      	movs	r2, #64	; 0x40
 8001a98:	4213      	tst	r3, r2
 8001a9a:	d100      	bne.n	8001a9e <HAL_UART_IRQHandler+0x126>
 8001a9c:	e77c      	b.n	8001998 <HAL_UART_IRQHandler+0x20>
 8001a9e:	4210      	tst	r0, r2
 8001aa0:	d100      	bne.n	8001aa4 <HAL_UART_IRQHandler+0x12c>
 8001aa2:	e779      	b.n	8001998 <HAL_UART_IRQHandler+0x20>
    UART_EndTransmit_IT(huart);
 8001aa4:	0020      	movs	r0, r4
 8001aa6:	f7ff ff1b 	bl	80018e0 <UART_EndTransmit_IT>
    return;
 8001aaa:	e775      	b.n	8001998 <HAL_UART_IRQHandler+0x20>
 8001aac:	08001313 	.word	0x08001313

08001ab0 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8001ab0:	4770      	bx	lr
	...

08001ab4 <DownloadFourthPattern.part.7>:
	{
		HAL_UART_Transmit(&huart3,"GD1",3,250);
		sendSelected=0;
	}
}
void DownloadFourthPattern()
 8001ab4:	b510      	push	{r4, lr}
{
	if(isConnected==true)
	{
		HAL_UART_Transmit(&huart3,"GD1",3,250);
 8001ab6:	23fa      	movs	r3, #250	; 0xfa
 8001ab8:	2203      	movs	r2, #3
 8001aba:	4904      	ldr	r1, [pc, #16]	; (8001acc <DownloadFourthPattern.part.7+0x18>)
 8001abc:	4804      	ldr	r0, [pc, #16]	; (8001ad0 <DownloadFourthPattern.part.7+0x1c>)
 8001abe:	f7ff fd83 	bl	80015c8 <HAL_UART_Transmit>
		sendSelected=0;
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	4b03      	ldr	r3, [pc, #12]	; (8001ad4 <DownloadFourthPattern.part.7+0x20>)
 8001ac6:	701a      	strb	r2, [r3, #0]
	}
}
 8001ac8:	bd10      	pop	{r4, pc}
 8001aca:	46c0      	nop			; (mov r8, r8)
 8001acc:	080033ac 	.word	0x080033ac
 8001ad0:	20000488 	.word	0x20000488
 8001ad4:	200004f8 	.word	0x200004f8

08001ad8 <SystemClock_Config>:
{
 8001ad8:	b570      	push	{r4, r5, r6, lr}
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ada:	2410      	movs	r4, #16
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001adc:	2501      	movs	r5, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8001ade:	2622      	movs	r6, #34	; 0x22
{
 8001ae0:	b098      	sub	sp, #96	; 0x60
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ae2:	2234      	movs	r2, #52	; 0x34
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	a80b      	add	r0, sp, #44	; 0x2c
 8001ae8:	f001 f87d 	bl	8002be6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001aec:	0022      	movs	r2, r4
 8001aee:	2100      	movs	r1, #0
 8001af0:	4668      	mov	r0, sp
 8001af2:	f001 f878 	bl	8002be6 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001af6:	221c      	movs	r2, #28
 8001af8:	2100      	movs	r1, #0
 8001afa:	a804      	add	r0, sp, #16
 8001afc:	f001 f873 	bl	8002be6 <memset>
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b00:	a80b      	add	r0, sp, #44	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b02:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8001b04:	960b      	str	r6, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b06:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001b08:	9513      	str	r5, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b0a:	f7fe ffbf 	bl	8000a8c <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b0e:	2307      	movs	r3, #7
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b10:	2400      	movs	r4, #0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b12:	9300      	str	r3, [sp, #0]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001b14:	0029      	movs	r1, r5
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8001b16:	3b04      	subs	r3, #4
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001b18:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8001b1a:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b1c:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b1e:	9403      	str	r4, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001b20:	f7ff fa22 	bl	8000f68 <HAL_RCC_ClockConfig>
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b24:	a804      	add	r0, sp, #16
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8001b26:	9604      	str	r6, [sp, #16]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001b28:	9407      	str	r4, [sp, #28]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001b2a:	9408      	str	r4, [sp, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b2c:	f7ff fae0 	bl	80010f0 <HAL_RCCEx_PeriphCLKConfig>
}
 8001b30:	b018      	add	sp, #96	; 0x60
 8001b32:	bd70      	pop	{r4, r5, r6, pc}

08001b34 <CheckACK>:
	char _temp[3]={'A','C','K'};
 8001b34:	2341      	movs	r3, #65	; 0x41
{
 8001b36:	b573      	push	{r0, r1, r4, r5, r6, lr}
	char _temp[3]={'A','C','K'};
 8001b38:	aa01      	add	r2, sp, #4
 8001b3a:	7013      	strb	r3, [r2, #0]
 8001b3c:	3302      	adds	r3, #2
 8001b3e:	7053      	strb	r3, [r2, #1]
 8001b40:	3308      	adds	r3, #8
 8001b42:	7093      	strb	r3, [r2, #2]
	for(int i=0;i<3;i++)
 8001b44:	2300      	movs	r3, #0
			if(isConnecting==true)
 8001b46:	4912      	ldr	r1, [pc, #72]	; (8001b90 <CheckACK+0x5c>)
		if(instReceived[i]!=_temp[i])
 8001b48:	4c12      	ldr	r4, [pc, #72]	; (8001b94 <CheckACK+0x60>)
			if(isConnecting==true)
 8001b4a:	7808      	ldrb	r0, [r1, #0]
		if(instReceived[i]!=_temp[i])
 8001b4c:	5d1e      	ldrb	r6, [r3, r4]
 8001b4e:	5cd5      	ldrb	r5, [r2, r3]
 8001b50:	42ae      	cmp	r6, r5
 8001b52:	d004      	beq.n	8001b5e <CheckACK+0x2a>
			if(isConnecting==true)
 8001b54:	2801      	cmp	r0, #1
 8001b56:	d102      	bne.n	8001b5e <CheckACK+0x2a>
				isConnecting=false;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	700b      	strb	r3, [r1, #0]
}
 8001b5c:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
	for(int i=0;i<3;i++)
 8001b5e:	3301      	adds	r3, #1
 8001b60:	2b03      	cmp	r3, #3
 8001b62:	d1f3      	bne.n	8001b4c <CheckACK+0x18>
	if(isConnecting==true)
 8001b64:	2801      	cmp	r0, #1
 8001b66:	d103      	bne.n	8001b70 <CheckACK+0x3c>
		isConnected=true;
 8001b68:	4b0b      	ldr	r3, [pc, #44]	; (8001b98 <CheckACK+0x64>)
 8001b6a:	7018      	strb	r0, [r3, #0]
		isConnecting=false;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	700b      	strb	r3, [r1, #0]
	HAL_UART_Transmit(&huart3,"ACK",3,250);
 8001b70:	4d0a      	ldr	r5, [pc, #40]	; (8001b9c <CheckACK+0x68>)
 8001b72:	23fa      	movs	r3, #250	; 0xfa
 8001b74:	2203      	movs	r2, #3
 8001b76:	490a      	ldr	r1, [pc, #40]	; (8001ba0 <CheckACK+0x6c>)
 8001b78:	0028      	movs	r0, r5
 8001b7a:	f7ff fd25 	bl	80015c8 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart3, instReceived, 3, 1000);
 8001b7e:	23fa      	movs	r3, #250	; 0xfa
 8001b80:	2203      	movs	r2, #3
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	0021      	movs	r1, r4
 8001b86:	0028      	movs	r0, r5
 8001b88:	f7ff fd84 	bl	8001694 <HAL_UART_Receive>
 8001b8c:	e7e6      	b.n	8001b5c <CheckACK+0x28>
 8001b8e:	46c0      	nop			; (mov r8, r8)
 8001b90:	20000074 	.word	0x20000074
 8001b94:	20000070 	.word	0x20000070
 8001b98:	20000073 	.word	0x20000073
 8001b9c:	20000488 	.word	0x20000488
 8001ba0:	080033a0 	.word	0x080033a0

08001ba4 <ConnectToArduino>:
	if(isConnecting == false)
 8001ba4:	4b0a      	ldr	r3, [pc, #40]	; (8001bd0 <ConnectToArduino+0x2c>)
{
 8001ba6:	b510      	push	{r4, lr}
	if(isConnecting == false)
 8001ba8:	781a      	ldrb	r2, [r3, #0]
 8001baa:	2a00      	cmp	r2, #0
 8001bac:	d10f      	bne.n	8001bce <ConnectToArduino+0x2a>
		HAL_UART_Transmit(&huart3,"SYN",3,250);
 8001bae:	4c09      	ldr	r4, [pc, #36]	; (8001bd4 <ConnectToArduino+0x30>)
		isConnecting = true;
 8001bb0:	3201      	adds	r2, #1
 8001bb2:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart3,"SYN",3,250);
 8001bb4:	4908      	ldr	r1, [pc, #32]	; (8001bd8 <ConnectToArduino+0x34>)
 8001bb6:	23fa      	movs	r3, #250	; 0xfa
 8001bb8:	3202      	adds	r2, #2
 8001bba:	0020      	movs	r0, r4
 8001bbc:	f7ff fd04 	bl	80015c8 <HAL_UART_Transmit>
		HAL_UART_Receive(&huart3, instReceived, 3, 1000);
 8001bc0:	23fa      	movs	r3, #250	; 0xfa
 8001bc2:	2203      	movs	r2, #3
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	4905      	ldr	r1, [pc, #20]	; (8001bdc <ConnectToArduino+0x38>)
 8001bc8:	0020      	movs	r0, r4
 8001bca:	f7ff fd63 	bl	8001694 <HAL_UART_Receive>
}
 8001bce:	bd10      	pop	{r4, pc}
 8001bd0:	20000074 	.word	0x20000074
 8001bd4:	20000488 	.word	0x20000488
 8001bd8:	080033a8 	.word	0x080033a8
 8001bdc:	20000070 	.word	0x20000070

08001be0 <GetDisplayData>:
	if(isConnected==true)
 8001be0:	4b42      	ldr	r3, [pc, #264]	; (8001cec <GetDisplayData+0x10c>)
{
 8001be2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if(isConnected==true)
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d11f      	bne.n	8001c2a <GetDisplayData+0x4a>
		HAL_UART_Transmit(&huart3,"GDD",3,250);
 8001bea:	4c41      	ldr	r4, [pc, #260]	; (8001cf0 <GetDisplayData+0x110>)
 8001bec:	33f9      	adds	r3, #249	; 0xf9
 8001bee:	2203      	movs	r2, #3
 8001bf0:	4940      	ldr	r1, [pc, #256]	; (8001cf4 <GetDisplayData+0x114>)
 8001bf2:	0020      	movs	r0, r4
 8001bf4:	f7ff fce8 	bl	80015c8 <HAL_UART_Transmit>
		HAL_UART_Receive(&huart3, instReceived, 3, 1000);
 8001bf8:	23fa      	movs	r3, #250	; 0xfa
 8001bfa:	4e3f      	ldr	r6, [pc, #252]	; (8001cf8 <GetDisplayData+0x118>)
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	2203      	movs	r2, #3
 8001c00:	0031      	movs	r1, r6
 8001c02:	0020      	movs	r0, r4
 8001c04:	f7ff fd46 	bl	8001694 <HAL_UART_Receive>
		char _temp[3]={'R','D','D'};
 8001c08:	2252      	movs	r2, #82	; 0x52
		for(int i=0;i<3;i++)
 8001c0a:	2500      	movs	r5, #0
		char _temp[3]={'R','D','D'};
 8001c0c:	ab01      	add	r3, sp, #4
 8001c0e:	701a      	strb	r2, [r3, #0]
 8001c10:	3a0e      	subs	r2, #14
 8001c12:	705a      	strb	r2, [r3, #1]
 8001c14:	709a      	strb	r2, [r3, #2]
				if(isConnecting==true)
 8001c16:	4a39      	ldr	r2, [pc, #228]	; (8001cfc <GetDisplayData+0x11c>)
 8001c18:	7811      	ldrb	r1, [r2, #0]
			if(instReceived[i]!=_temp[i])
 8001c1a:	5d77      	ldrb	r7, [r6, r5]
 8001c1c:	5d58      	ldrb	r0, [r3, r5]
 8001c1e:	4287      	cmp	r7, r0
 8001c20:	d004      	beq.n	8001c2c <GetDisplayData+0x4c>
				if(isConnecting==true)
 8001c22:	2901      	cmp	r1, #1
 8001c24:	d102      	bne.n	8001c2c <GetDisplayData+0x4c>
					isConnecting=false;
 8001c26:	2300      	movs	r3, #0
 8001c28:	7013      	strb	r3, [r2, #0]
}
 8001c2a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		for(int i=0;i<3;i++)
 8001c2c:	3501      	adds	r5, #1
 8001c2e:	2d03      	cmp	r5, #3
 8001c30:	d1f3      	bne.n	8001c1a <GetDisplayData+0x3a>
		HAL_UART_Transmit(&huart3,"SD1",3,250);
 8001c32:	002a      	movs	r2, r5
 8001c34:	23fa      	movs	r3, #250	; 0xfa
 8001c36:	4932      	ldr	r1, [pc, #200]	; (8001d00 <GetDisplayData+0x120>)
 8001c38:	0020      	movs	r0, r4
 8001c3a:	f7ff fcc5 	bl	80015c8 <HAL_UART_Transmit>
		HAL_UART_Receive(&huart3, displayBufferLine1, sizeof(displayBufferLine1), 1000);
 8001c3e:	23fa      	movs	r3, #250	; 0xfa
 8001c40:	4f30      	ldr	r7, [pc, #192]	; (8001d04 <GetDisplayData+0x124>)
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	0039      	movs	r1, r7
 8001c46:	2212      	movs	r2, #18
 8001c48:	0020      	movs	r0, r4
 8001c4a:	f7ff fd23 	bl	8001694 <HAL_UART_Receive>
		HAL_UART_Transmit(&huart3,"SD2",3,250);
 8001c4e:	002a      	movs	r2, r5
 8001c50:	23fa      	movs	r3, #250	; 0xfa
 8001c52:	492d      	ldr	r1, [pc, #180]	; (8001d08 <GetDisplayData+0x128>)
 8001c54:	0020      	movs	r0, r4
 8001c56:	f7ff fcb7 	bl	80015c8 <HAL_UART_Transmit>
		HAL_UART_Receive(&huart3, displayBufferLine2, sizeof(displayBufferLine2), 1000);
 8001c5a:	23fa      	movs	r3, #250	; 0xfa
 8001c5c:	4e2b      	ldr	r6, [pc, #172]	; (8001d0c <GetDisplayData+0x12c>)
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	0031      	movs	r1, r6
 8001c62:	2212      	movs	r2, #18
 8001c64:	0020      	movs	r0, r4
 8001c66:	f7ff fd15 	bl	8001694 <HAL_UART_Receive>
		HAL_UART_Transmit(&huart3,"SD3",3,250);
 8001c6a:	002a      	movs	r2, r5
 8001c6c:	23fa      	movs	r3, #250	; 0xfa
 8001c6e:	4928      	ldr	r1, [pc, #160]	; (8001d10 <GetDisplayData+0x130>)
 8001c70:	0020      	movs	r0, r4
 8001c72:	f7ff fca9 	bl	80015c8 <HAL_UART_Transmit>
		HAL_UART_Receive(&huart3, displayBufferLine3, sizeof(displayBufferLine3), 1000);
 8001c76:	23fa      	movs	r3, #250	; 0xfa
 8001c78:	2212      	movs	r2, #18
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	4925      	ldr	r1, [pc, #148]	; (8001d14 <GetDisplayData+0x134>)
 8001c7e:	0020      	movs	r0, r4
 8001c80:	f7ff fd08 	bl	8001694 <HAL_UART_Receive>
		HAL_UART_Transmit(&huart3,"SD4",3,250);
 8001c84:	002a      	movs	r2, r5
 8001c86:	23fa      	movs	r3, #250	; 0xfa
 8001c88:	4923      	ldr	r1, [pc, #140]	; (8001d18 <GetDisplayData+0x138>)
 8001c8a:	0020      	movs	r0, r4
 8001c8c:	f7ff fc9c 	bl	80015c8 <HAL_UART_Transmit>
		HAL_UART_Receive(&huart3, displayBufferLine4, sizeof(displayBufferLine4), 1000);
 8001c90:	23fa      	movs	r3, #250	; 0xfa
 8001c92:	4d22      	ldr	r5, [pc, #136]	; (8001d1c <GetDisplayData+0x13c>)
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	2212      	movs	r2, #18
 8001c98:	0029      	movs	r1, r5
 8001c9a:	0020      	movs	r0, r4
 8001c9c:	f7ff fcfa 	bl	8001694 <HAL_UART_Receive>
		SSD1306_GotoXY(0,20);
 8001ca0:	2114      	movs	r1, #20
 8001ca2:	2000      	movs	r0, #0
 8001ca4:	f000 faa8 	bl	80021f8 <SSD1306_GotoXY>
		SSD1306_Puts((char *)displayBufferLine1, &Font_7x10 , 1);
 8001ca8:	4c1d      	ldr	r4, [pc, #116]	; (8001d20 <GetDisplayData+0x140>)
 8001caa:	2201      	movs	r2, #1
 8001cac:	0021      	movs	r1, r4
 8001cae:	0038      	movs	r0, r7
 8001cb0:	f000 faf4 	bl	800229c <SSD1306_Puts>
		SSD1306_GotoXY(0,30);
 8001cb4:	211e      	movs	r1, #30
 8001cb6:	2000      	movs	r0, #0
 8001cb8:	f000 fa9e 	bl	80021f8 <SSD1306_GotoXY>
		SSD1306_Puts((char *)displayBufferLine2, &Font_7x10 , 1);
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	0021      	movs	r1, r4
 8001cc0:	0030      	movs	r0, r6
 8001cc2:	f000 faeb 	bl	800229c <SSD1306_Puts>
		SSD1306_GotoXY(0,40);
 8001cc6:	2128      	movs	r1, #40	; 0x28
 8001cc8:	2000      	movs	r0, #0
 8001cca:	f000 fa95 	bl	80021f8 <SSD1306_GotoXY>
		SSD1306_Puts((char *)displayBufferLine3, &Font_7x10 , 1);
 8001cce:	2201      	movs	r2, #1
 8001cd0:	0021      	movs	r1, r4
 8001cd2:	4810      	ldr	r0, [pc, #64]	; (8001d14 <GetDisplayData+0x134>)
 8001cd4:	f000 fae2 	bl	800229c <SSD1306_Puts>
		SSD1306_GotoXY(0,50);
 8001cd8:	2132      	movs	r1, #50	; 0x32
 8001cda:	2000      	movs	r0, #0
 8001cdc:	f000 fa8c 	bl	80021f8 <SSD1306_GotoXY>
		SSD1306_Puts((char *)displayBufferLine4, &Font_7x10 , 1);
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	0021      	movs	r1, r4
 8001ce4:	0028      	movs	r0, r5
 8001ce6:	f000 fad9 	bl	800229c <SSD1306_Puts>
 8001cea:	e79e      	b.n	8001c2a <GetDisplayData+0x4a>
 8001cec:	20000073 	.word	0x20000073
 8001cf0:	20000488 	.word	0x20000488
 8001cf4:	080033b0 	.word	0x080033b0
 8001cf8:	20000070 	.word	0x20000070
 8001cfc:	20000074 	.word	0x20000074
 8001d00:	080033b4 	.word	0x080033b4
 8001d04:	20000028 	.word	0x20000028
 8001d08:	080033b8 	.word	0x080033b8
 8001d0c:	2000003a 	.word	0x2000003a
 8001d10:	080033bc 	.word	0x080033bc
 8001d14:	2000004c 	.word	0x2000004c
 8001d18:	080033c0 	.word	0x080033c0
 8001d1c:	2000005e 	.word	0x2000005e
 8001d20:	20000000 	.word	0x20000000

08001d24 <CheckSDD>:
	if(isConnected==true)
 8001d24:	4b09      	ldr	r3, [pc, #36]	; (8001d4c <CheckSDD+0x28>)
{
 8001d26:	b510      	push	{r4, lr}
	if(isConnected==true)
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d10d      	bne.n	8001d4a <CheckSDD+0x26>
		HAL_UART_Transmit(&huart3,"OK1",3,250);
 8001d2e:	4c08      	ldr	r4, [pc, #32]	; (8001d50 <CheckSDD+0x2c>)
 8001d30:	33f9      	adds	r3, #249	; 0xf9
 8001d32:	2203      	movs	r2, #3
 8001d34:	4907      	ldr	r1, [pc, #28]	; (8001d54 <CheckSDD+0x30>)
 8001d36:	0020      	movs	r0, r4
 8001d38:	f7ff fc46 	bl	80015c8 <HAL_UART_Transmit>
		HAL_UART_Receive(&huart3, instReceived, 3, 1000);
 8001d3c:	23fa      	movs	r3, #250	; 0xfa
 8001d3e:	2203      	movs	r2, #3
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	4905      	ldr	r1, [pc, #20]	; (8001d58 <CheckSDD+0x34>)
 8001d44:	0020      	movs	r0, r4
 8001d46:	f7ff fca5 	bl	8001694 <HAL_UART_Receive>
}
 8001d4a:	bd10      	pop	{r4, pc}
 8001d4c:	20000073 	.word	0x20000073
 8001d50:	20000488 	.word	0x20000488
 8001d54:	080033a4 	.word	0x080033a4
 8001d58:	20000070 	.word	0x20000070

08001d5c <testt>:
	if(isConnected==true)
 8001d5c:	4b09      	ldr	r3, [pc, #36]	; (8001d84 <testt+0x28>)
{
 8001d5e:	b510      	push	{r4, lr}
	if(isConnected==true)
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d10d      	bne.n	8001d82 <testt+0x26>
		HAL_UART_Transmit(&huart3,"ERR",3,250);
 8001d66:	4c08      	ldr	r4, [pc, #32]	; (8001d88 <testt+0x2c>)
 8001d68:	33f9      	adds	r3, #249	; 0xf9
 8001d6a:	2203      	movs	r2, #3
 8001d6c:	4907      	ldr	r1, [pc, #28]	; (8001d8c <testt+0x30>)
 8001d6e:	0020      	movs	r0, r4
 8001d70:	f7ff fc2a 	bl	80015c8 <HAL_UART_Transmit>
		HAL_UART_Receive(&huart3, instReceived, 3, 1000);
 8001d74:	23fa      	movs	r3, #250	; 0xfa
 8001d76:	2203      	movs	r2, #3
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	4905      	ldr	r1, [pc, #20]	; (8001d90 <testt+0x34>)
 8001d7c:	0020      	movs	r0, r4
 8001d7e:	f7ff fc89 	bl	8001694 <HAL_UART_Receive>
}
 8001d82:	bd10      	pop	{r4, pc}
 8001d84:	20000073 	.word	0x20000073
 8001d88:	20000488 	.word	0x20000488
 8001d8c:	080033d6 	.word	0x080033d6
 8001d90:	20000070 	.word	0x20000070

08001d94 <SSD1306_RefreshUI>:
	SSD1306_DrawFilledRectangle(115,20,10,60,0);
 8001d94:	2300      	movs	r3, #0
{
 8001d96:	b507      	push	{r0, r1, r2, lr}
	SSD1306_DrawFilledRectangle(115,20,10,60,0);
 8001d98:	220a      	movs	r2, #10
 8001d9a:	9300      	str	r3, [sp, #0]
 8001d9c:	2114      	movs	r1, #20
 8001d9e:	333c      	adds	r3, #60	; 0x3c
 8001da0:	2073      	movs	r0, #115	; 0x73
 8001da2:	f000 fb2e 	bl	8002402 <SSD1306_DrawFilledRectangle>
	SSD1306_DrawCircle(120,25,4,1);
 8001da6:	2301      	movs	r3, #1
 8001da8:	2204      	movs	r2, #4
 8001daa:	2119      	movs	r1, #25
 8001dac:	2078      	movs	r0, #120	; 0x78
 8001dae:	f000 fb57 	bl	8002460 <SSD1306_DrawCircle>
    SSD1306_DrawCircle(120,35,4,1);
 8001db2:	2301      	movs	r3, #1
 8001db4:	2204      	movs	r2, #4
 8001db6:	2123      	movs	r1, #35	; 0x23
 8001db8:	2078      	movs	r0, #120	; 0x78
 8001dba:	f000 fb51 	bl	8002460 <SSD1306_DrawCircle>
    SSD1306_DrawCircle(120,45,4,1);
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	2204      	movs	r2, #4
 8001dc2:	212d      	movs	r1, #45	; 0x2d
 8001dc4:	2078      	movs	r0, #120	; 0x78
 8001dc6:	f000 fb4b 	bl	8002460 <SSD1306_DrawCircle>
    SSD1306_DrawCircle(120,55,4,1);
 8001dca:	2301      	movs	r3, #1
 8001dcc:	2204      	movs	r2, #4
 8001dce:	2137      	movs	r1, #55	; 0x37
 8001dd0:	2078      	movs	r0, #120	; 0x78
 8001dd2:	f000 fb45 	bl	8002460 <SSD1306_DrawCircle>
    SSD1306_UpdateScreen();
 8001dd6:	f000 fca3 	bl	8002720 <SSD1306_UpdateScreen>
}
 8001dda:	bd07      	pop	{r0, r1, r2, pc}

08001ddc <HAL_GPIO_EXTI_Callback>:
	if(GPIO_Pin == GPIO_PIN_13)
 8001ddc:	2380      	movs	r3, #128	; 0x80
{
 8001dde:	b570      	push	{r4, r5, r6, lr}
	if(GPIO_Pin == GPIO_PIN_13)
 8001de0:	019b      	lsls	r3, r3, #6
 8001de2:	4298      	cmp	r0, r3
 8001de4:	d122      	bne.n	8001e2c <HAL_GPIO_EXTI_Callback+0x50>
		if(selected==0)
 8001de6:	4c2c      	ldr	r4, [pc, #176]	; (8001e98 <HAL_GPIO_EXTI_Callback+0xbc>)
 8001de8:	7823      	ldrb	r3, [r4, #0]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d110      	bne.n	8001e10 <HAL_GPIO_EXTI_Callback+0x34>
			HAL_UART_Transmit(&huart3,"GD1",3,250);
 8001dee:	4d2b      	ldr	r5, [pc, #172]	; (8001e9c <HAL_GPIO_EXTI_Callback+0xc0>)
 8001df0:	33fa      	adds	r3, #250	; 0xfa
 8001df2:	2203      	movs	r2, #3
 8001df4:	492a      	ldr	r1, [pc, #168]	; (8001ea0 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001df6:	0028      	movs	r0, r5
 8001df8:	f7ff fbe6 	bl	80015c8 <HAL_UART_Transmit>
			HAL_UART_Receive(&huart3, instReceived, 3, 1000);
 8001dfc:	23fa      	movs	r3, #250	; 0xfa
 8001dfe:	2203      	movs	r2, #3
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	4928      	ldr	r1, [pc, #160]	; (8001ea4 <HAL_GPIO_EXTI_Callback+0xc8>)
 8001e04:	0028      	movs	r0, r5
 8001e06:	f7ff fc45 	bl	8001694 <HAL_UART_Receive>
			sendSelected=1;
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	4b26      	ldr	r3, [pc, #152]	; (8001ea8 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001e0e:	701a      	strb	r2, [r3, #0]
		if(selected==1)
 8001e10:	7823      	ldrb	r3, [r4, #0]
			sendSelected=2;
 8001e12:	2202      	movs	r2, #2
		if(selected==1)
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d002      	beq.n	8001e1e <HAL_GPIO_EXTI_Callback+0x42>
		if(selected==2)
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d103      	bne.n	8001e24 <HAL_GPIO_EXTI_Callback+0x48>
			sendSelected=3;
 8001e1c:	2203      	movs	r2, #3
 8001e1e:	4b22      	ldr	r3, [pc, #136]	; (8001ea8 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001e20:	701a      	strb	r2, [r3, #0]
}
 8001e22:	bd70      	pop	{r4, r5, r6, pc}
			sendSelected=4;
 8001e24:	2204      	movs	r2, #4
		if(selected==3)
 8001e26:	2b03      	cmp	r3, #3
 8001e28:	d0f9      	beq.n	8001e1e <HAL_GPIO_EXTI_Callback+0x42>
 8001e2a:	e7fa      	b.n	8001e22 <HAL_GPIO_EXTI_Callback+0x46>
	if(GPIO_Pin == GPIO_PIN_9)
 8001e2c:	2380      	movs	r3, #128	; 0x80
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	4298      	cmp	r0, r3
 8001e32:	d1f6      	bne.n	8001e22 <HAL_GPIO_EXTI_Callback+0x46>
		selected++;
 8001e34:	4c18      	ldr	r4, [pc, #96]	; (8001e98 <HAL_GPIO_EXTI_Callback+0xbc>)
 8001e36:	7823      	ldrb	r3, [r4, #0]
 8001e38:	3301      	adds	r3, #1
 8001e3a:	b2db      	uxtb	r3, r3
		if(selected>3)
 8001e3c:	2b03      	cmp	r3, #3
 8001e3e:	d828      	bhi.n	8001e92 <HAL_GPIO_EXTI_Callback+0xb6>
			selected=0;
 8001e40:	7023      	strb	r3, [r4, #0]
		SSD1306_RefreshUI();
 8001e42:	f7ff ffa7 	bl	8001d94 <SSD1306_RefreshUI>
		if(selected==0)
 8001e46:	7823      	ldrb	r3, [r4, #0]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d105      	bne.n	8001e58 <HAL_GPIO_EXTI_Callback+0x7c>
			SSD1306_DrawFilledCircle(120,25,4,1);
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	2204      	movs	r2, #4
 8001e50:	2119      	movs	r1, #25
 8001e52:	2078      	movs	r0, #120	; 0x78
 8001e54:	f000 fba1 	bl	800259a <SSD1306_DrawFilledCircle>
		if(selected==1)
 8001e58:	7823      	ldrb	r3, [r4, #0]
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d104      	bne.n	8001e68 <HAL_GPIO_EXTI_Callback+0x8c>
			SSD1306_DrawFilledCircle(120,35,4,1);
 8001e5e:	2204      	movs	r2, #4
 8001e60:	2123      	movs	r1, #35	; 0x23
 8001e62:	2078      	movs	r0, #120	; 0x78
 8001e64:	f000 fb99 	bl	800259a <SSD1306_DrawFilledCircle>
		if(selected==2)
 8001e68:	7823      	ldrb	r3, [r4, #0]
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d105      	bne.n	8001e7a <HAL_GPIO_EXTI_Callback+0x9e>
			SSD1306_DrawFilledCircle(120,45,4,1);
 8001e6e:	3b01      	subs	r3, #1
 8001e70:	2204      	movs	r2, #4
 8001e72:	212d      	movs	r1, #45	; 0x2d
 8001e74:	2078      	movs	r0, #120	; 0x78
 8001e76:	f000 fb90 	bl	800259a <SSD1306_DrawFilledCircle>
		if(selected==3)
 8001e7a:	7823      	ldrb	r3, [r4, #0]
 8001e7c:	2b03      	cmp	r3, #3
 8001e7e:	d105      	bne.n	8001e8c <HAL_GPIO_EXTI_Callback+0xb0>
			SSD1306_DrawFilledCircle(120,55,4,1);
 8001e80:	3b02      	subs	r3, #2
 8001e82:	2204      	movs	r2, #4
 8001e84:	2137      	movs	r1, #55	; 0x37
 8001e86:	2078      	movs	r0, #120	; 0x78
 8001e88:	f000 fb87 	bl	800259a <SSD1306_DrawFilledCircle>
		SSD1306_UpdateScreen();
 8001e8c:	f000 fc48 	bl	8002720 <SSD1306_UpdateScreen>
}
 8001e90:	e7c7      	b.n	8001e22 <HAL_GPIO_EXTI_Callback+0x46>
			selected=0;
 8001e92:	2300      	movs	r3, #0
 8001e94:	e7d4      	b.n	8001e40 <HAL_GPIO_EXTI_Callback+0x64>
 8001e96:	46c0      	nop			; (mov r8, r8)
 8001e98:	20000548 	.word	0x20000548
 8001e9c:	20000488 	.word	0x20000488
 8001ea0:	080033ac 	.word	0x080033ac
 8001ea4:	20000070 	.word	0x20000070
 8001ea8:	200004f8 	.word	0x200004f8

08001eac <DownloadFirstPattern>:
	if(isConnected==true)
 8001eac:	4b0b      	ldr	r3, [pc, #44]	; (8001edc <DownloadFirstPattern+0x30>)
{
 8001eae:	b510      	push	{r4, lr}
	if(isConnected==true)
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d110      	bne.n	8001ed8 <DownloadFirstPattern+0x2c>
		HAL_UART_Transmit(&huart3,"GD1",3,250);
 8001eb6:	4c0a      	ldr	r4, [pc, #40]	; (8001ee0 <DownloadFirstPattern+0x34>)
 8001eb8:	33f9      	adds	r3, #249	; 0xf9
 8001eba:	2203      	movs	r2, #3
 8001ebc:	4909      	ldr	r1, [pc, #36]	; (8001ee4 <DownloadFirstPattern+0x38>)
 8001ebe:	0020      	movs	r0, r4
 8001ec0:	f7ff fb82 	bl	80015c8 <HAL_UART_Transmit>
		HAL_UART_Receive(&huart3, instReceived, 3, 1000);
 8001ec4:	23fa      	movs	r3, #250	; 0xfa
 8001ec6:	2203      	movs	r2, #3
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	4907      	ldr	r1, [pc, #28]	; (8001ee8 <DownloadFirstPattern+0x3c>)
 8001ecc:	0020      	movs	r0, r4
 8001ece:	f7ff fbe1 	bl	8001694 <HAL_UART_Receive>
		sendSelected=0;
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	4b05      	ldr	r3, [pc, #20]	; (8001eec <DownloadFirstPattern+0x40>)
 8001ed6:	701a      	strb	r2, [r3, #0]
}
 8001ed8:	bd10      	pop	{r4, pc}
 8001eda:	46c0      	nop			; (mov r8, r8)
 8001edc:	20000073 	.word	0x20000073
 8001ee0:	20000488 	.word	0x20000488
 8001ee4:	080033ac 	.word	0x080033ac
 8001ee8:	20000070 	.word	0x20000070
 8001eec:	200004f8 	.word	0x200004f8

08001ef0 <DownloadSecondPattern>:
	if(isConnected==true)
 8001ef0:	4b03      	ldr	r3, [pc, #12]	; (8001f00 <DownloadSecondPattern+0x10>)
{
 8001ef2:	b510      	push	{r4, lr}
	if(isConnected==true)
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d101      	bne.n	8001efe <DownloadSecondPattern+0xe>
 8001efa:	f7ff fddb 	bl	8001ab4 <DownloadFourthPattern.part.7>
}
 8001efe:	bd10      	pop	{r4, pc}
 8001f00:	20000073 	.word	0x20000073

08001f04 <DownloadThirdPattern>:
	if(isConnected==true)
 8001f04:	4b03      	ldr	r3, [pc, #12]	; (8001f14 <DownloadThirdPattern+0x10>)
{
 8001f06:	b510      	push	{r4, lr}
	if(isConnected==true)
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d101      	bne.n	8001f12 <DownloadThirdPattern+0xe>
 8001f0e:	f7ff fdd1 	bl	8001ab4 <DownloadFourthPattern.part.7>
}
 8001f12:	bd10      	pop	{r4, pc}
 8001f14:	20000073 	.word	0x20000073

08001f18 <DownloadFourthPattern>:
	if(isConnected==true)
 8001f18:	4b03      	ldr	r3, [pc, #12]	; (8001f28 <DownloadFourthPattern+0x10>)
{
 8001f1a:	b510      	push	{r4, lr}
	if(isConnected==true)
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d101      	bne.n	8001f26 <DownloadFourthPattern+0xe>
 8001f22:	f7ff fdc7 	bl	8001ab4 <DownloadFourthPattern.part.7>
}
 8001f26:	bd10      	pop	{r4, pc}
 8001f28:	20000073 	.word	0x20000073

08001f2c <main>:
{
 8001f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f2e:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 8001f30:	f7fe f99c 	bl	800026c <HAL_Init>
  SystemClock_Config();
 8001f34:	f7ff fdd0 	bl	8001ad8 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f38:	2214      	movs	r2, #20
 8001f3a:	2100      	movs	r1, #0
 8001f3c:	a803      	add	r0, sp, #12
 8001f3e:	f000 fe52 	bl	8002be6 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f42:	2080      	movs	r0, #128	; 0x80
 8001f44:	4b7e      	ldr	r3, [pc, #504]	; (8002140 <main+0x214>)
 8001f46:	0300      	lsls	r0, r0, #12
 8001f48:	6959      	ldr	r1, [r3, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4a:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f4c:	4301      	orrs	r1, r0
 8001f4e:	6159      	str	r1, [r3, #20]
 8001f50:	695a      	ldr	r2, [r3, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f52:	4f7c      	ldr	r7, [pc, #496]	; (8002144 <main+0x218>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f54:	4002      	ands	r2, r0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f56:	2080      	movs	r0, #128	; 0x80
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f58:	9200      	str	r2, [sp, #0]
 8001f5a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f5c:	6959      	ldr	r1, [r3, #20]
 8001f5e:	0280      	lsls	r0, r0, #10
 8001f60:	4301      	orrs	r1, r0
 8001f62:	6159      	str	r1, [r3, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f64:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f66:	695a      	ldr	r2, [r3, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f68:	02c9      	lsls	r1, r1, #11
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f6a:	4002      	ands	r2, r0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001f6c:	2090      	movs	r0, #144	; 0x90
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f6e:	9201      	str	r2, [sp, #4]
 8001f70:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f72:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001f74:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f76:	430a      	orrs	r2, r1
 8001f78:	615a      	str	r2, [r3, #20]
 8001f7a:	695b      	ldr	r3, [r3, #20]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001f7c:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f7e:	400b      	ands	r3, r1
 8001f80:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001f82:	2120      	movs	r1, #32
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f84:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001f86:	f7fe fac3 	bl	8000510 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001f8a:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f8c:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001f8e:	019b      	lsls	r3, r3, #6
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f90:	486d      	ldr	r0, [pc, #436]	; (8002148 <main+0x21c>)
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001f92:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f94:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f96:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f98:	f7fe f9fe 	bl	8000398 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f9c:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f9e:	2601      	movs	r6, #1
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001fa0:	2320      	movs	r3, #32
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fa2:	a903      	add	r1, sp, #12
 8001fa4:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001fa6:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fa8:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001faa:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fac:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001fae:	2580      	movs	r5, #128	; 0x80
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fb0:	f7fe f9f2 	bl	8000398 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fb4:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001fb6:	2302      	movs	r3, #2
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001fb8:	00ad      	lsls	r5, r5, #2
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fba:	a903      	add	r1, sp, #12
 8001fbc:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001fbe:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001fc0:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001fc2:	9704      	str	r7, [sp, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fc4:	f7fe f9e8 	bl	8000398 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8001fc8:	0022      	movs	r2, r4
 8001fca:	0021      	movs	r1, r4
 8001fcc:	2007      	movs	r0, #7
 8001fce:	f7fe f96b 	bl	80002a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8001fd2:	2007      	movs	r0, #7
 8001fd4:	f7fe f998 	bl	8000308 <HAL_NVIC_EnableIRQ>
  hi2c1.Instance = I2C1;
 8001fd8:	4f5c      	ldr	r7, [pc, #368]	; (800214c <main+0x220>)
 8001fda:	4b5d      	ldr	r3, [pc, #372]	; (8002150 <main+0x224>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001fdc:	0038      	movs	r0, r7
  hi2c1.Instance = I2C1;
 8001fde:	603b      	str	r3, [r7, #0]
  hi2c1.Init.Timing = 0x0000020B;
 8001fe0:	4b5c      	ldr	r3, [pc, #368]	; (8002154 <main+0x228>)
  hi2c1.Init.OwnAddress1 = 0;
 8001fe2:	60bc      	str	r4, [r7, #8]
  hi2c1.Init.Timing = 0x0000020B;
 8001fe4:	607b      	str	r3, [r7, #4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fe6:	60fe      	str	r6, [r7, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001fe8:	613c      	str	r4, [r7, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001fea:	617c      	str	r4, [r7, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001fec:	61bc      	str	r4, [r7, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001fee:	61fc      	str	r4, [r7, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ff0:	623c      	str	r4, [r7, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ff2:	f7fe fb7d 	bl	80006f0 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001ff6:	0021      	movs	r1, r4
 8001ff8:	0038      	movs	r0, r7
 8001ffa:	f7fe fcfd 	bl	80009f8 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001ffe:	0021      	movs	r1, r4
 8002000:	0038      	movs	r0, r7
 8002002:	f7fe fd1f 	bl	8000a44 <HAL_I2CEx_ConfigDigitalFilter>
  hspi1.Instance = SPI1;
 8002006:	4854      	ldr	r0, [pc, #336]	; (8002158 <main+0x22c>)
 8002008:	4b54      	ldr	r3, [pc, #336]	; (800215c <main+0x230>)
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800200a:	6185      	str	r5, [r0, #24]
  hspi1.Instance = SPI1;
 800200c:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800200e:	2382      	movs	r3, #130	; 0x82
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	6043      	str	r3, [r0, #4]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002014:	23e0      	movs	r3, #224	; 0xe0
 8002016:	00db      	lsls	r3, r3, #3
 8002018:	60c3      	str	r3, [r0, #12]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800201a:	2310      	movs	r3, #16
 800201c:	61c3      	str	r3, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 800201e:	3370      	adds	r3, #112	; 0x70
 8002020:	6203      	str	r3, [r0, #32]
  hspi1.Init.CRCPolynomial = 7;
 8002022:	3b79      	subs	r3, #121	; 0x79
 8002024:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002026:	199b      	adds	r3, r3, r6
 8002028:	6343      	str	r3, [r0, #52]	; 0x34
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800202a:	6084      	str	r4, [r0, #8]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800202c:	6104      	str	r4, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800202e:	6144      	str	r4, [r0, #20]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002030:	6244      	str	r4, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002032:	6284      	str	r4, [r0, #40]	; 0x28
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002034:	6304      	str	r4, [r0, #48]	; 0x30
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002036:	f7ff f8fb 	bl	8001230 <HAL_SPI_Init>
  huart2.Instance = USART2;
 800203a:	4849      	ldr	r0, [pc, #292]	; (8002160 <main+0x234>)
 800203c:	4b49      	ldr	r3, [pc, #292]	; (8002164 <main+0x238>)
  huart2.Init.Mode = UART_MODE_TX_RX;
 800203e:	270c      	movs	r7, #12
  huart2.Instance = USART2;
 8002040:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 9600;
 8002042:	2396      	movs	r3, #150	; 0x96
 8002044:	019b      	lsls	r3, r3, #6
 8002046:	6043      	str	r3, [r0, #4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002048:	6147      	str	r7, [r0, #20]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800204a:	6084      	str	r4, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800204c:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800204e:	6104      	str	r4, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002050:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002052:	61c4      	str	r4, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002054:	6204      	str	r4, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002056:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002058:	f7ff fbda 	bl	8001810 <HAL_UART_Init>
  huart3.Instance = USART3;
 800205c:	4d42      	ldr	r5, [pc, #264]	; (8002168 <main+0x23c>)
 800205e:	4b43      	ldr	r3, [pc, #268]	; (800216c <main+0x240>)
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002060:	0028      	movs	r0, r5
  huart3.Instance = USART3;
 8002062:	602b      	str	r3, [r5, #0]
  huart3.Init.BaudRate = 1200;
 8002064:	2396      	movs	r3, #150	; 0x96
 8002066:	00db      	lsls	r3, r3, #3
 8002068:	606b      	str	r3, [r5, #4]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800206a:	616f      	str	r7, [r5, #20]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800206c:	60ac      	str	r4, [r5, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800206e:	60ec      	str	r4, [r5, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002070:	612c      	str	r4, [r5, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002072:	61ac      	str	r4, [r5, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002074:	61ec      	str	r4, [r5, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002076:	622c      	str	r4, [r5, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002078:	626c      	str	r4, [r5, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800207a:	f7ff fbc9 	bl	8001810 <HAL_UART_Init>
  selected=-1;
 800207e:	22ff      	movs	r2, #255	; 0xff
  isConnecting = false;
 8002080:	4b3b      	ldr	r3, [pc, #236]	; (8002170 <main+0x244>)
  sendSelected=0;
 8002082:	4f3c      	ldr	r7, [pc, #240]	; (8002174 <main+0x248>)
  isConnecting = false;
 8002084:	701c      	strb	r4, [r3, #0]
  isConnected = false;
 8002086:	4b3c      	ldr	r3, [pc, #240]	; (8002178 <main+0x24c>)
  sendSelected=0;
 8002088:	703c      	strb	r4, [r7, #0]
  isConnected = false;
 800208a:	701c      	strb	r4, [r3, #0]
  step=0;
 800208c:	4b3b      	ldr	r3, [pc, #236]	; (800217c <main+0x250>)
 800208e:	701c      	strb	r4, [r3, #0]
  selected=-1;
 8002090:	4b3b      	ldr	r3, [pc, #236]	; (8002180 <main+0x254>)
 8002092:	701a      	strb	r2, [r3, #0]
  SSD1306_Init ();
 8002094:	f000 fb68 	bl	8002768 <SSD1306_Init>
  SSD1306_Fill (0);  // fill the display with black color
 8002098:	0020      	movs	r0, r4
 800209a:	f000 f87b 	bl	8002194 <SSD1306_Fill>
  SSD1306_GotoXY(0,0);
 800209e:	0021      	movs	r1, r4
 80020a0:	0020      	movs	r0, r4
 80020a2:	f000 f8a9 	bl	80021f8 <SSD1306_GotoXY>
  SSD1306_Puts("Test wirelessUART", &Font_7x10 , 1);
 80020a6:	0032      	movs	r2, r6
 80020a8:	4936      	ldr	r1, [pc, #216]	; (8002184 <main+0x258>)
 80020aa:	4837      	ldr	r0, [pc, #220]	; (8002188 <main+0x25c>)
 80020ac:	f000 f8f6 	bl	800229c <SSD1306_Puts>
  SSD1306_DrawCircle(120,25,4,1);
 80020b0:	0033      	movs	r3, r6
 80020b2:	2204      	movs	r2, #4
 80020b4:	2119      	movs	r1, #25
 80020b6:	2078      	movs	r0, #120	; 0x78
 80020b8:	f000 f9d2 	bl	8002460 <SSD1306_DrawCircle>
  SSD1306_DrawCircle(120,35,4,1);
 80020bc:	0033      	movs	r3, r6
 80020be:	2204      	movs	r2, #4
 80020c0:	2123      	movs	r1, #35	; 0x23
 80020c2:	2078      	movs	r0, #120	; 0x78
 80020c4:	f000 f9cc 	bl	8002460 <SSD1306_DrawCircle>
  SSD1306_DrawCircle(120,45,4,1);
 80020c8:	0033      	movs	r3, r6
 80020ca:	2204      	movs	r2, #4
 80020cc:	212d      	movs	r1, #45	; 0x2d
 80020ce:	2078      	movs	r0, #120	; 0x78
 80020d0:	f000 f9c6 	bl	8002460 <SSD1306_DrawCircle>
  SSD1306_DrawCircle(120,55,4,1);
 80020d4:	0033      	movs	r3, r6
 80020d6:	2204      	movs	r2, #4
 80020d8:	2137      	movs	r1, #55	; 0x37
 80020da:	2078      	movs	r0, #120	; 0x78
 80020dc:	f000 f9c0 	bl	8002460 <SSD1306_DrawCircle>
  SSD1306_UpdateScreen();
 80020e0:	f000 fb1e 	bl	8002720 <SSD1306_UpdateScreen>
  ConnectToArduino();
 80020e4:	f7ff fd5e 	bl	8001ba4 <ConnectToArduino>
  CheckACK();
 80020e8:	f7ff fd24 	bl	8001b34 <CheckACK>
  GetDisplayData();
 80020ec:	f7ff fd78 	bl	8001be0 <GetDisplayData>
  CheckSDD();
 80020f0:	f7ff fe18 	bl	8001d24 <CheckSDD>
  testt();
 80020f4:	f7ff fe32 	bl	8001d5c <testt>
  HAL_UART_Transmit(&huart3,"ACK",3,250);
 80020f8:	23fa      	movs	r3, #250	; 0xfa
 80020fa:	2203      	movs	r2, #3
 80020fc:	4923      	ldr	r1, [pc, #140]	; (800218c <main+0x260>)
 80020fe:	0028      	movs	r0, r5
 8002100:	f7ff fa62 	bl	80015c8 <HAL_UART_Transmit>
  HAL_UART_Receive(&huart3, instReceived, 3, 1000);
 8002104:	23fa      	movs	r3, #250	; 0xfa
 8002106:	2203      	movs	r2, #3
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	4921      	ldr	r1, [pc, #132]	; (8002190 <main+0x264>)
 800210c:	0028      	movs	r0, r5
 800210e:	f7ff fac1 	bl	8001694 <HAL_UART_Receive>
  SSD1306_RefreshUI();
 8002112:	f7ff fe3f 	bl	8001d94 <SSD1306_RefreshUI>
	  if(sendSelected==1)
 8002116:	783b      	ldrb	r3, [r7, #0]
 8002118:	2b01      	cmp	r3, #1
 800211a:	d101      	bne.n	8002120 <main+0x1f4>
		  DownloadFirstPattern();
 800211c:	f7ff fec6 	bl	8001eac <DownloadFirstPattern>
	  if(sendSelected==2)
 8002120:	783b      	ldrb	r3, [r7, #0]
 8002122:	2b02      	cmp	r3, #2
 8002124:	d101      	bne.n	800212a <main+0x1fe>
		  DownloadSecondPattern();
 8002126:	f7ff fee3 	bl	8001ef0 <DownloadSecondPattern>
	  if(sendSelected==3)
 800212a:	783b      	ldrb	r3, [r7, #0]
 800212c:	2b03      	cmp	r3, #3
 800212e:	d101      	bne.n	8002134 <main+0x208>
		  DownloadThirdPattern();
 8002130:	f7ff fee8 	bl	8001f04 <DownloadThirdPattern>
	  if(sendSelected==4)
 8002134:	783b      	ldrb	r3, [r7, #0]
 8002136:	2b04      	cmp	r3, #4
 8002138:	d1ed      	bne.n	8002116 <main+0x1ea>
		  DownloadFourthPattern();
 800213a:	f7ff feed 	bl	8001f18 <DownloadFourthPattern>
 800213e:	e7ea      	b.n	8002116 <main+0x1ea>
 8002140:	40021000 	.word	0x40021000
 8002144:	10110000 	.word	0x10110000
 8002148:	48000800 	.word	0x48000800
 800214c:	200004fc 	.word	0x200004fc
 8002150:	40005400 	.word	0x40005400
 8002154:	0000020b 	.word	0x0000020b
 8002158:	2000054c 	.word	0x2000054c
 800215c:	40013000 	.word	0x40013000
 8002160:	200005b0 	.word	0x200005b0
 8002164:	40004400 	.word	0x40004400
 8002168:	20000488 	.word	0x20000488
 800216c:	40004800 	.word	0x40004800
 8002170:	20000074 	.word	0x20000074
 8002174:	200004f8 	.word	0x200004f8
 8002178:	20000073 	.word	0x20000073
 800217c:	20000549 	.word	0x20000549
 8002180:	20000548 	.word	0x20000548
 8002184:	20000000 	.word	0x20000000
 8002188:	080033c4 	.word	0x080033c4
 800218c:	080033a0 	.word	0x080033a0
 8002190:	20000070 	.word	0x20000070

08002194 <SSD1306_Fill>:
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002194:	2100      	movs	r1, #0
void SSD1306_Fill(SSD1306_COLOR_t color) {
 8002196:	b510      	push	{r4, lr}
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002198:	4288      	cmp	r0, r1
 800219a:	d000      	beq.n	800219e <SSD1306_Fill+0xa>
 800219c:	31ff      	adds	r1, #255	; 0xff
 800219e:	2281      	movs	r2, #129	; 0x81
 80021a0:	4802      	ldr	r0, [pc, #8]	; (80021ac <SSD1306_Fill+0x18>)
 80021a2:	00d2      	lsls	r2, r2, #3
 80021a4:	f000 fd1f 	bl	8002be6 <memset>
}
 80021a8:	bd10      	pop	{r4, pc}
 80021aa:	46c0      	nop			; (mov r8, r8)
 80021ac:	2000007c 	.word	0x2000007c

080021b0 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80021b0:	b530      	push	{r4, r5, lr}
	if (
 80021b2:	2880      	cmp	r0, #128	; 0x80
 80021b4:	d815      	bhi.n	80021e2 <SSD1306_DrawPixel+0x32>
		x >= SSD1306_WIDTH ||
 80021b6:	293f      	cmp	r1, #63	; 0x3f
 80021b8:	d813      	bhi.n	80021e2 <SSD1306_DrawPixel+0x32>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80021ba:	4b0d      	ldr	r3, [pc, #52]	; (80021f0 <SSD1306_DrawPixel+0x40>)
 80021bc:	791b      	ldrb	r3, [r3, #4]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d002      	beq.n	80021c8 <SSD1306_DrawPixel+0x18>
		color = (SSD1306_COLOR_t)!color;
 80021c2:	4253      	negs	r3, r2
 80021c4:	415a      	adcs	r2, r3
 80021c6:	b2d2      	uxtb	r2, r2
 80021c8:	2381      	movs	r3, #129	; 0x81
 80021ca:	08cd      	lsrs	r5, r1, #3
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80021cc:	436b      	muls	r3, r5
 80021ce:	1818      	adds	r0, r3, r0
 80021d0:	2307      	movs	r3, #7
 80021d2:	4c08      	ldr	r4, [pc, #32]	; (80021f4 <SSD1306_DrawPixel+0x44>)
 80021d4:	4019      	ands	r1, r3
	if (color == SSD1306_COLOR_WHITE) {
 80021d6:	2a01      	cmp	r2, #1
 80021d8:	d104      	bne.n	80021e4 <SSD1306_DrawPixel+0x34>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80021da:	408a      	lsls	r2, r1
 80021dc:	5c23      	ldrb	r3, [r4, r0]
 80021de:	431a      	orrs	r2, r3
 80021e0:	5422      	strb	r2, [r4, r0]
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
	}
}
 80021e2:	bd30      	pop	{r4, r5, pc}
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80021e4:	2201      	movs	r2, #1
 80021e6:	408a      	lsls	r2, r1
 80021e8:	5c23      	ldrb	r3, [r4, r0]
 80021ea:	4393      	bics	r3, r2
 80021ec:	5423      	strb	r3, [r4, r0]
 80021ee:	e7f8      	b.n	80021e2 <SSD1306_DrawPixel+0x32>
 80021f0:	20000076 	.word	0x20000076
 80021f4:	2000007c 	.word	0x2000007c

080021f8 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80021f8:	4b01      	ldr	r3, [pc, #4]	; (8002200 <SSD1306_GotoXY+0x8>)
 80021fa:	8018      	strh	r0, [r3, #0]
	SSD1306.CurrentY = y;
 80021fc:	8059      	strh	r1, [r3, #2]
}
 80021fe:	4770      	bx	lr
 8002200:	20000076 	.word	0x20000076

08002204 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002204:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002206:	b085      	sub	sp, #20
 8002208:	9202      	str	r2, [sp, #8]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800220a:	4a23      	ldr	r2, [pc, #140]	; (8002298 <SSD1306_Putc+0x94>)
char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 800220c:	000c      	movs	r4, r1
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800220e:	8813      	ldrh	r3, [r2, #0]
char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002210:	0007      	movs	r7, r0
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002212:	9300      	str	r3, [sp, #0]
 8002214:	780b      	ldrb	r3, [r1, #0]
 8002216:	9900      	ldr	r1, [sp, #0]
 8002218:	185b      	adds	r3, r3, r1
	if (
 800221a:	2b80      	cmp	r3, #128	; 0x80
 800221c:	dc07      	bgt.n	800222e <SSD1306_Putc+0x2a>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 800221e:	8853      	ldrh	r3, [r2, #2]
 8002220:	2600      	movs	r6, #0
 8002222:	9301      	str	r3, [sp, #4]
 8002224:	9a01      	ldr	r2, [sp, #4]
 8002226:	7863      	ldrb	r3, [r4, #1]
 8002228:	189b      	adds	r3, r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800222a:	2b3f      	cmp	r3, #63	; 0x3f
 800222c:	dd0e      	ble.n	800224c <SSD1306_Putc+0x48>
	) {
		/* Error */
		return 0;
 800222e:	2700      	movs	r7, #0
 8002230:	e014      	b.n	800225c <SSD1306_Putc+0x58>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8002232:	003a      	movs	r2, r7
		for (j = 0; j < Font->FontWidth; j++) {
 8002234:	2500      	movs	r5, #0
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8002236:	3a20      	subs	r2, #32
 8002238:	4353      	muls	r3, r2
 800223a:	6862      	ldr	r2, [r4, #4]
 800223c:	199b      	adds	r3, r3, r6
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	5a9b      	ldrh	r3, [r3, r2]
 8002242:	9303      	str	r3, [sp, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8002244:	7823      	ldrb	r3, [r4, #0]
 8002246:	429d      	cmp	r5, r3
 8002248:	d30b      	bcc.n	8002262 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 800224a:	3601      	adds	r6, #1
 800224c:	7863      	ldrb	r3, [r4, #1]
 800224e:	429e      	cmp	r6, r3
 8002250:	d3ef      	bcc.n	8002232 <SSD1306_Putc+0x2e>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8002252:	9a00      	ldr	r2, [sp, #0]
 8002254:	7823      	ldrb	r3, [r4, #0]
 8002256:	18d3      	adds	r3, r2, r3
 8002258:	4a0f      	ldr	r2, [pc, #60]	; (8002298 <SSD1306_Putc+0x94>)
 800225a:	8013      	strh	r3, [r2, #0]
	
	/* Return character written */
	return ch;
}
 800225c:	0038      	movs	r0, r7
 800225e:	b005      	add	sp, #20
 8002260:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002262:	9b01      	ldr	r3, [sp, #4]
			if ((b << j) & 0x8000) {
 8002264:	2280      	movs	r2, #128	; 0x80
 8002266:	1999      	adds	r1, r3, r6
 8002268:	9b03      	ldr	r3, [sp, #12]
 800226a:	0212      	lsls	r2, r2, #8
 800226c:	40ab      	lsls	r3, r5
 800226e:	4213      	tst	r3, r2
 8002270:	d008      	beq.n	8002284 <SSD1306_Putc+0x80>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8002272:	9b00      	ldr	r3, [sp, #0]
 8002274:	9a02      	ldr	r2, [sp, #8]
 8002276:	1958      	adds	r0, r3, r5
 8002278:	b289      	uxth	r1, r1
 800227a:	b280      	uxth	r0, r0
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 800227c:	f7ff ff98 	bl	80021b0 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8002280:	3501      	adds	r5, #1
 8002282:	e7df      	b.n	8002244 <SSD1306_Putc+0x40>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8002284:	9a02      	ldr	r2, [sp, #8]
 8002286:	b289      	uxth	r1, r1
 8002288:	4253      	negs	r3, r2
 800228a:	415a      	adcs	r2, r3
 800228c:	9b00      	ldr	r3, [sp, #0]
 800228e:	b2d2      	uxtb	r2, r2
 8002290:	1958      	adds	r0, r3, r5
 8002292:	b280      	uxth	r0, r0
 8002294:	e7f2      	b.n	800227c <SSD1306_Putc+0x78>
 8002296:	46c0      	nop			; (mov r8, r8)
 8002298:	20000076 	.word	0x20000076

0800229c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 800229c:	b570      	push	{r4, r5, r6, lr}
 800229e:	0004      	movs	r4, r0
 80022a0:	000d      	movs	r5, r1
 80022a2:	0016      	movs	r6, r2
	/* Write characters */
	while (*str) {
 80022a4:	7820      	ldrb	r0, [r4, #0]
 80022a6:	2800      	cmp	r0, #0
 80022a8:	d100      	bne.n	80022ac <SSD1306_Puts+0x10>
		str++;
	}
	
	/* Everything OK, zero should be returned */
	return *str;
}
 80022aa:	bd70      	pop	{r4, r5, r6, pc}
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80022ac:	0032      	movs	r2, r6
 80022ae:	0029      	movs	r1, r5
 80022b0:	f7ff ffa8 	bl	8002204 <SSD1306_Putc>
 80022b4:	0003      	movs	r3, r0
 80022b6:	7820      	ldrb	r0, [r4, #0]
 80022b8:	4283      	cmp	r3, r0
 80022ba:	d1f6      	bne.n	80022aa <SSD1306_Puts+0xe>
		str++;
 80022bc:	3401      	adds	r4, #1
 80022be:	e7f1      	b.n	80022a4 <SSD1306_Puts+0x8>

080022c0 <SSD1306_DrawLine>:
 

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 80022c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022c2:	b087      	sub	sp, #28
 80022c4:	ac0c      	add	r4, sp, #48	; 0x30
 80022c6:	7824      	ldrb	r4, [r4, #0]
 80022c8:	1c05      	adds	r5, r0, #0
 80022ca:	9405      	str	r4, [sp, #20]
 80022cc:	2880      	cmp	r0, #128	; 0x80
 80022ce:	d900      	bls.n	80022d2 <SSD1306_DrawLine+0x12>
 80022d0:	2580      	movs	r5, #128	; 0x80
 80022d2:	b2ad      	uxth	r5, r5
 80022d4:	1c17      	adds	r7, r2, #0
 80022d6:	2a80      	cmp	r2, #128	; 0x80
 80022d8:	d900      	bls.n	80022dc <SSD1306_DrawLine+0x1c>
 80022da:	2780      	movs	r7, #128	; 0x80
 80022dc:	b2bf      	uxth	r7, r7
 80022de:	1c0c      	adds	r4, r1, #0
 80022e0:	293f      	cmp	r1, #63	; 0x3f
 80022e2:	d900      	bls.n	80022e6 <SSD1306_DrawLine+0x26>
 80022e4:	243f      	movs	r4, #63	; 0x3f
 80022e6:	b2a4      	uxth	r4, r4
 80022e8:	1c1e      	adds	r6, r3, #0
 80022ea:	2b3f      	cmp	r3, #63	; 0x3f
 80022ec:	d900      	bls.n	80022f0 <SSD1306_DrawLine+0x30>
 80022ee:	263f      	movs	r6, #63	; 0x3f
 80022f0:	b2b6      	uxth	r6, r6
	}
	if (y1 >= SSD1306_HEIGHT) {
		y1 = SSD1306_HEIGHT - 1;
	}
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 80022f2:	42bd      	cmp	r5, r7
 80022f4:	d20e      	bcs.n	8002314 <SSD1306_DrawLine+0x54>
 80022f6:	1b7b      	subs	r3, r7, r5
 80022f8:	b21b      	sxth	r3, r3
 80022fa:	9301      	str	r3, [sp, #4]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 80022fc:	42a6      	cmp	r6, r4
 80022fe:	d900      	bls.n	8002302 <SSD1306_DrawLine+0x42>
 8002300:	e07a      	b.n	80023f8 <SSD1306_DrawLine+0x138>
 8002302:	1ba3      	subs	r3, r4, r6
 8002304:	b21b      	sxth	r3, r3
 8002306:	9300      	str	r3, [sp, #0]
	sx = (x0 < x1) ? 1 : -1; 
 8002308:	2301      	movs	r3, #1
 800230a:	42bd      	cmp	r5, r7
 800230c:	d329      	bcc.n	8002362 <SSD1306_DrawLine+0xa2>
 800230e:	425b      	negs	r3, r3
 8002310:	9303      	str	r3, [sp, #12]
 8002312:	e00b      	b.n	800232c <SSD1306_DrawLine+0x6c>
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 8002314:	1beb      	subs	r3, r5, r7
 8002316:	b21b      	sxth	r3, r3
 8002318:	9301      	str	r3, [sp, #4]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 800231a:	42a6      	cmp	r6, r4
 800231c:	d9f1      	bls.n	8002302 <SSD1306_DrawLine+0x42>
 800231e:	1b33      	subs	r3, r6, r4
 8002320:	b21b      	sxth	r3, r3
 8002322:	9300      	str	r3, [sp, #0]
	sx = (x0 < x1) ? 1 : -1; 
 8002324:	2301      	movs	r3, #1
 8002326:	425b      	negs	r3, r3
 8002328:	9303      	str	r3, [sp, #12]
	sy = (y0 < y1) ? 1 : -1; 
 800232a:	3302      	adds	r3, #2
 800232c:	9304      	str	r3, [sp, #16]
	err = ((dx > dy) ? dx : -dy) / 2; 
 800232e:	9a01      	ldr	r2, [sp, #4]
 8002330:	9b00      	ldr	r3, [sp, #0]
 8002332:	4293      	cmp	r3, r2
 8002334:	da18      	bge.n	8002368 <SSD1306_DrawLine+0xa8>
 8002336:	0fd3      	lsrs	r3, r2, #31
 8002338:	189b      	adds	r3, r3, r2
 800233a:	105b      	asrs	r3, r3, #1
 800233c:	9302      	str	r3, [sp, #8]

	if (dx == 0) {
 800233e:	9b01      	ldr	r3, [sp, #4]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d121      	bne.n	8002388 <SSD1306_DrawLine+0xc8>
		if (y1 < y0) {
 8002344:	42a6      	cmp	r6, r4
 8002346:	d202      	bcs.n	800234e <SSD1306_DrawLine+0x8e>
 8002348:	0023      	movs	r3, r4
 800234a:	0034      	movs	r4, r6
 800234c:	001e      	movs	r6, r3
 800234e:	1c2b      	adds	r3, r5, #0
 8002350:	42bd      	cmp	r5, r7
 8002352:	d900      	bls.n	8002356 <SSD1306_DrawLine+0x96>
 8002354:	1c3b      	adds	r3, r7, #0
 8002356:	b29d      	uxth	r5, r3
			x1 = x0;
			x0 = tmp;
		}
		
		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 8002358:	b224      	sxth	r4, r4
 800235a:	42b4      	cmp	r4, r6
 800235c:	dd0c      	ble.n	8002378 <SSD1306_DrawLine+0xb8>
		if (e2 < dy) {
			err += dx;
			y0 += sy;
		} 
	}
}
 800235e:	b007      	add	sp, #28
 8002360:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sx = (x0 < x1) ? 1 : -1; 
 8002362:	9303      	str	r3, [sp, #12]
	sy = (y0 < y1) ? 1 : -1; 
 8002364:	3b02      	subs	r3, #2
 8002366:	e7e1      	b.n	800232c <SSD1306_DrawLine+0x6c>
	err = ((dx > dy) ? dx : -dy) / 2; 
 8002368:	9b00      	ldr	r3, [sp, #0]
 800236a:	9a00      	ldr	r2, [sp, #0]
 800236c:	0fdb      	lsrs	r3, r3, #31
 800236e:	189b      	adds	r3, r3, r2
 8002370:	105b      	asrs	r3, r3, #1
 8002372:	425b      	negs	r3, r3
 8002374:	b21b      	sxth	r3, r3
 8002376:	e7e1      	b.n	800233c <SSD1306_DrawLine+0x7c>
			SSD1306_DrawPixel(x0, i, c);
 8002378:	b2a4      	uxth	r4, r4
 800237a:	0021      	movs	r1, r4
 800237c:	9a05      	ldr	r2, [sp, #20]
 800237e:	0028      	movs	r0, r5
 8002380:	f7ff ff16 	bl	80021b0 <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 8002384:	3401      	adds	r4, #1
 8002386:	e7e7      	b.n	8002358 <SSD1306_DrawLine+0x98>
	if (dy == 0) {
 8002388:	9b00      	ldr	r3, [sp, #0]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d115      	bne.n	80023ba <SSD1306_DrawLine+0xfa>
 800238e:	1c33      	adds	r3, r6, #0
 8002390:	42a6      	cmp	r6, r4
 8002392:	d900      	bls.n	8002396 <SSD1306_DrawLine+0xd6>
 8002394:	1c23      	adds	r3, r4, #0
 8002396:	b29c      	uxth	r4, r3
		if (x1 < x0) {
 8002398:	42bd      	cmp	r5, r7
 800239a:	d902      	bls.n	80023a2 <SSD1306_DrawLine+0xe2>
 800239c:	002b      	movs	r3, r5
 800239e:	003d      	movs	r5, r7
 80023a0:	001f      	movs	r7, r3
		for (i = x0; i <= x1; i++) {
 80023a2:	b22d      	sxth	r5, r5
 80023a4:	42bd      	cmp	r5, r7
 80023a6:	dcda      	bgt.n	800235e <SSD1306_DrawLine+0x9e>
			SSD1306_DrawPixel(i, y0, c);
 80023a8:	b2ad      	uxth	r5, r5
 80023aa:	0028      	movs	r0, r5
 80023ac:	9a05      	ldr	r2, [sp, #20]
 80023ae:	0021      	movs	r1, r4
 80023b0:	f7ff fefe 	bl	80021b0 <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 80023b4:	3501      	adds	r5, #1
 80023b6:	e7f4      	b.n	80023a2 <SSD1306_DrawLine+0xe2>
		if (x1 < x0) {
 80023b8:	9302      	str	r3, [sp, #8]
		SSD1306_DrawPixel(x0, y0, c);
 80023ba:	9a05      	ldr	r2, [sp, #20]
 80023bc:	0021      	movs	r1, r4
 80023be:	0028      	movs	r0, r5
 80023c0:	f7ff fef6 	bl	80021b0 <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 80023c4:	42bd      	cmp	r5, r7
 80023c6:	d101      	bne.n	80023cc <SSD1306_DrawLine+0x10c>
 80023c8:	42b4      	cmp	r4, r6
 80023ca:	d0c8      	beq.n	800235e <SSD1306_DrawLine+0x9e>
		if (e2 > -dx) {
 80023cc:	9b01      	ldr	r3, [sp, #4]
 80023ce:	425a      	negs	r2, r3
 80023d0:	9b02      	ldr	r3, [sp, #8]
 80023d2:	4293      	cmp	r3, r2
 80023d4:	dd05      	ble.n	80023e2 <SSD1306_DrawLine+0x122>
			err -= dy;
 80023d6:	9a00      	ldr	r2, [sp, #0]
 80023d8:	1a9b      	subs	r3, r3, r2
			x0 += sx;
 80023da:	9a03      	ldr	r2, [sp, #12]
			err -= dy;
 80023dc:	b21b      	sxth	r3, r3
			x0 += sx;
 80023de:	18ad      	adds	r5, r5, r2
 80023e0:	b2ad      	uxth	r5, r5
		if (e2 < dy) {
 80023e2:	9a02      	ldr	r2, [sp, #8]
 80023e4:	9900      	ldr	r1, [sp, #0]
 80023e6:	428a      	cmp	r2, r1
 80023e8:	dae6      	bge.n	80023b8 <SSD1306_DrawLine+0xf8>
			err += dx;
 80023ea:	9a01      	ldr	r2, [sp, #4]
 80023ec:	189b      	adds	r3, r3, r2
			y0 += sy;
 80023ee:	9a04      	ldr	r2, [sp, #16]
			err += dx;
 80023f0:	b21b      	sxth	r3, r3
			y0 += sy;
 80023f2:	18a4      	adds	r4, r4, r2
 80023f4:	b2a4      	uxth	r4, r4
 80023f6:	e7df      	b.n	80023b8 <SSD1306_DrawLine+0xf8>
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 80023f8:	1b33      	subs	r3, r6, r4
 80023fa:	b21b      	sxth	r3, r3
 80023fc:	9300      	str	r3, [sp, #0]
	sx = (x0 < x1) ? 1 : -1; 
 80023fe:	2301      	movs	r3, #1
 8002400:	e786      	b.n	8002310 <SSD1306_DrawLine+0x50>

08002402 <SSD1306_DrawFilledRectangle>:
	SSD1306_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
	SSD1306_DrawLine(x, y, x, y + h, c);         /* Left line */
	SSD1306_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
}

void SSD1306_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 8002402:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002404:	b085      	sub	sp, #20
 8002406:	001c      	movs	r4, r3
 8002408:	ab0a      	add	r3, sp, #40	; 0x28
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	0006      	movs	r6, r0
 800240e:	000f      	movs	r7, r1
 8002410:	0015      	movs	r5, r2
 8002412:	9303      	str	r3, [sp, #12]
	uint8_t i;
	
	/* Check input parameters */
	if (
 8002414:	2880      	cmp	r0, #128	; 0x80
 8002416:	d813      	bhi.n	8002440 <SSD1306_DrawFilledRectangle+0x3e>
		x >= SSD1306_WIDTH ||
 8002418:	293f      	cmp	r1, #63	; 0x3f
 800241a:	d811      	bhi.n	8002440 <SSD1306_DrawFilledRectangle+0x3e>
		/* Return error */
		return;
	}
	
	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 800241c:	1883      	adds	r3, r0, r2
 800241e:	2b80      	cmp	r3, #128	; 0x80
 8002420:	dd02      	ble.n	8002428 <SSD1306_DrawFilledRectangle+0x26>
		w = SSD1306_WIDTH - x;
 8002422:	2581      	movs	r5, #129	; 0x81
 8002424:	1a2d      	subs	r5, r5, r0
 8002426:	b2ad      	uxth	r5, r5
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 8002428:	193b      	adds	r3, r7, r4
 800242a:	2b3f      	cmp	r3, #63	; 0x3f
 800242c:	dd02      	ble.n	8002434 <SSD1306_DrawFilledRectangle+0x32>
		h = SSD1306_HEIGHT - y;
 800242e:	2440      	movs	r4, #64	; 0x40
 8002430:	1be4      	subs	r4, r4, r7
 8002432:	b2a4      	uxth	r4, r4
	}
	
	/* Draw lines */
	for (i = 0; i <= h; i++) {
 8002434:	2300      	movs	r3, #0
 8002436:	9302      	str	r3, [sp, #8]
 8002438:	466b      	mov	r3, sp
 800243a:	8919      	ldrh	r1, [r3, #8]
 800243c:	428c      	cmp	r4, r1
 800243e:	d201      	bcs.n	8002444 <SSD1306_DrawFilledRectangle+0x42>
		/* Draw lines */
		SSD1306_DrawLine(x, y + i, x + w, y + i, c);
	}
}
 8002440:	b005      	add	sp, #20
 8002442:	bdf0      	pop	{r4, r5, r6, r7, pc}
		SSD1306_DrawLine(x, y + i, x + w, y + i, c);
 8002444:	9b03      	ldr	r3, [sp, #12]
 8002446:	1879      	adds	r1, r7, r1
 8002448:	b289      	uxth	r1, r1
 800244a:	19aa      	adds	r2, r5, r6
 800244c:	9300      	str	r3, [sp, #0]
 800244e:	b292      	uxth	r2, r2
 8002450:	000b      	movs	r3, r1
 8002452:	0030      	movs	r0, r6
 8002454:	f7ff ff34 	bl	80022c0 <SSD1306_DrawLine>
	for (i = 0; i <= h; i++) {
 8002458:	9b02      	ldr	r3, [sp, #8]
 800245a:	3301      	adds	r3, #1
 800245c:	b2db      	uxtb	r3, r3
 800245e:	e7ea      	b.n	8002436 <SSD1306_DrawFilledRectangle+0x34>

08002460 <SSD1306_DrawCircle>:
		x += xinc2;
		y += yinc2;
	}
}

void SSD1306_DrawCircle(int16_t x0, int16_t y0, int16_t r, SSD1306_COLOR_t c) {
 8002460:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002462:	b089      	sub	sp, #36	; 0x24
 8002464:	001c      	movs	r4, r3
	int16_t f = 1 - r;
 8002466:	466b      	mov	r3, sp
 8002468:	2601      	movs	r6, #1
void SSD1306_DrawCircle(int16_t x0, int16_t y0, int16_t r, SSD1306_COLOR_t c) {
 800246a:	9204      	str	r2, [sp, #16]
	int16_t f = 1 - r;
 800246c:	8a1d      	ldrh	r5, [r3, #16]
	int16_t ddF_x = 1;
	int16_t ddF_y = -2 * r;
	int16_t x = 0;
	int16_t y = r;

    SSD1306_DrawPixel(x0, y0 + r, c);
 800246e:	0022      	movs	r2, r4
	int16_t f = 1 - r;
 8002470:	1b73      	subs	r3, r6, r5
 8002472:	b21b      	sxth	r3, r3
 8002474:	9303      	str	r3, [sp, #12]
	int16_t ddF_y = -2 * r;
 8002476:	006b      	lsls	r3, r5, #1
 8002478:	425b      	negs	r3, r3
 800247a:	b21b      	sxth	r3, r3
 800247c:	9307      	str	r3, [sp, #28]
    SSD1306_DrawPixel(x0, y0 + r, c);
 800247e:	b283      	uxth	r3, r0
 8002480:	9300      	str	r3, [sp, #0]
 8002482:	b28b      	uxth	r3, r1
 8002484:	18e9      	adds	r1, r5, r3
 8002486:	b289      	uxth	r1, r1
 8002488:	9800      	ldr	r0, [sp, #0]
 800248a:	9301      	str	r3, [sp, #4]
 800248c:	f7ff fe90 	bl	80021b0 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0, y0 - r, c);
 8002490:	9b01      	ldr	r3, [sp, #4]
 8002492:	0022      	movs	r2, r4
 8002494:	1b59      	subs	r1, r3, r5
 8002496:	b289      	uxth	r1, r1
 8002498:	9800      	ldr	r0, [sp, #0]
 800249a:	f7ff fe89 	bl	80021b0 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 + r, y0, c);
 800249e:	9b00      	ldr	r3, [sp, #0]
 80024a0:	0022      	movs	r2, r4
 80024a2:	18e8      	adds	r0, r5, r3
 80024a4:	b280      	uxth	r0, r0
 80024a6:	9901      	ldr	r1, [sp, #4]
 80024a8:	f7ff fe82 	bl	80021b0 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 - r, y0, c);
 80024ac:	9b00      	ldr	r3, [sp, #0]
 80024ae:	0022      	movs	r2, r4
 80024b0:	1b58      	subs	r0, r3, r5
 80024b2:	b280      	uxth	r0, r0
 80024b4:	9901      	ldr	r1, [sp, #4]
 80024b6:	f7ff fe7b 	bl	80021b0 <SSD1306_DrawPixel>

    while (x < y) {
 80024ba:	9602      	str	r6, [sp, #8]
 80024bc:	9b02      	ldr	r3, [sp, #8]
 80024be:	9a04      	ldr	r2, [sp, #16]
 80024c0:	3b01      	subs	r3, #1
 80024c2:	b21b      	sxth	r3, r3
 80024c4:	429a      	cmp	r2, r3
 80024c6:	dc01      	bgt.n	80024cc <SSD1306_DrawCircle+0x6c>
        SSD1306_DrawPixel(x0 + y, y0 + x, c);
        SSD1306_DrawPixel(x0 - y, y0 + x, c);
        SSD1306_DrawPixel(x0 + y, y0 - x, c);
        SSD1306_DrawPixel(x0 - y, y0 - x, c);
    }
}
 80024c8:	b009      	add	sp, #36	; 0x24
 80024ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (f >= 0) {
 80024cc:	9b03      	ldr	r3, [sp, #12]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	db0c      	blt.n	80024ec <SSD1306_DrawCircle+0x8c>
            y--;
 80024d2:	9b04      	ldr	r3, [sp, #16]
 80024d4:	3b01      	subs	r3, #1
 80024d6:	b21b      	sxth	r3, r3
 80024d8:	9304      	str	r3, [sp, #16]
            ddF_y += 2;
 80024da:	9b07      	ldr	r3, [sp, #28]
 80024dc:	3302      	adds	r3, #2
 80024de:	b29b      	uxth	r3, r3
 80024e0:	b21a      	sxth	r2, r3
 80024e2:	9207      	str	r2, [sp, #28]
            f += ddF_y;
 80024e4:	9a03      	ldr	r2, [sp, #12]
 80024e6:	189b      	adds	r3, r3, r2
 80024e8:	b21b      	sxth	r3, r3
 80024ea:	9303      	str	r3, [sp, #12]
 80024ec:	9b02      	ldr	r3, [sp, #8]
        f += ddF_x;
 80024ee:	9a03      	ldr	r2, [sp, #12]
 80024f0:	005d      	lsls	r5, r3, #1
 80024f2:	b2ab      	uxth	r3, r5
 80024f4:	9306      	str	r3, [sp, #24]
 80024f6:	3301      	adds	r3, #1
 80024f8:	189b      	adds	r3, r3, r2
 80024fa:	b21b      	sxth	r3, r3
 80024fc:	9a02      	ldr	r2, [sp, #8]
 80024fe:	9303      	str	r3, [sp, #12]
 8002500:	9b00      	ldr	r3, [sp, #0]
 8002502:	189d      	adds	r5, r3, r2
        SSD1306_DrawPixel(x0 + x, y0 + y, c);
 8002504:	466b      	mov	r3, sp
 8002506:	8a1b      	ldrh	r3, [r3, #16]
 8002508:	b2ad      	uxth	r5, r5
 800250a:	9305      	str	r3, [sp, #20]
 800250c:	9a05      	ldr	r2, [sp, #20]
 800250e:	9b01      	ldr	r3, [sp, #4]
 8002510:	0028      	movs	r0, r5
 8002512:	189f      	adds	r7, r3, r2
 8002514:	b2bf      	uxth	r7, r7
 8002516:	0039      	movs	r1, r7
 8002518:	0022      	movs	r2, r4
 800251a:	f7ff fe49 	bl	80021b0 <SSD1306_DrawPixel>
 800251e:	9b06      	ldr	r3, [sp, #24]
        SSD1306_DrawPixel(x0 - x, y0 + y, c);
 8002520:	0039      	movs	r1, r7
 8002522:	1aee      	subs	r6, r5, r3
 8002524:	b2b6      	uxth	r6, r6
 8002526:	0030      	movs	r0, r6
 8002528:	0022      	movs	r2, r4
 800252a:	f7ff fe41 	bl	80021b0 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 + x, y0 - y, c);
 800252e:	9b01      	ldr	r3, [sp, #4]
 8002530:	9a05      	ldr	r2, [sp, #20]
 8002532:	0028      	movs	r0, r5
 8002534:	1a9f      	subs	r7, r3, r2
 8002536:	b2bf      	uxth	r7, r7
 8002538:	0039      	movs	r1, r7
 800253a:	0022      	movs	r2, r4
 800253c:	f7ff fe38 	bl	80021b0 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - x, y0 - y, c);
 8002540:	0039      	movs	r1, r7
 8002542:	0030      	movs	r0, r6
 8002544:	0022      	movs	r2, r4
 8002546:	f7ff fe33 	bl	80021b0 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 + y, y0 + x, c);
 800254a:	9b00      	ldr	r3, [sp, #0]
 800254c:	9a05      	ldr	r2, [sp, #20]
 800254e:	189e      	adds	r6, r3, r2
 8002550:	9b01      	ldr	r3, [sp, #4]
 8002552:	9a02      	ldr	r2, [sp, #8]
 8002554:	b2b6      	uxth	r6, r6
 8002556:	189d      	adds	r5, r3, r2
 8002558:	b2ad      	uxth	r5, r5
 800255a:	0029      	movs	r1, r5
 800255c:	0022      	movs	r2, r4
 800255e:	0030      	movs	r0, r6
 8002560:	f7ff fe26 	bl	80021b0 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - y, y0 + x, c);
 8002564:	9b00      	ldr	r3, [sp, #0]
 8002566:	9a05      	ldr	r2, [sp, #20]
 8002568:	0029      	movs	r1, r5
 800256a:	1a9f      	subs	r7, r3, r2
 800256c:	b2bf      	uxth	r7, r7
 800256e:	0022      	movs	r2, r4
 8002570:	0038      	movs	r0, r7
 8002572:	f7ff fe1d 	bl	80021b0 <SSD1306_DrawPixel>
 8002576:	9b06      	ldr	r3, [sp, #24]
        SSD1306_DrawPixel(x0 + y, y0 - x, c);
 8002578:	0022      	movs	r2, r4
 800257a:	1aed      	subs	r5, r5, r3
 800257c:	b2ad      	uxth	r5, r5
 800257e:	0029      	movs	r1, r5
 8002580:	0030      	movs	r0, r6
 8002582:	f7ff fe15 	bl	80021b0 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - y, y0 - x, c);
 8002586:	0022      	movs	r2, r4
 8002588:	0029      	movs	r1, r5
 800258a:	0038      	movs	r0, r7
 800258c:	f7ff fe10 	bl	80021b0 <SSD1306_DrawPixel>
 8002590:	9b02      	ldr	r3, [sp, #8]
 8002592:	3301      	adds	r3, #1
 8002594:	b29b      	uxth	r3, r3
 8002596:	9302      	str	r3, [sp, #8]
 8002598:	e790      	b.n	80024bc <SSD1306_DrawCircle+0x5c>

0800259a <SSD1306_DrawFilledCircle>:

void SSD1306_DrawFilledCircle(int16_t x0, int16_t y0, int16_t r, SSD1306_COLOR_t c) {
 800259a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800259c:	b08b      	sub	sp, #44	; 0x2c
 800259e:	001d      	movs	r5, r3
	int16_t f = 1 - r;
 80025a0:	466b      	mov	r3, sp
 80025a2:	2701      	movs	r7, #1
void SSD1306_DrawFilledCircle(int16_t x0, int16_t y0, int16_t r, SSD1306_COLOR_t c) {
 80025a4:	9207      	str	r2, [sp, #28]
	int16_t f = 1 - r;
 80025a6:	8b9c      	ldrh	r4, [r3, #28]
	int16_t ddF_x = 1;
	int16_t ddF_y = -2 * r;
	int16_t x = 0;
	int16_t y = r;

    SSD1306_DrawPixel(x0, y0 + r, c);
 80025a8:	002a      	movs	r2, r5
	int16_t f = 1 - r;
 80025aa:	1b3b      	subs	r3, r7, r4
 80025ac:	b21b      	sxth	r3, r3
 80025ae:	9306      	str	r3, [sp, #24]
	int16_t ddF_y = -2 * r;
 80025b0:	0063      	lsls	r3, r4, #1
 80025b2:	425b      	negs	r3, r3
 80025b4:	b21b      	sxth	r3, r3
 80025b6:	9309      	str	r3, [sp, #36]	; 0x24
    SSD1306_DrawPixel(x0, y0 + r, c);
 80025b8:	b283      	uxth	r3, r0
 80025ba:	9304      	str	r3, [sp, #16]
 80025bc:	b28b      	uxth	r3, r1
 80025be:	18e1      	adds	r1, r4, r3
 80025c0:	b289      	uxth	r1, r1
 80025c2:	9804      	ldr	r0, [sp, #16]
 80025c4:	9303      	str	r3, [sp, #12]
 80025c6:	f7ff fdf3 	bl	80021b0 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0, y0 - r, c);
 80025ca:	9b03      	ldr	r3, [sp, #12]
 80025cc:	002a      	movs	r2, r5
 80025ce:	1b19      	subs	r1, r3, r4
 80025d0:	b289      	uxth	r1, r1
 80025d2:	9804      	ldr	r0, [sp, #16]
 80025d4:	f7ff fdec 	bl	80021b0 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 + r, y0, c);
 80025d8:	9b04      	ldr	r3, [sp, #16]
 80025da:	002a      	movs	r2, r5
 80025dc:	18e6      	adds	r6, r4, r3
 80025de:	b2b6      	uxth	r6, r6
 80025e0:	9903      	ldr	r1, [sp, #12]
 80025e2:	0030      	movs	r0, r6
 80025e4:	f7ff fde4 	bl	80021b0 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 - r, y0, c);
 80025e8:	9b04      	ldr	r3, [sp, #16]
 80025ea:	002a      	movs	r2, r5
 80025ec:	1b1c      	subs	r4, r3, r4
 80025ee:	b2a4      	uxth	r4, r4
 80025f0:	9903      	ldr	r1, [sp, #12]
 80025f2:	0020      	movs	r0, r4
 80025f4:	f7ff fddc 	bl	80021b0 <SSD1306_DrawPixel>
    SSD1306_DrawLine(x0 - r, y0, x0 + r, y0, c);
 80025f8:	9b03      	ldr	r3, [sp, #12]
 80025fa:	9500      	str	r5, [sp, #0]
 80025fc:	0032      	movs	r2, r6
 80025fe:	0019      	movs	r1, r3
 8002600:	0020      	movs	r0, r4
 8002602:	f7ff fe5d 	bl	80022c0 <SSD1306_DrawLine>

    while (x < y) {
 8002606:	9705      	str	r7, [sp, #20]
 8002608:	9b05      	ldr	r3, [sp, #20]
 800260a:	9a07      	ldr	r2, [sp, #28]
 800260c:	3b01      	subs	r3, #1
 800260e:	b21b      	sxth	r3, r3
 8002610:	429a      	cmp	r2, r3
 8002612:	dc01      	bgt.n	8002618 <SSD1306_DrawFilledCircle+0x7e>
        SSD1306_DrawLine(x0 + x, y0 - y, x0 - x, y0 - y, c);

        SSD1306_DrawLine(x0 + y, y0 + x, x0 - y, y0 + x, c);
        SSD1306_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, c);
    }
}
 8002614:	b00b      	add	sp, #44	; 0x2c
 8002616:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (f >= 0) {
 8002618:	9b06      	ldr	r3, [sp, #24]
 800261a:	2b00      	cmp	r3, #0
 800261c:	db0c      	blt.n	8002638 <SSD1306_DrawFilledCircle+0x9e>
            y--;
 800261e:	9b07      	ldr	r3, [sp, #28]
 8002620:	3b01      	subs	r3, #1
 8002622:	b21b      	sxth	r3, r3
 8002624:	9307      	str	r3, [sp, #28]
            ddF_y += 2;
 8002626:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002628:	3302      	adds	r3, #2
 800262a:	b29b      	uxth	r3, r3
 800262c:	b21a      	sxth	r2, r3
 800262e:	9209      	str	r2, [sp, #36]	; 0x24
            f += ddF_y;
 8002630:	9a06      	ldr	r2, [sp, #24]
 8002632:	189b      	adds	r3, r3, r2
 8002634:	b21b      	sxth	r3, r3
 8002636:	9306      	str	r3, [sp, #24]
 8002638:	9b05      	ldr	r3, [sp, #20]
        f += ddF_x;
 800263a:	9a06      	ldr	r2, [sp, #24]
 800263c:	005c      	lsls	r4, r3, #1
 800263e:	b2a3      	uxth	r3, r4
 8002640:	9308      	str	r3, [sp, #32]
 8002642:	3301      	adds	r3, #1
 8002644:	189b      	adds	r3, r3, r2
 8002646:	b21b      	sxth	r3, r3
 8002648:	9a05      	ldr	r2, [sp, #20]
 800264a:	9306      	str	r3, [sp, #24]
 800264c:	9b04      	ldr	r3, [sp, #16]
 800264e:	1a9c      	subs	r4, r3, r2
        SSD1306_DrawLine(x0 - x, y0 + y, x0 + x, y0 + y, c);
 8002650:	466b      	mov	r3, sp
 8002652:	8b9e      	ldrh	r6, [r3, #28]
 8002654:	9b03      	ldr	r3, [sp, #12]
 8002656:	b2a4      	uxth	r4, r4
 8002658:	1999      	adds	r1, r3, r6
 800265a:	9b08      	ldr	r3, [sp, #32]
 800265c:	b289      	uxth	r1, r1
 800265e:	191f      	adds	r7, r3, r4
 8002660:	b2bf      	uxth	r7, r7
 8002662:	000b      	movs	r3, r1
 8002664:	003a      	movs	r2, r7
 8002666:	0020      	movs	r0, r4
 8002668:	9500      	str	r5, [sp, #0]
 800266a:	f7ff fe29 	bl	80022c0 <SSD1306_DrawLine>
        SSD1306_DrawLine(x0 + x, y0 - y, x0 - x, y0 - y, c);
 800266e:	9b03      	ldr	r3, [sp, #12]
 8002670:	0022      	movs	r2, r4
 8002672:	1b99      	subs	r1, r3, r6
 8002674:	b289      	uxth	r1, r1
 8002676:	000b      	movs	r3, r1
 8002678:	0038      	movs	r0, r7
 800267a:	9500      	str	r5, [sp, #0]
 800267c:	f7ff fe20 	bl	80022c0 <SSD1306_DrawLine>
        SSD1306_DrawLine(x0 + y, y0 + x, x0 - y, y0 + x, c);
 8002680:	9b04      	ldr	r3, [sp, #16]
 8002682:	9a05      	ldr	r2, [sp, #20]
 8002684:	199f      	adds	r7, r3, r6
 8002686:	9b03      	ldr	r3, [sp, #12]
 8002688:	b2bf      	uxth	r7, r7
 800268a:	189c      	adds	r4, r3, r2
 800268c:	9b04      	ldr	r3, [sp, #16]
 800268e:	b2a4      	uxth	r4, r4
 8002690:	1b9e      	subs	r6, r3, r6
 8002692:	b2b6      	uxth	r6, r6
 8002694:	0023      	movs	r3, r4
 8002696:	0021      	movs	r1, r4
 8002698:	0032      	movs	r2, r6
 800269a:	0038      	movs	r0, r7
 800269c:	9500      	str	r5, [sp, #0]
 800269e:	f7ff fe0f 	bl	80022c0 <SSD1306_DrawLine>
 80026a2:	9b08      	ldr	r3, [sp, #32]
        SSD1306_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, c);
 80026a4:	9500      	str	r5, [sp, #0]
 80026a6:	1ae4      	subs	r4, r4, r3
 80026a8:	b2a1      	uxth	r1, r4
 80026aa:	000b      	movs	r3, r1
 80026ac:	0032      	movs	r2, r6
 80026ae:	0038      	movs	r0, r7
 80026b0:	f7ff fe06 	bl	80022c0 <SSD1306_DrawLine>
 80026b4:	9b05      	ldr	r3, [sp, #20]
 80026b6:	3301      	adds	r3, #1
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	9305      	str	r3, [sp, #20]
 80026bc:	e7a4      	b.n	8002608 <SSD1306_DrawFilledCircle+0x6e>
	...

080026c0 <ssd1306_I2C_WriteMulti>:
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80026c0:	b5b3      	push	{r0, r1, r4, r5, r7, lr}
	uint8_t dt[count + 1];
 80026c2:	001c      	movs	r4, r3
 80026c4:	466d      	mov	r5, sp
 80026c6:	3408      	adds	r4, #8
 80026c8:	08e4      	lsrs	r4, r4, #3
 80026ca:	00e4      	lsls	r4, r4, #3
 80026cc:	1b2c      	subs	r4, r5, r4
void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80026ce:	af02      	add	r7, sp, #8
	uint8_t dt[count + 1];
 80026d0:	46a5      	mov	sp, r4
	dt[0] = reg;
	uint8_t i;
	for(i = 1; i <= count; i++)
 80026d2:	2401      	movs	r4, #1
	uint8_t dt[count + 1];
 80026d4:	ad02      	add	r5, sp, #8
	dt[0] = reg;
 80026d6:	7029      	strb	r1, [r5, #0]
	for(i = 1; i <= count; i++)
 80026d8:	42a3      	cmp	r3, r4
 80026da:	d208      	bcs.n	80026ee <ssd1306_I2C_WriteMulti+0x2e>
		dt[i] = data[i-1];
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, count, 10);
 80026dc:	220a      	movs	r2, #10
 80026de:	b281      	uxth	r1, r0
 80026e0:	9200      	str	r2, [sp, #0]
 80026e2:	4806      	ldr	r0, [pc, #24]	; (80026fc <ssd1306_I2C_WriteMulti+0x3c>)
 80026e4:	002a      	movs	r2, r5
 80026e6:	f7fe f859 	bl	800079c <HAL_I2C_Master_Transmit>
}
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bdb0      	pop	{r4, r5, r7, pc}
		dt[i] = data[i-1];
 80026ee:	1911      	adds	r1, r2, r4
 80026f0:	3901      	subs	r1, #1
 80026f2:	7809      	ldrb	r1, [r1, #0]
 80026f4:	5529      	strb	r1, [r5, r4]
	for(i = 1; i <= count; i++)
 80026f6:	3401      	adds	r4, #1
 80026f8:	b2e4      	uxtb	r4, r4
 80026fa:	e7ed      	b.n	80026d8 <ssd1306_I2C_WriteMulti+0x18>
 80026fc:	200004fc 	.word	0x200004fc

08002700 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8002700:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t dt[2];
	dt[0] = reg;
	dt[1] = data;
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8002702:	230a      	movs	r3, #10
	dt[0] = reg;
 8002704:	ac03      	add	r4, sp, #12
 8002706:	7021      	strb	r1, [r4, #0]
	dt[1] = data;
 8002708:	7062      	strb	r2, [r4, #1]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800270a:	b281      	uxth	r1, r0
 800270c:	9300      	str	r3, [sp, #0]
 800270e:	0022      	movs	r2, r4
 8002710:	3b08      	subs	r3, #8
 8002712:	4802      	ldr	r0, [pc, #8]	; (800271c <ssd1306_I2C_Write+0x1c>)
 8002714:	f7fe f842 	bl	800079c <HAL_I2C_Master_Transmit>
}
 8002718:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
 800271a:	46c0      	nop			; (mov r8, r8)
 800271c:	200004fc 	.word	0x200004fc

08002720 <SSD1306_UpdateScreen>:
void SSD1306_UpdateScreen(void) {
 8002720:	b570      	push	{r4, r5, r6, lr}
 8002722:	2400      	movs	r4, #0
		SSD1306_WRITECOMMAND(0xB0 + m);
 8002724:	2578      	movs	r5, #120	; 0x78
 8002726:	0022      	movs	r2, r4
 8002728:	3a50      	subs	r2, #80	; 0x50
 800272a:	b2d2      	uxtb	r2, r2
 800272c:	2100      	movs	r1, #0
 800272e:	0028      	movs	r0, r5
 8002730:	f7ff ffe6 	bl	8002700 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8002734:	2200      	movs	r2, #0
 8002736:	0028      	movs	r0, r5
 8002738:	0011      	movs	r1, r2
 800273a:	f7ff ffe1 	bl	8002700 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800273e:	2210      	movs	r2, #16
 8002740:	2100      	movs	r1, #0
 8002742:	0028      	movs	r0, r5
 8002744:	f7ff ffdc 	bl	8002700 <ssd1306_I2C_Write>
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8002748:	2381      	movs	r3, #129	; 0x81
 800274a:	0019      	movs	r1, r3
 800274c:	4361      	muls	r1, r4
 800274e:	4a05      	ldr	r2, [pc, #20]	; (8002764 <SSD1306_UpdateScreen+0x44>)
 8002750:	0028      	movs	r0, r5
 8002752:	1852      	adds	r2, r2, r1
 8002754:	3401      	adds	r4, #1
 8002756:	2140      	movs	r1, #64	; 0x40
 8002758:	f7ff ffb2 	bl	80026c0 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800275c:	2c08      	cmp	r4, #8
 800275e:	d1e2      	bne.n	8002726 <SSD1306_UpdateScreen+0x6>
}
 8002760:	bd70      	pop	{r4, r5, r6, pc}
 8002762:	46c0      	nop			; (mov r8, r8)
 8002764:	2000007c 	.word	0x2000007c

08002768 <SSD1306_Init>:
uint8_t SSD1306_Init(void) {
 8002768:	b510      	push	{r4, lr}
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800276a:	4b51      	ldr	r3, [pc, #324]	; (80028b0 <SSD1306_Init+0x148>)
 800276c:	2201      	movs	r2, #1
 800276e:	2178      	movs	r1, #120	; 0x78
 8002770:	4850      	ldr	r0, [pc, #320]	; (80028b4 <SSD1306_Init+0x14c>)
 8002772:	f7fe f8ab 	bl	80008cc <HAL_I2C_IsDeviceReady>
		return 0;
 8002776:	2400      	movs	r4, #0
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8002778:	42a0      	cmp	r0, r4
 800277a:	d000      	beq.n	800277e <SSD1306_Init+0x16>
 800277c:	e095      	b.n	80028aa <SSD1306_Init+0x142>
	SSD1306_WRITECOMMAND(0xAE); //display off
 800277e:	0021      	movs	r1, r4
 8002780:	22ae      	movs	r2, #174	; 0xae
 8002782:	2078      	movs	r0, #120	; 0x78
 8002784:	f7ff ffbc 	bl	8002700 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8002788:	0021      	movs	r1, r4
 800278a:	2220      	movs	r2, #32
 800278c:	2078      	movs	r0, #120	; 0x78
 800278e:	f7ff ffb7 	bl	8002700 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8002792:	0021      	movs	r1, r4
 8002794:	2210      	movs	r2, #16
 8002796:	2078      	movs	r0, #120	; 0x78
 8002798:	f7ff ffb2 	bl	8002700 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800279c:	0021      	movs	r1, r4
 800279e:	22b0      	movs	r2, #176	; 0xb0
 80027a0:	2078      	movs	r0, #120	; 0x78
 80027a2:	f7ff ffad 	bl	8002700 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80027a6:	0021      	movs	r1, r4
 80027a8:	22c8      	movs	r2, #200	; 0xc8
 80027aa:	2078      	movs	r0, #120	; 0x78
 80027ac:	f7ff ffa8 	bl	8002700 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80027b0:	0022      	movs	r2, r4
 80027b2:	0021      	movs	r1, r4
 80027b4:	2078      	movs	r0, #120	; 0x78
 80027b6:	f7ff ffa3 	bl	8002700 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80027ba:	0021      	movs	r1, r4
 80027bc:	2210      	movs	r2, #16
 80027be:	2078      	movs	r0, #120	; 0x78
 80027c0:	f7ff ff9e 	bl	8002700 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80027c4:	0021      	movs	r1, r4
 80027c6:	2240      	movs	r2, #64	; 0x40
 80027c8:	2078      	movs	r0, #120	; 0x78
 80027ca:	f7ff ff99 	bl	8002700 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80027ce:	0021      	movs	r1, r4
 80027d0:	2281      	movs	r2, #129	; 0x81
 80027d2:	2078      	movs	r0, #120	; 0x78
 80027d4:	f7ff ff94 	bl	8002700 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80027d8:	0021      	movs	r1, r4
 80027da:	22ff      	movs	r2, #255	; 0xff
 80027dc:	2078      	movs	r0, #120	; 0x78
 80027de:	f7ff ff8f 	bl	8002700 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80027e2:	0021      	movs	r1, r4
 80027e4:	22a1      	movs	r2, #161	; 0xa1
 80027e6:	2078      	movs	r0, #120	; 0x78
 80027e8:	f7ff ff8a 	bl	8002700 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80027ec:	0021      	movs	r1, r4
 80027ee:	22a6      	movs	r2, #166	; 0xa6
 80027f0:	2078      	movs	r0, #120	; 0x78
 80027f2:	f7ff ff85 	bl	8002700 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80027f6:	0021      	movs	r1, r4
 80027f8:	22a8      	movs	r2, #168	; 0xa8
 80027fa:	2078      	movs	r0, #120	; 0x78
 80027fc:	f7ff ff80 	bl	8002700 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8002800:	0021      	movs	r1, r4
 8002802:	223f      	movs	r2, #63	; 0x3f
 8002804:	2078      	movs	r0, #120	; 0x78
 8002806:	f7ff ff7b 	bl	8002700 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800280a:	0021      	movs	r1, r4
 800280c:	22a4      	movs	r2, #164	; 0xa4
 800280e:	2078      	movs	r0, #120	; 0x78
 8002810:	f7ff ff76 	bl	8002700 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8002814:	0021      	movs	r1, r4
 8002816:	22d3      	movs	r2, #211	; 0xd3
 8002818:	2078      	movs	r0, #120	; 0x78
 800281a:	f7ff ff71 	bl	8002700 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800281e:	0022      	movs	r2, r4
 8002820:	0021      	movs	r1, r4
 8002822:	2078      	movs	r0, #120	; 0x78
 8002824:	f7ff ff6c 	bl	8002700 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8002828:	0021      	movs	r1, r4
 800282a:	22d5      	movs	r2, #213	; 0xd5
 800282c:	2078      	movs	r0, #120	; 0x78
 800282e:	f7ff ff67 	bl	8002700 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8002832:	0021      	movs	r1, r4
 8002834:	22f0      	movs	r2, #240	; 0xf0
 8002836:	2078      	movs	r0, #120	; 0x78
 8002838:	f7ff ff62 	bl	8002700 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 800283c:	0021      	movs	r1, r4
 800283e:	22d9      	movs	r2, #217	; 0xd9
 8002840:	2078      	movs	r0, #120	; 0x78
 8002842:	f7ff ff5d 	bl	8002700 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8002846:	0021      	movs	r1, r4
 8002848:	2222      	movs	r2, #34	; 0x22
 800284a:	2078      	movs	r0, #120	; 0x78
 800284c:	f7ff ff58 	bl	8002700 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8002850:	0021      	movs	r1, r4
 8002852:	22da      	movs	r2, #218	; 0xda
 8002854:	2078      	movs	r0, #120	; 0x78
 8002856:	f7ff ff53 	bl	8002700 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800285a:	0021      	movs	r1, r4
 800285c:	2212      	movs	r2, #18
 800285e:	2078      	movs	r0, #120	; 0x78
 8002860:	f7ff ff4e 	bl	8002700 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8002864:	0021      	movs	r1, r4
 8002866:	22db      	movs	r2, #219	; 0xdb
 8002868:	2078      	movs	r0, #120	; 0x78
 800286a:	f7ff ff49 	bl	8002700 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800286e:	0021      	movs	r1, r4
 8002870:	2220      	movs	r2, #32
 8002872:	2078      	movs	r0, #120	; 0x78
 8002874:	f7ff ff44 	bl	8002700 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8002878:	0021      	movs	r1, r4
 800287a:	228d      	movs	r2, #141	; 0x8d
 800287c:	2078      	movs	r0, #120	; 0x78
 800287e:	f7ff ff3f 	bl	8002700 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8002882:	0021      	movs	r1, r4
 8002884:	2214      	movs	r2, #20
 8002886:	2078      	movs	r0, #120	; 0x78
 8002888:	f7ff ff3a 	bl	8002700 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 800288c:	0021      	movs	r1, r4
 800288e:	22af      	movs	r2, #175	; 0xaf
 8002890:	2078      	movs	r0, #120	; 0x78
 8002892:	f7ff ff35 	bl	8002700 <ssd1306_I2C_Write>
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002896:	0020      	movs	r0, r4
 8002898:	f7ff fc7c 	bl	8002194 <SSD1306_Fill>
	SSD1306_UpdateScreen();
 800289c:	f7ff ff40 	bl	8002720 <SSD1306_UpdateScreen>
	SSD1306.CurrentX = 0;
 80028a0:	4b05      	ldr	r3, [pc, #20]	; (80028b8 <SSD1306_Init+0x150>)
 80028a2:	801c      	strh	r4, [r3, #0]
	SSD1306.CurrentY = 0;
 80028a4:	805c      	strh	r4, [r3, #2]
	SSD1306.Initialized = 1;
 80028a6:	3401      	adds	r4, #1
 80028a8:	715c      	strb	r4, [r3, #5]
}
 80028aa:	0020      	movs	r0, r4
 80028ac:	bd10      	pop	{r4, pc}
 80028ae:	46c0      	nop			; (mov r8, r8)
 80028b0:	00004e20 	.word	0x00004e20
 80028b4:	200004fc 	.word	0x200004fc
 80028b8:	20000076 	.word	0x20000076

080028bc <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028bc:	2001      	movs	r0, #1
 80028be:	4b0a      	ldr	r3, [pc, #40]	; (80028e8 <HAL_MspInit+0x2c>)
{
 80028c0:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028c2:	6999      	ldr	r1, [r3, #24]
 80028c4:	4301      	orrs	r1, r0
 80028c6:	6199      	str	r1, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028c8:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028ca:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028cc:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028ce:	4002      	ands	r2, r0
 80028d0:	9200      	str	r2, [sp, #0]
 80028d2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028d4:	69da      	ldr	r2, [r3, #28]
 80028d6:	430a      	orrs	r2, r1
 80028d8:	61da      	str	r2, [r3, #28]
 80028da:	69db      	ldr	r3, [r3, #28]
 80028dc:	400b      	ands	r3, r1
 80028de:	9301      	str	r3, [sp, #4]
 80028e0:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028e2:	b002      	add	sp, #8
 80028e4:	4770      	bx	lr
 80028e6:	46c0      	nop			; (mov r8, r8)
 80028e8:	40021000 	.word	0x40021000

080028ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80028ec:	b510      	push	{r4, lr}
 80028ee:	0004      	movs	r4, r0
 80028f0:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028f2:	2214      	movs	r2, #20
 80028f4:	2100      	movs	r1, #0
 80028f6:	a803      	add	r0, sp, #12
 80028f8:	f000 f975 	bl	8002be6 <memset>
  if(hi2c->Instance==I2C1)
 80028fc:	4b13      	ldr	r3, [pc, #76]	; (800294c <HAL_I2C_MspInit+0x60>)
 80028fe:	6822      	ldr	r2, [r4, #0]
 8002900:	429a      	cmp	r2, r3
 8002902:	d120      	bne.n	8002946 <HAL_I2C_MspInit+0x5a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002904:	2180      	movs	r1, #128	; 0x80
 8002906:	4c12      	ldr	r4, [pc, #72]	; (8002950 <HAL_I2C_MspInit+0x64>)
 8002908:	02c9      	lsls	r1, r1, #11
 800290a:	6962      	ldr	r2, [r4, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800290c:	4811      	ldr	r0, [pc, #68]	; (8002954 <HAL_I2C_MspInit+0x68>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800290e:	430a      	orrs	r2, r1
 8002910:	6162      	str	r2, [r4, #20]
 8002912:	6963      	ldr	r3, [r4, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002914:	2203      	movs	r2, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002916:	400b      	ands	r3, r1
 8002918:	9301      	str	r3, [sp, #4]
 800291a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800291c:	23c0      	movs	r3, #192	; 0xc0
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002922:	2312      	movs	r3, #18
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002924:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002926:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002928:	3b11      	subs	r3, #17
 800292a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800292c:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800292e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002930:	f7fd fd32 	bl	8000398 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002934:	2180      	movs	r1, #128	; 0x80
 8002936:	69e2      	ldr	r2, [r4, #28]
 8002938:	0389      	lsls	r1, r1, #14
 800293a:	430a      	orrs	r2, r1
 800293c:	61e2      	str	r2, [r4, #28]
 800293e:	69e3      	ldr	r3, [r4, #28]
 8002940:	400b      	ands	r3, r1
 8002942:	9302      	str	r3, [sp, #8]
 8002944:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002946:	b008      	add	sp, #32
 8002948:	bd10      	pop	{r4, pc}
 800294a:	46c0      	nop			; (mov r8, r8)
 800294c:	40005400 	.word	0x40005400
 8002950:	40021000 	.word	0x40021000
 8002954:	48000400 	.word	0x48000400

08002958 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002958:	b530      	push	{r4, r5, lr}
 800295a:	0004      	movs	r4, r0
 800295c:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800295e:	2214      	movs	r2, #20
 8002960:	2100      	movs	r1, #0
 8002962:	a803      	add	r0, sp, #12
 8002964:	f000 f93f 	bl	8002be6 <memset>
  if(hspi->Instance==SPI1)
 8002968:	4b1b      	ldr	r3, [pc, #108]	; (80029d8 <HAL_SPI_MspInit+0x80>)
 800296a:	6822      	ldr	r2, [r4, #0]
 800296c:	429a      	cmp	r2, r3
 800296e:	d131      	bne.n	80029d4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002970:	2080      	movs	r0, #128	; 0x80
 8002972:	4b1a      	ldr	r3, [pc, #104]	; (80029dc <HAL_SPI_MspInit+0x84>)
 8002974:	0140      	lsls	r0, r0, #5
 8002976:	6999      	ldr	r1, [r3, #24]
    /**SPI1 GPIO Configuration    
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002978:	2502      	movs	r5, #2
    __HAL_RCC_SPI1_CLK_ENABLE();
 800297a:	4301      	orrs	r1, r0
 800297c:	6199      	str	r1, [r3, #24]
 800297e:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002980:	2403      	movs	r4, #3
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002982:	4002      	ands	r2, r0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002984:	2080      	movs	r0, #128	; 0x80
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002986:	9200      	str	r2, [sp, #0]
 8002988:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800298a:	6959      	ldr	r1, [r3, #20]
 800298c:	0280      	lsls	r0, r0, #10
 800298e:	4301      	orrs	r1, r0
 8002990:	6159      	str	r1, [r3, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002992:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002994:	695a      	ldr	r2, [r3, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002996:	02c9      	lsls	r1, r1, #11
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002998:	4002      	ands	r2, r0
 800299a:	9201      	str	r2, [sp, #4]
 800299c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800299e:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029a0:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029a2:	430a      	orrs	r2, r1
 80029a4:	615a      	str	r2, [r3, #20]
 80029a6:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029a8:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029aa:	400b      	ands	r3, r1
 80029ac:	9302      	str	r3, [sp, #8]
 80029ae:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80029b0:	2380      	movs	r3, #128	; 0x80
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029b2:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80029b4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b6:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029b8:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029ba:	f7fd fced 	bl	8000398 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80029be:	2308      	movs	r3, #8
 80029c0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c2:	2300      	movs	r3, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029c4:	a903      	add	r1, sp, #12
 80029c6:	4806      	ldr	r0, [pc, #24]	; (80029e0 <HAL_SPI_MspInit+0x88>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c8:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ca:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029cc:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80029ce:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029d0:	f7fd fce2 	bl	8000398 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80029d4:	b009      	add	sp, #36	; 0x24
 80029d6:	bd30      	pop	{r4, r5, pc}
 80029d8:	40013000 	.word	0x40013000
 80029dc:	40021000 	.word	0x40021000
 80029e0:	48000400 	.word	0x48000400

080029e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029e4:	b510      	push	{r4, lr}
 80029e6:	0004      	movs	r4, r0
 80029e8:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029ea:	2214      	movs	r2, #20
 80029ec:	2100      	movs	r1, #0
 80029ee:	a805      	add	r0, sp, #20
 80029f0:	f000 f8f9 	bl	8002be6 <memset>
  if(huart->Instance==USART2)
 80029f4:	6823      	ldr	r3, [r4, #0]
 80029f6:	4a27      	ldr	r2, [pc, #156]	; (8002a94 <HAL_UART_MspInit+0xb0>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d11f      	bne.n	8002a3c <HAL_UART_MspInit+0x58>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80029fc:	2280      	movs	r2, #128	; 0x80
 80029fe:	4b26      	ldr	r3, [pc, #152]	; (8002a98 <HAL_UART_MspInit+0xb4>)
 8002a00:	0292      	lsls	r2, r2, #10
 8002a02:	69d9      	ldr	r1, [r3, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a04:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a06:	4311      	orrs	r1, r2
 8002a08:	61d9      	str	r1, [r3, #28]
 8002a0a:	69d9      	ldr	r1, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a0c:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a0e:	4011      	ands	r1, r2
 8002a10:	9101      	str	r1, [sp, #4]
 8002a12:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a14:	6959      	ldr	r1, [r3, #20]
 8002a16:	4311      	orrs	r1, r2
 8002a18:	6159      	str	r1, [r3, #20]
 8002a1a:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a1c:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a1e:	401a      	ands	r2, r3
 8002a20:	9202      	str	r2, [sp, #8]
 8002a22:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002a24:	230c      	movs	r3, #12
 8002a26:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a28:	3b0a      	subs	r3, #10
 8002a2a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002a30:	3b02      	subs	r3, #2
 8002a32:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a34:	f7fd fcb0 	bl	8000398 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002a38:	b00a      	add	sp, #40	; 0x28
 8002a3a:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART3)
 8002a3c:	4a17      	ldr	r2, [pc, #92]	; (8002a9c <HAL_UART_MspInit+0xb8>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d1fa      	bne.n	8002a38 <HAL_UART_MspInit+0x54>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002a42:	2080      	movs	r0, #128	; 0x80
 8002a44:	4b14      	ldr	r3, [pc, #80]	; (8002a98 <HAL_UART_MspInit+0xb4>)
 8002a46:	02c0      	lsls	r0, r0, #11
 8002a48:	69d9      	ldr	r1, [r3, #28]
 8002a4a:	4301      	orrs	r1, r0
 8002a4c:	61d9      	str	r1, [r3, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a4e:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_USART3_CLK_ENABLE();
 8002a50:	69da      	ldr	r2, [r3, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a52:	0309      	lsls	r1, r1, #12
    __HAL_RCC_USART3_CLK_ENABLE();
 8002a54:	4002      	ands	r2, r0
 8002a56:	9203      	str	r2, [sp, #12]
 8002a58:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a5a:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a5c:	4810      	ldr	r0, [pc, #64]	; (8002aa0 <HAL_UART_MspInit+0xbc>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a5e:	430a      	orrs	r2, r1
 8002a60:	615a      	str	r2, [r3, #20]
 8002a62:	695b      	ldr	r3, [r3, #20]
 8002a64:	400b      	ands	r3, r1
 8002a66:	9304      	str	r3, [sp, #16]
 8002a68:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002a6a:	2330      	movs	r3, #48	; 0x30
 8002a6c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a6e:	3b2e      	subs	r3, #46	; 0x2e
 8002a70:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a72:	3301      	adds	r3, #1
 8002a74:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a76:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF1_USART3;
 8002a78:	3b02      	subs	r3, #2
 8002a7a:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a7c:	f7fd fc8c 	bl	8000398 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 8002a80:	2200      	movs	r2, #0
 8002a82:	201d      	movs	r0, #29
 8002a84:	0011      	movs	r1, r2
 8002a86:	f7fd fc0f 	bl	80002a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 8002a8a:	201d      	movs	r0, #29
 8002a8c:	f7fd fc3c 	bl	8000308 <HAL_NVIC_EnableIRQ>
}
 8002a90:	e7d2      	b.n	8002a38 <HAL_UART_MspInit+0x54>
 8002a92:	46c0      	nop			; (mov r8, r8)
 8002a94:	40004400 	.word	0x40004400
 8002a98:	40021000 	.word	0x40021000
 8002a9c:	40004800 	.word	0x40004800
 8002aa0:	48000800 	.word	0x48000800

08002aa4 <NMI_Handler>:
 8002aa4:	4770      	bx	lr

08002aa6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002aa6:	e7fe      	b.n	8002aa6 <HardFault_Handler>

08002aa8 <SVC_Handler>:
 8002aa8:	4770      	bx	lr

08002aaa <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002aaa:	4770      	bx	lr

08002aac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002aac:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002aae:	f7fd fbed 	bl	800028c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ab2:	bd10      	pop	{r4, pc}

08002ab4 <EXTI4_15_IRQHandler>:
void EXTI4_15_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8002ab4:	2080      	movs	r0, #128	; 0x80
{
 8002ab6:	b510      	push	{r4, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8002ab8:	0080      	lsls	r0, r0, #2
 8002aba:	f7fd fd2f 	bl	800051c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002abe:	2080      	movs	r0, #128	; 0x80
 8002ac0:	0180      	lsls	r0, r0, #6
 8002ac2:	f7fd fd2b 	bl	800051c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8002ac6:	bd10      	pop	{r4, pc}

08002ac8 <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 global interrupts.
  */
void USART3_4_IRQHandler(void)
{
 8002ac8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002aca:	4802      	ldr	r0, [pc, #8]	; (8002ad4 <USART3_4_IRQHandler+0xc>)
 8002acc:	f7fe ff54 	bl	8001978 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 8002ad0:	bd10      	pop	{r4, pc}
 8002ad2:	46c0      	nop			; (mov r8, r8)
 8002ad4:	20000488 	.word	0x20000488

08002ad8 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8002ad8:	2101      	movs	r1, #1
 8002ada:	4b11      	ldr	r3, [pc, #68]	; (8002b20 <SystemInit+0x48>)
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8002adc:	4811      	ldr	r0, [pc, #68]	; (8002b24 <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001U;
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	430a      	orrs	r2, r1
 8002ae2:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8002ae4:	685a      	ldr	r2, [r3, #4]
 8002ae6:	4002      	ands	r2, r0
 8002ae8:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	480e      	ldr	r0, [pc, #56]	; (8002b28 <SystemInit+0x50>)
 8002aee:	4002      	ands	r2, r0
 8002af0:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	480d      	ldr	r0, [pc, #52]	; (8002b2c <SystemInit+0x54>)
 8002af6:	4002      	ands	r2, r0
 8002af8:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8002afa:	685a      	ldr	r2, [r3, #4]
 8002afc:	480c      	ldr	r0, [pc, #48]	; (8002b30 <SystemInit+0x58>)
 8002afe:	4002      	ands	r2, r0

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8002b00:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8002b02:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8002b04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b06:	4382      	bics	r2, r0
 8002b08:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined (STM32F072xB) || defined (STM32F078xx)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW, USBSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFCFE2CU;
 8002b0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b0c:	4809      	ldr	r0, [pc, #36]	; (8002b34 <SystemInit+0x5c>)
 8002b0e:	4002      	ands	r2, r0
 8002b10:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8002b12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b14:	438a      	bics	r2, r1
 8002b16:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8002b18:	2200      	movs	r2, #0
 8002b1a:	609a      	str	r2, [r3, #8]

}
 8002b1c:	4770      	bx	lr
 8002b1e:	46c0      	nop			; (mov r8, r8)
 8002b20:	40021000 	.word	0x40021000
 8002b24:	08ffb80c 	.word	0x08ffb80c
 8002b28:	fef6ffff 	.word	0xfef6ffff
 8002b2c:	fffbffff 	.word	0xfffbffff
 8002b30:	ffc0ffff 	.word	0xffc0ffff
 8002b34:	fffcfe2c 	.word	0xfffcfe2c

08002b38 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002b38:	480d      	ldr	r0, [pc, #52]	; (8002b70 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002b3a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b3c:	480d      	ldr	r0, [pc, #52]	; (8002b74 <LoopForever+0x6>)
  ldr r1, =_edata
 8002b3e:	490e      	ldr	r1, [pc, #56]	; (8002b78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002b40:	4a0e      	ldr	r2, [pc, #56]	; (8002b7c <LoopForever+0xe>)
  movs r3, #0
 8002b42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b44:	e002      	b.n	8002b4c <LoopCopyDataInit>

08002b46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b4a:	3304      	adds	r3, #4

08002b4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b50:	d3f9      	bcc.n	8002b46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b52:	4a0b      	ldr	r2, [pc, #44]	; (8002b80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002b54:	4c0b      	ldr	r4, [pc, #44]	; (8002b84 <LoopForever+0x16>)
  movs r3, #0
 8002b56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b58:	e001      	b.n	8002b5e <LoopFillZerobss>

08002b5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b5c:	3204      	adds	r2, #4

08002b5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b60:	d3fb      	bcc.n	8002b5a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002b62:	f7ff ffb9 	bl	8002ad8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002b66:	f000 f811 	bl	8002b8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002b6a:	f7ff f9df 	bl	8001f2c <main>

08002b6e <LoopForever>:

LoopForever:
    b LoopForever
 8002b6e:	e7fe      	b.n	8002b6e <LoopForever>
  ldr   r0, =_estack
 8002b70:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002b74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b78:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002b7c:	080033fc 	.word	0x080033fc
  ldr r2, =_sbss
 8002b80:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002b84:	20000620 	.word	0x20000620

08002b88 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002b88:	e7fe      	b.n	8002b88 <ADC1_COMP_IRQHandler>
	...

08002b8c <__libc_init_array>:
 8002b8c:	b570      	push	{r4, r5, r6, lr}
 8002b8e:	2600      	movs	r6, #0
 8002b90:	4d0c      	ldr	r5, [pc, #48]	; (8002bc4 <__libc_init_array+0x38>)
 8002b92:	4c0d      	ldr	r4, [pc, #52]	; (8002bc8 <__libc_init_array+0x3c>)
 8002b94:	1b64      	subs	r4, r4, r5
 8002b96:	10a4      	asrs	r4, r4, #2
 8002b98:	42a6      	cmp	r6, r4
 8002b9a:	d109      	bne.n	8002bb0 <__libc_init_array+0x24>
 8002b9c:	2600      	movs	r6, #0
 8002b9e:	f000 f82b 	bl	8002bf8 <_init>
 8002ba2:	4d0a      	ldr	r5, [pc, #40]	; (8002bcc <__libc_init_array+0x40>)
 8002ba4:	4c0a      	ldr	r4, [pc, #40]	; (8002bd0 <__libc_init_array+0x44>)
 8002ba6:	1b64      	subs	r4, r4, r5
 8002ba8:	10a4      	asrs	r4, r4, #2
 8002baa:	42a6      	cmp	r6, r4
 8002bac:	d105      	bne.n	8002bba <__libc_init_array+0x2e>
 8002bae:	bd70      	pop	{r4, r5, r6, pc}
 8002bb0:	00b3      	lsls	r3, r6, #2
 8002bb2:	58eb      	ldr	r3, [r5, r3]
 8002bb4:	4798      	blx	r3
 8002bb6:	3601      	adds	r6, #1
 8002bb8:	e7ee      	b.n	8002b98 <__libc_init_array+0xc>
 8002bba:	00b3      	lsls	r3, r6, #2
 8002bbc:	58eb      	ldr	r3, [r5, r3]
 8002bbe:	4798      	blx	r3
 8002bc0:	3601      	adds	r6, #1
 8002bc2:	e7f2      	b.n	8002baa <__libc_init_array+0x1e>
 8002bc4:	080033f4 	.word	0x080033f4
 8002bc8:	080033f4 	.word	0x080033f4
 8002bcc:	080033f4 	.word	0x080033f4
 8002bd0:	080033f8 	.word	0x080033f8

08002bd4 <memcpy>:
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	b510      	push	{r4, lr}
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d100      	bne.n	8002bde <memcpy+0xa>
 8002bdc:	bd10      	pop	{r4, pc}
 8002bde:	5ccc      	ldrb	r4, [r1, r3]
 8002be0:	54c4      	strb	r4, [r0, r3]
 8002be2:	3301      	adds	r3, #1
 8002be4:	e7f8      	b.n	8002bd8 <memcpy+0x4>

08002be6 <memset>:
 8002be6:	0003      	movs	r3, r0
 8002be8:	1882      	adds	r2, r0, r2
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d100      	bne.n	8002bf0 <memset+0xa>
 8002bee:	4770      	bx	lr
 8002bf0:	7019      	strb	r1, [r3, #0]
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	e7f9      	b.n	8002bea <memset+0x4>
	...

08002bf8 <_init>:
 8002bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bfa:	46c0      	nop			; (mov r8, r8)
 8002bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bfe:	bc08      	pop	{r3}
 8002c00:	469e      	mov	lr, r3
 8002c02:	4770      	bx	lr

08002c04 <_fini>:
 8002c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c06:	46c0      	nop			; (mov r8, r8)
 8002c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c0a:	bc08      	pop	{r3}
 8002c0c:	469e      	mov	lr, r3
 8002c0e:	4770      	bx	lr
